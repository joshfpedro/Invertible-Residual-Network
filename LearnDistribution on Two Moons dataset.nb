(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3153141,      56537]
NotebookOptionsPosition[   3149470,      56464]
NotebookOutlinePosition[   3149843,      56480]
CellTagsIndexPosition[   3149800,      56477]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Examples using change of variables", "Subsection",
 CellChangeTimes->{{3.7728146645008173`*^9, 
  3.7728146870834603`*^9}},ExpressionUUID->"87337af6-f5dc-4bff-8981-\
81ba89099865"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubsuperscriptBox["\[Integral]", "0", "t"], 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", "x"}]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], ",", 
     RowBox[{
      SubsuperscriptBox["\[Integral]", "0", "t"], 
      RowBox[{"2", "y", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "2"]}]], 
       RowBox[{"\[DifferentialD]", "y"}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.77276301030916*^9, 3.7727630317019353`*^9}, {
  3.7727638171526546`*^9, 3.7727638383815727`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"82dfa91b-7333-4bfb-8cc5-f642e388cf04"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`t$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`t$$], 0, 10}}, Typeset`size$$ = {86., {4., 13.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`t$18082$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`t$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$18082$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> {
        Integrate[E^(-$CellContext`x), {$CellContext`x, 0, $CellContext`t$$}], 
        Integrate[
        2 $CellContext`y 
         E^(-$CellContext`y^2), {$CellContext`y, 0, $CellContext`t$$}]}, 
      "Specifications" :> {{$CellContext`t$$, 0, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{379., {71., 80.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.7727630332172346`*^9, 3.7727638387605643`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"b1b4dff8-3b3f-4c29-95c4-22dc579ec317"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "x"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7727630377511063`*^9, 3.7727630941633277`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"80295e3c-af49-42a2-89ee-bb33f8e0861f"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwVy39cy3kcwPH1U2qq9aWLtFbnIU26kEc3D7w/Cpd+oR9X8nNLPyTRzi76
bpOuZFwMpZl+d3G49eux0K+hH5LaXJai5kq1YmRldlrSzv3xejz/ejkxjgRH
GxIIhMBv/W8+l2G68gC+wbnAq12vV0OLnBIQTtkJEny3P1OjBv0jyW8UykFY
Hk2qezuqhvwHWY4mlBPwizszbEyqhoT1rMOfHXmwrdE1yCFPDfIvcdkTjldh
4aY6IZOmhjn9Qy7jjjchKEJOr0n+AMVPCpPeOdZCRYjTIk/DcSiv4PUnuD+B
euYl7+vzVRALXVffM+XQqPdPp+WPQaLSdVhc/hJ6zW7RViYowdwp3WXgx0FI
V6fPBm8ZhvPWHdTi/cNALLqcQEh+DYz+0PtGnaOATlddexg1AEmt6YwjLirI
uRtHTPJRQNVRYojd1nGgBOSEfyh6CcX4IZVH+AT0CCZrooi9kFY4s+PT+0kY
jZRzlAPdQJAPooYUDSTZNXNCJ5/B0mMxx0OpWnjdhwXsInbBiDb3Z4vGf0Fi
SuuKHJOBnzKecylpCjrzY1fltHVA0Ah/OZk8DcmLAwucTNpB1cxIfSz6AhVr
8txFVY/AndTj4LPvK9j/Whu/Mb4FzEFLV2hmobzha2Iltwl+Go/87BxGQG9G
yQvsCh7Ai6YDBpFuBmiLxV/PT7xrhJozLXspWgPE/V4/34tSDzEmrEGZzBB9
8pOrZ6LuQRQTryEKjVD2yYjtdrZ34IfY5bIAujGi/nnb691cMTy1cbNg0UyQ
5+NakY1ZNdSXp11zMzJFvj0VKbbhlYAbULd3vjJFnvbEs4v2icBckeKbKJ6D
3l7Y3zfNvAXK607ZhWwzNEh96ndk5gZkL1toXBs2F1WV7B+RXyoDvjCmjU4x
R4Z5Sin7bClEZu+REcfMUbAguNWwoRimNpXpCiUWyMx6Z3f3+0IYVnofb8ok
otBe36zQiTwoWb/SXkqfh0Ty5985GwtBlMEixa6wRLzkQOGrrFzIDIvyN9Ja
opnmZNrInhxYoyi+mSm1QjWZ905SaJdB4HpNJPW3RtanGs5J4i/CyQdZAv9a
a9TIdfTwCLwAgfZhZU+WkJCwum5eqfvvsDGxbReJR0JrOXbMoiweFC5mLOnU
ktBRRejmkunTsKT5xpWgXTaIQuKtYT1NB/6KJuoziQ0iV3rn2Q6lQYzGuKud
iqHWVquhiNlUYFR9pPAuYGhVRIdLopQLCWkhM34XMUSef0Dz5j4XWCHiXuJl
DHHurys/WM2FM1rWef4VDK0u8Blj53KhnKb7kpuPIT9c76Cic0H3UN9z/TaG
guDm7lefOcB/RsxqacNQkf5M4IJlHBCWHo473Y6hOi+d+VZ7DpQek/n4dmDo
1Dk8Js2SA3ds+dMdMgyJ7/aNm2jZoIjE4uTPMWRCWK/b1sQGl+GFPkPDGLLv
Hh0Y38MGD3EK+Q8lhvh9ExEpO9iwNqNfFz327d+yaCtxMxsCXPIr36owdFix
OgO5sYF5iEKenMTQP5UCV9U0Dux1p3TVGgyRVovsSj7gkDFvqPuYFkNhKdJD
+4ZwEFSUnpuawtDHvfWeqnYcSlKNY+umMWQp+LvsbiMOt3dEe7NnMPSiMzXp
bBUOYudHDhtmMUSnM3MYZThINEt1ej2GOh4GWKGrOPwHSVJHUg==
       "]]},
     Annotation[#, "Charting`Private`Tag$4453#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772763052165996*^9, 3.772763094641073*^9}},
 CellLabel->"Out[6]=",ExpressionUUID->"cb27ec8e-7cbc-4935-a341-393451e89cab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "0", "t"], 
  RowBox[{"2", "y", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox["y", "2"]}]], 
   RowBox[{"\[DifferentialD]", "y"}]}]}]], "Input",
 CellChangeTimes->{{3.7727631775247774`*^9, 3.7727631807807417`*^9}, 
   3.7727634742368455`*^9, {3.772763555728012*^9, 3.77276355716121*^9}, {
   3.7727636171999474`*^9, 3.772763658529688*^9}, {3.772763694478862*^9, 
   3.772763697151827*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"b9830594-90f4-4367-a6ae-0e9eb3bc2115"],

Cell[BoxData[
 RowBox[{"1", "-", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    SuperscriptBox["t", "2"]}]]}]], "Output",
 CellChangeTimes->{
  3.772763181367882*^9, 3.7727634761745453`*^9, 3.7727635575411882`*^9, {
   3.7727636349619865`*^9, 3.7727636612031813`*^9}, 3.7727636977764144`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"f156bf38-9487-4067-a46f-0b0f518fb4cb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["y", "2"], "=", "x"}]], "Input",
 CellChangeTimes->{{3.772763351850397*^9, 
  3.772763353813275*^9}},ExpressionUUID->"6cd38048-a909-42da-8264-\
0b92ad0ed2ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "y", " ", 
   RowBox[{"dy", "/", "dx"}]}], "=", "1"}]], "Input",
 CellChangeTimes->{{3.7727633555835447`*^9, 
  3.7727633828547544`*^9}},ExpressionUUID->"130c6805-872a-4ed3-90c1-\
0cbac929fba8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"1", "-", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      SuperscriptBox["t", "2"]}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.772763439363134*^9, 3.772763462479261*^9}, {
  3.772763708989083*^9, 3.772763726427287*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"0ec16479-bf26-475d-907d-22272c67b717"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
IIofO2Mo2v7c9qrjqqK4e9tL2x7iO+cjptpXiaKZ7V6jXuKkkzzWH3eLourb
6ck+4pN+KalaZqI4HemlyaHP85ODkyH7RTFw50Vr2mm/M+7ssBTFFbNLy2nn
Wh2vKD8lio1OUzcpuv77Pix9fV0Uj5kuHPlDPLr54Vh0niiOR4q5DBC7vY72
KikUxSd9QndpM5ZHsrpKRPFs95Mc2kJyQQuWV4ni6PaeCdqzxlz1S5pE8bzC
qcuDxCueGd7t/COKn0+rnh4izlTYpsAaFMVvebz+tNdE6j7THBHF4CtBj2lv
9NUuvDgpip7bKr7R3nlEvkuMKYb1avVGw3R9/xtcrakghvNvNUqP0OfZj1Nk
qiSGn8r0V9B25u0yvKgihkZOl7fTdqPaLIuXieHJrEWXaPtVlF03XSeGhbv8
mmg/vhzVfMFUDB8c1bw2Stz+a6Nrka8YfoxryBqj84muiVP1E8Mn6dWVtGP2
HagOCRTDkLSgNtoWVWcXHr0thtENZ3jH6fOdGvOOL14MLwu/0qddf2lKfkue
GF6jmmpoa668uf1ZIYk3O+EL7WDOf+f/eyuGFwU2cmgbH1lS9atKDLnaQ2Jc
+j7bau7s80kMa99u1aNdJJlTUTZI1scZWbQXVG0ZXDYqhvF7FEpoe3jXyUZw
xXCEI1tHe8NI5zl7Xhaujovvpp3TOltWhM3CE0858ybo+Uh0djRQYyFzyS8X
2pJHeO6nLWVht/87T9pnpAPKpJezMMEzNID20oAEmZ7VLJwVUxhH+4njh1K/
rSx8eeVxFe249Zrzqo+wUCW+d/Ykna8x04trzcJwDQt52j8Ot3er2LMwVeaV
Mm0Fz9s5Pg4s/MNS0qGdUDq2Hy+x8LfM3320H+4oingZxsLkpa5htEstoxg/
wlmoKOIfRbvjrJM9O4qFOn/84mgrhSmtPhXLwsDXO1NpP2q+2aSUwkKW2GAl
7cdH9syKLGOhvWDNBO1yR3X38koWXn2fwztF3wdeAh3D1SzE0jvCtJUfZWXs
aWDhowGZmbSTuueZsr6zUGKlnSrtJ+d+hnqMs7BYcq4J7UrvN9yUSRZuWsXa
T7v79p2jbQxxTFw+cIi22iu9FWuExNF862072skTyfUDM8RRk6l9kfaza86S
dkvEEYWY92n3rjvkeU1DHJ9unxNLW31w80D8CnEMl5n38F98q5mN33TEsf/r
VDLtx/Ay4sBWcbSBjbm0E8b+yBkfFkeF0bpm2j9Tm4NPWonjhR7tVtoK9gU8
fjbi6Lo65CvtuI9B7WUnxPGNnnoH7eiXSxN1XcXx2My//bQjT51cuvKWOMpI
fGBO0/OuaBK9J0wcdx1LYtGe27qW7Rguji4JLmzaEQai/Sn3xbFx1sR/tG8v
fpKh/EQc/+xIlKcd/P33OplicYSLd7Vo10a8f7amlNSjfUSbtsTOLNn9FeIY
5bpDh3Zgng/jzntxPOPUvZ62f9SiEolWcVyXWbeVtq/p0e18Q+L4ZdBpL+24
Ha3mNqPiuEf97n7aufqmDmVccbRIzDxIu3/9tlt+vBKYmN12mLa5klrTDLYE
qrp9saO9fKTfSlFNAs2UX5+nbd/z81qnpgR+j1t9kfb9rx8fJ6+WwD3yMZdp
C5fncLS2SuCRVcu8aX+J8Ly45YgEuX8OBtOeGeB0X8ReAlNwVSht/au2BdUO
Eqj+mHGHdvoxA0EzNwl0rLKIon1zjVSIbbgEXu7e85B2wVL+DNUHEhg4nZRI
e2jhcBMnQQJzlf4m0bYU/TzfJU0CK+eapNBe2Rqb5FstgcsXns+knaDw+qfy
Zwk8FMXN/pfPiQa5yg4JlNbe+4b2uBvfdkEGG79jRDHtNPngTjNBNgpqXy2l
fbxExidRjI0J+7ZV0P4kql2oN5eN6kfO1vzr5/Mii7tybDTTaa6lrbdnx0TX
IjZ2Ky78QPtVpP0qv+VsFD5p3URb+cdVR3VgY6LkxpZ/86IS9ax6OxtPzy75
QtvZbez45f1sdDNd8YP27vd7lZfYsTF/scEv2ssWZv5qdWJj5DLJTtpizjPj
/T3ZWLM+uJt2qXTd/N77bDRm1XNoXykIiNiezcY4V+z/19/w/INqDWwM6BwZ
pN1x6q+sKEX2y1IZoR25WeFHt4gkTmv0jdI2mmf6sFJREicm9o3TLtscyOCY
SWLB+u0TtHUdyg5K3pDEjN/kuqLvz7czCxzyJXG+vdsU7WgZK8V3Q5KYmC4+
TfsH5X0oQFkKXUts/lmxOPGO8UEp1Ou4/88HRtMt2QFSuGFf4T8HLylSrc+T
wk615n++FNw+WT0ohd4lv//ZdoC/rkJ1Bt4z+/vP1vVcV5VDM1D96/A/W73o
l78RNAMV6PTp79WLBZSUzcC96RP/nDegNDY9PQPNZ0/98/95b+aq
       "]]},
     Annotation[#, "Charting`Private`Tag$17747#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7727634577707753`*^9, 3.7727634630936117`*^9}, {
  3.772763712378781*^9, 3.772763726921926*^9}},
 CellLabel->"Out[18]=",ExpressionUUID->"565cd58f-21c6-4ba0-8806-7e5cda5aab3b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"2", "y", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      SuperscriptBox["y", "2"]}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.772763524470544*^9, 3.7727635392300835`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"44bdc431-a7bb-47cb-99b8-c5d824b68e3d"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$7758#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.772763539733735*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"e3dd7b3f-9539-45f4-98e6-9790e25935d6"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[OpenCurlyDoubleQuote]Two Moons\[CloseCurlyDoubleQuote] data", \
"Subsection",
 CellChangeTimes->{{3.772813761600793*^9, 
  3.772813768406598*^9}},ExpressionUUID->"5e309b92-9483-4458-b46a-\
7a906d394649"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"points", "=", "10000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"noise", "=", "0.1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"k", "=", 
   FractionBox["4", 
    RowBox[{"points", "-", "2"}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "+", "0.5"}], ")"}], "2"]}], "+", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "1.5"}], ",", "0.5", ",", "k"}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{"2", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "0.5"}], ")"}], "2"]}], "-", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "0.5"}], ",", "1.5", ",", "k"}], "}"}]}], "]"}]}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", "data"}]}], "Input",
 CellChangeTimes->{{3.7728128440597258`*^9, 3.772812970704172*^9}, {
  3.7728130170382147`*^9, 3.7728130549168234`*^9}, {3.7728132996095257`*^9, 
  3.7728135234012156`*^9}, {3.7728136415869465`*^9, 3.7728136902498274`*^9}, {
  3.7728137729584284`*^9, 3.7728138803906045`*^9}, {3.77281393058981*^9, 
  3.7728139395767803`*^9}, {3.7728139940481973`*^9, 3.772813996525557*^9}, {
  3.772814048601939*^9, 3.772814071832833*^9}, {3.772814191640459*^9, 
  3.772814192814328*^9}, {3.7728142647333236`*^9, 3.7728142652140713`*^9}, {
  3.7728143202267427`*^9, 3.772814363337674*^9}, {3.7728143986644783`*^9, 
  3.772814398951719*^9}, {3.772814435666066*^9, 3.77281446577341*^9}, {
  3.7728150202576747`*^9, 3.772815041626583*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"99d2366b-03db-44d4-9dcb-abca59e5308c"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
BpdOPUv9KUkg6dPFDWi0DV7WRr1xZ3PRb0U3iQJqGziL7Wqt500iYEgelept
gwSVg8MtT7joVl5NVlRLG8jrK3VpbiGQt8eFoZ+1bUBfEN8mIMRDusrKiscq
2+B72cIPFgweWs7u9vz6oQ0+nV37QQHfP+1Z3EvV120QWv3q6GgR5qEz2hOZ
efj9tzpvury4KHnLqNaCnDaYM1HNViW56MTPu5f8b7WBwMkjcqJ43mu+PFjZ
l9AG5wPfSm/8x0ML/WaFTK61AWWoPM1IgYv6VV+ZFV1qgye2lHsrcR4p+uOc
JBfYBlLJLcvn8PlffbOsLfYM3s8lyW5ffL725ypXcV3bgNVmuFWEy0UqO845
nbBvg4Of97/fmMlF/ybkH3w/1AbnNrMXcHB+6njbytA0bQPHvn8d/BeTKC/o
6uYHqA2eKggUW1rwUJimxtklu9rg4d7NstnCBLIg6G8vqLYB1Vjc7407gTZ8
uMWnKrVB0U/adDWur78X9utZyrXB9calpa34vL/vJqM+rmyDJqMS7f5mHrr/
N79GcUkblPtdVPFbyUX+pcdEUwTbYH3LvqEwNR7af2nxoempVhBZEtp7Dvuh
rG5puvtEK7woSi2JDeehXzNnelrYrWAfIILnLxd9LZdZqzfcCjZTF2XbwyZR
+uWGk0+7W+HCBQHtaMyfZ1B4/ormVvhmnps9Jkggg3mqPy9/a4Vo6qmI4cU8
JP55cDunohVW7Eh6t+3VJGJGJQfbvm+F9aXvblw+wEUfjAxKK1+2wibCK66d
NokSBcfntjxphcdf7wefOspFp6oe7M241wrm/lRROMtDGtFHYgXSW+FUjkdy
OuY3kf2CP3zjW+FeW8V3LZyH+hYWS/RcaYUTU4sLEnD9Fn47fdT4Yiu4C6ev
nh3hoeuxkndfn2sFC2mXlo22PGRnVjO0xqsVKi3LbG8n8tA2kQuKMS6tsLxC
d2zvAy6a+77Ja9yuFQK5EhU9OO+1x3e/dLLC+3WhlpDDk+j5wbiJb/tbgbnC
y/YLzpOXlmrv2qnfCo21H79ysX6HGzmXcjRbQSfb/9lGBy6ST75buXhbK/y2
lfOhD3MRaXVwQbBiKxjHWqxKwPr9EJ81o8i0gvSVU73fz0yinJaXSQdWtEJ5
3vlm60uTKCjNue29SCuMPLgX+bKAh/ZZL5NWEGgFVqfWpMDZSSSzstIp8W8L
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
ybYrm9jpqE/yXthWJXH54fwEXEzyYPh2LDw0PrYcB0heDH99lXYtDm7EcpIn
wwebo39sMynFEJI3w82a2fdqCsrRjuTR8ES89+Y7Wo24k+TV8GrFZfbzTY0o
S/Js2NKsN3fOvCQUkbwbcro8omQOtGA+ycNhl2D+4UumjfiU5OVQauO5nJC4
GjxD8nR4cUZya/9YJm4meTvsUWxJFW4sQmmSx8OlnBnFLr9bkEPyerg53dW0
WaMY35M8H+o4rZipq9CAD0neD9WMSuTl3crRkuQBsbKfdTRwuArXkbwgMt+o
00TnECfC/5cnRP8+G6bKRD52kLwhDiwb/KU32IDJJI+I2l0j3+Oml6IrySsi
p/P7Q+n0XDQheUYMVRQcvVeRgytI3hHLn7m8TJtVh79IHhLbgyS++fBasJHk
JVFZ5dK5bAPE1yRPiSdf2rkPj1XhTZK3xJhM7d35xyrQgOQx8eOk38q7GytQ
geQ1kZnp+eaNYSV+I3lO5PjWXDCntmElyXvizZuHdnza2YgvSR4UzZ4snBpG
q8FLJC+KB2n0RnXrMtxF8qQoWyi3tnOoDOeRvCn6XUjX9y3Kx48kj4q9I+rL
ulkNWEDyqvhM8kwKhV+B/iTPilnGl55WFFXiWZJ3xSX2Kvvn6rbhFpKHxWrW
a13V5jqcTvKyuKTEe/21vHzkkjwtHjFtnr5JuxYzSN4W06Z9MboyhP9H0n3H
1fj+cRxXWqiQjIiMRKnsEuoqIoSUZMtIRGaEhFSUkAZNUioamtrrrb0p7b13
nc4okvW7f9/rzx5yOufc9/25r/uP6/mCPd2PiyPK+36VeefjMN2vi3GuydkI
yRIo0v28MJEX39Fbkox/1/7b7wv3sQWrO9wLUUn3AyO+om1R7XbgA90vDHn1
lMRZwoA13U+MWY8TlP+qfYEe3W+MG+K5RdlBuVhC9yNj8+HQw8Y/s/CD7lfG
j74RySsSRSim+5mR261wmJOfibd0vzO+Ty69INyWDwu6Hxojkl9320SnYDvd
Lw3O8j0eXiWZmEf3U0OqKNp/rXAF2HS/NYqSNKc/ly5HNt2PjVdiY0Ov7L/C
g+7XxlGFZeob+r/gAt3PjQTex19KvHxo0P3emP34QNG8jSWYQfeDw+rRWff3
1mXopvvFYSp2zcPf6QtS6H5ylGZW+Ek1ZuM53W8OlXTRn1VVWThN96OjYEBA
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
BRLbNiSGbWqHF+25oL7uvNO77R3QoL0XaEf+22Vd2oZe2oOBxoBuxo0y5n5G
ezHgGf6OvEzasIH2ZNC19e6KIcUuNNPeDA4kl1WE2HfCkfZoMCLbF+YT0omV
tFeDs4EuxgcftaOK9mygPPv0Re25LXhAezewfaTvVxvQiaW0h4MZ7wLYjspt
+Ep7OThqsaZt2t923KQ9Hdy6FGEkeqwL0rS3A7afxNgKoS7k0h4P1NJevj+t
3Q5z2uuBur7ZqqKL7ZhFez6YdtjMQz2yE2m09wO/R8I1z1q6cIb2gGBLUkSk
NZjrn/aC8HDdwuadJ9vxifaE8KQyQ/Y3c7yO0d4QrO/2DihN7cJE2iOC4VFv
KYGb7fhIe0VQ4du43ORKF/bTnhHwfTaOM+ffuOp/vSN0pvdv/5jTgUDaQ0Lg
Nf3n5361YhftJWGWbWVFQUM7eLSnhLXLBxLqP3fBh/aWcOjIw6bJo53Qoj0m
HJXJWlW7ph39tNeEw+VFYdoynXClPSf0Who57dvUho209wT93FjJ+mvdaKM9
KAzpt9sNpnXAifaiUPxPVnbpk06spj0pyFrsNlgY2I1a2ptC4BqlxXVWHXhI
e1Q4p35ESlyzHctprwqtjWmB2953oZz2rBB6dbODwPVu3Ka9K+Ss2RqRPLMD
MrSHBbnPs696re1AAe1l4c/wkde76rtwhfa0kHDwJzvqcSfm0N4W8j5N/ptX
3QnQHhfYZZp1u0Y6cJ72uhATUKhy2rUTU2nPC6dkcp6LZHUinva+oKNooUIu
dMKY9sBwOz77iFFwB4RoLwwLxyxsXQV7EEV7YpgceXybmlU7jGhvDI4XpBTF
tbrwu+e/HhlyD5n4DEt34z3tlWGvpLD4U7t27KY9M2y876GwUqoD383/650h
7zL/7KbTPXhNe2jYNG/KLPM/HdhKe2lwn1ajuOxgG4ZoTw3yXn+KpKQ64U57
a6ic4Hw1vbgT6rTHhv0rbwkKGnSig/ba8GpNv+AAc708pz03yC8LLN9V3om1
tPcGo2Tp3c0S7ainPTio2VyPvBnTATvai0Ovw8zMLub7U6A9OUg2dagGhHWh
kvbmsO/jbO6bo+2woj062FuwY1xMurCI9uqg4zRfYmigDUW0Z4eWhItn/7+P
5xrt3UF4r8ImWZUuzKU9PNgHRi36fL4TmbSXh68PFm0oUO3GBdrTQ36oaM9u
w3ZMp709SE+brHoxoQtJtMcHbT9loasKPThFe31Yc+tuf3NWD0Rozw8rUk6I
XPvZjRja+0P3o4eKtWKdOER7gJiwQ3SZ2bYe/PP8rxeIrnMHg8c7OhBCe4Lo
+zJw++mGXujR3iBY6fbi57Q6MCb9X48QK20yzNPX9+At7RXipNTqXd/qOrGd
9gwR7z/D85ZrO4Zp7xDGMfPnV4z0wIP2EJFSkVbiaNcFQnuJ4BgfWiGY1I1u
2lNESvLY6ffC3XhBe4uwi38pXtfaAxXaY8SjBlOdPRq9aKK9RmjXG0/IFerA
Y9pzxBvjbV5uzLxSor1HTBARFk0K7UI17UHC6d3D/QPbe3CP9iLBPmxd18Bc
j0toTxJn3rDa5Kf0opT2JnF9Eon+IdSNG7RHCRFxa3OfHz2YT3uVAHkrVq/c
hRzas4Sve2uI5IMOXKK9S4SoGy+6f7MTkrSHifH33mflP3QhhfYyMWe54UW+
pF6Y0J4morTK9eZc6cRk2tvEjD7ZKcpqPYijPU68Ptm/coiZV0dprxNZDY7h
21f3gI/2PKE8uN+jj/n+wmnvEwOvEnOCazqgT3ugcK7iXoNON36V/NcLxZIN
Ug8VmXkXQHuiWHdpfrNwfC920N4oWjbWRzd6d4Kj/1+PFP7b0uV33eqEF+2V
IthmmahweQe20J4plBe5yVeZ9qCX9k5RYHYiZ6pJL9xoDxWGHOWpz6J7sYH2
UrF5q6lA+/cetNCeKkxvcLOXe3bDkfZW8f3p+nfjXl1YSXus+K2w23UgpAu1
tNcK1fuNC0XWdOIB7bliofceZ6XJXZCjvVdM+7py/IBqH77SHiy+iYkjnPn+
LWkvFp9nmj+uq2fmM+3JYkrb5Kj1E3qRR3uzSJj6iaV4ohNXaI8WvpKLNm+Z
0YdZtFeLBbUXl4ow31867dlCTagu0aOsB6a0d4vGsD02uwq6IEZ7uNj7d1kx
z78bCbSXixsZ8YH7JXtxnPZ0cU4sdUrKxm4I0N4uYl96pwZ+6UME7fHi8J+N
1f6+XTCkvV7M7Lz141xiH/5Y/9fzRec7jbHYjZ0Ior1frM9tP/u1tRN7aA8Y
c+4lHf3xtgcjtBeMM+uFa8bieuBLe8KoG/rYf6ywE9q0N4y1gXlKky/3YYD2
iLE42LHuzO5evKS9YlSPqvl9+tKFTbRnjIpjX6eXhvShnfaOsePSba6/Rjee
0h4ytge2hB9/3IU1tJeMlQ9Sy2sX9aOB9pTxcjg6QNqqG7a0t4x9gkOpm2r7
sJz2mFH/b46279U+fKO9ZvheOFBychtzv6U9Z5yMsB+xHuzCYtp7xpxls7aV
y/ahkPagsdhd/He7cg+u0140zKxDVPef6IEU7Uljq41U0bI9XQDtTSMq7oia
p1I/zGiPGsMfjj9e3tWHqbRXjaW8UaWHF/qQTHvW+B0wHmgd1QNj2rvGGvsH
OqOBPRCiPWx4PKkWNuV2IZr2spE3eFC8SacHRrSnjcIvXY+bFPsxgfa2cUL5
0tJR9z68pz1uBCq+FuUY92Mf7XWjjm/5Vo5JH77H/NfzRvddo/23FvXiDe19
Q33R6Nbvxj3YTnvgGDm1K+LJ9V4M0V44dJe5LRDY2AdP2hOHYGRxUdJ4N9Rp
bxx9pyNYaba96KQ9cujoGh4Rn96D57RXDv2SmGPrd3ZjHe2Zg2/y4RUdk5j5
THvn+NhCeJ7d3bCnPXR8ujJj4pr5vVhBe+mQWZprM72Rud/SnjrKIt1b7c53
4S7trSMgeYLYqg/dkKU9dmy/pjx27kcfimmvHQqij/fGB/XjBu2544fCuZkW
i/owj/beEclfqtsc1Y8s2oPHv9M3nFJe9+Ei7cWjVjYz53hAPyRoTx6tdRaK
5/x6kEp786g0tTb1yOxGDu3RI2qmPtE17cV02quH2+NnAdP7+mBCe/YITzY4
Ne95L2Jo7x7njFkp4lXM9ZxyZcGGg4Cn//nZT1b2wCB9zequdcDiBZv1Zqv3
I+jz6FY3CWCa6tNJF5MGwM1OMiLsDNwXnT2+d/sASP5ds8HSDLxvcJN8vbIf
bkUa1t7hGcx5Pu3+hDsDaCnle7H9SQb6NpoeeGowgDXlOQE80wwsnS62/uiD
PjyodIjz187AccPe8PSUAZTW7MrfszgDxSkNSywrerCwQax+/F86Ytao+An1
deNSc9ngh6Z06PwNlH/I3O8/t7n/M0xNxwTjuCT7rm6IdRlJ8Huno/eSYeiS
6YM42iu1NMqS+ffxTXb3PjLzaqBR9ZhhOnznT+r8rdaPX6y3uyatSYdNf03K
reI+7OGePp4wNR3OLqFfbV364Tu69OqZoTTIbhi3VevuB2us13ZacRpmWFrM
jfbpxabf4a/SQ9JQmJ0ycC++B47/LodceJyGjT2Ob+oGmfnBvyZ1tkka+GTq
OxZN7oW80GhpjlYaWkwrJnoz95u7k5Jar8mk4fv+koYzmsw8EL3LW/AnFf1T
lufIM/Ns1jQNoZL6VDz8qFu1zoi53mfwSd1JSkXj1GaLnSGDSJiVs0LOIxXS
49IBG24OYtJcB40Ki1TMlV0rvYQ7AKP5u/Rt9FORcO7sN3+BHoQuFDNRWpmK
4ruhoizm/PuxpMyyXjQVTTdkv0xV6Yf2MvcnDv0pMJra/nlSdDc8FYxerytI
wXH/x+/9vfrRqSQV1RacAruBz30auT1QXd2Y6WyXgvrB9ZktCYOwX/e2ctOp
FHx1vrP0VkI/vqme7unVSMEH+4trrG/2QXbT0vFX0ilwNlT+cma0H9c1ekW3
jiej9v0cm5v+/cjVCpdh1yTju/56GQv5HuY5+vKaN/HJSI90PaeXOAjjHau3
7XJPhviVC0vQ2o9Y3ZGDP64m4+/3iX0mGgOYoJd4IWhvMqY3OL3NExuAgYHV
PX3FZKh/8vQjKr3wP6Du8ndSMmbluWTJ2feBe2hCYHhPEo6wdh35sn4Amsey
4w/lJmH/3xzvrfn9eG78uEAwMAlBS+Jnd0zvR+vpnQ2xNkn4/PKmZppmP5RM
RVnGJ5LAUn39t0SsDzZmXyeIbU5CptWluYstevDF3G1GilQSdqtb3/k9dxDz
rh6QO/cjEX+sThe9Zd7/ZYs5apJVieA/fvm5GLN+S7Vs0M2MTcStL917LWcN
QdzK78Rll0ToyU5bvNueOZ/vnbo273IifGeGXN7l249IG1n7At1E7FglkUOO
9OGXXY/HTflEzJXKVgy1GMROh7DQxcKJeKsqnV/B6cVrp0tpXzsToNZ8T329
ygD6nq/6ap2VgHsOW3wu7hzAZldem7x/Aqz33twwdcUgnrxMGKm+l4BTIg6T
j6X0oMbzjrD90QS0v30U0pUwBHnfzXNXqyUgNEZocv2mXtzy+6fYPCsB9Rdm
TA1V70VhQBZ5OhIP3xPTO+YuH8Ts4EcGG77F423CEsH0xf0wCdlxtisqHrMD
qi1G2waRGD7lttvzeDxrt9Sxku+FYNQXJ3IxHre+7xd5dmcQB2Nd3wzuiEca
n9evDO8+BMcbRnvLxaN0TdDffUt68SNpdvZ2gXioT4iYjew+bEurr+K1xSHU
89Bl9tZeuONNrz/ioOg32+bOukF0Z538tedNHC6vjHeK3NGHtXlLxH9ZxSHo
VnSLj+IgHhd2Lww5FAf1S0b2rsl9qCgJXXtAJQ4q5sKztwkMYlGZ+XZ+yTjY
GP09WbV2EBYVKw9HcT6BPzm4Y/LzAWRWcy8e+/oJjjFD3060DGFGffz9SRGf
ENIifdLAcwCnmm67Jjh9wpO3c1t3a/UirnVT0Jnzn/D+UWBlkkQf+Dr/Jkzb
/gmuyTp/z5qxoNeTWZi+5BNmG5xz+13Th4B++8YLfJ8gNdCnMM94CMNDOsOz
W2Jxm5XyXbRlAFqcyfy5abFYf+uaccuWIbwYKZW87hOLIIXKj4l6/Wj84bJM
5nYsmicnZ2mbDmHlr/0bSw7EQtxIa/d9rwFY/521587aWJyMLLqV0j+Ir3z1
xnLTY3Hn4jMjo3e9mC/45noFKwbXbcJOvecO4YrIyUc2JTFY4rVlg41cP9Kn
LPFSCovBlYC39+ziWZg8tTus3iEGsompnTVpLByXCE13OBsDvlcWbXzqgwib
aV62bmsMxHyWamTUsvBnzsqOtoUxaPUI5yWfHcIuae6o899oOKd8XFWwfhBe
MvEimxujoZvhdvQdM58GFt+e15ccDcfsnd4lzPzfILdJ2cMzGgX63u9rZvbj
qfxfza03o7Hixv6StX8GUauYuZ9tEI1mEYvWvn9DkFtlb/pmVTSGI4cu6MQM
4PZanTu7xKPRZaH0ZKB7AE8vSc4ZronCrOA9fabRg1h9w0d9p3sUtkxSMc/N
Y6HEauGZwL1REDRtC8zYNYRrD987/pkUhUk/spSrLPoh6qgYeTA3EqIJ5aYN
rD58cI6tiLGJxJ65z43Gy4ew+9WGn1M2R8IqY4qcfXg/enwzFpj+iMCG+bkd
motZePZOW/tzbATWSAYszPjej2WhRWZzL0cgK3u17dRXLGRF7XtxQz4C6yt1
jqUw9+fzCdVxXzo/wtNqqtbZ3n5MTD9Wv9z/I7zZH7ZfJiyEZLf/sz36EU7B
k9etVhvG1qLzS5tmfcSbKvfpe46z0FvG2qX6LRzSD3hF+j9ZsKu5cdX1eTiS
uKzsw2uHsaB5/NXAjnA8SHzj7pw5hOxOm9RtAuE4u9Ux/lV5H04MCLW9RRhU
LzgJH9IahgD3mdC4VRjS9q3r61cdxtsxCUVDlTDsVjYMdZMdhto/L/1ITiha
JPzmCjHXe4ugzC2RiFCYHW6JOcu8HyvR4Nenz4ei/UJNt/n6fsjMWJGVtiQU
corr5xx9MIwUqZieWS0hOP9aoNltQj8OLFQVu+YTAnnV84dnvR7EuFz6muID
IegoCNC992sIr5S2Hlo6PQR+m/LFW1cMY9O6wnsPSj5g1ltHsjJjCFUb9QLr
HD4g8kRtZqruAO5qVRWs3foBb08/8zqaP4RZO46ynv99jxX2U+5PXTKEmL1t
M3qT32Oq6xwPbfNhGB04p7bl5nsU9/UUXRVgg3N06MTrVe8xf+2fmmjm83qc
trD/PhCM+QoHbVRyWFht9jN034dgVLqf/1ctPICSKw++hp0Oxop81QjjWWxc
sxQcFVgQDJH+LSMCZwcgeu/pXOO6ICTo7Ya5OQsxdtM1k18G4YUC5wNrdz92
O3menbEvCHp5B77ZMfOK4zL/6aUpQehLWctTcx3GM8/A6Py8QOzWDCgon8DC
Mj/56kW2gRBcee5bd8kwSoOift1VD4Qz/7rzb/7041z4+kXVY+9wRaZE8y4G
IRabun1V3DuIj6d0/zEfQEiSlrnTlXcYu3b45Xbm+t2KfNdOhXeonzj+c4jF
nE+5exI1ugOwV6N7/TcP5nwqqWj0CgiAtsic99JLh7C84jA/71gAdm81fODw
ZwDZdS3L9swJQJrx9J0uAcM40Xp2z4cKf8S4LTi1jJmfE3sGrvO98MdhsS/3
p2qx4Td0zevoLn9smi053Y45XtojP9LjBf1xQ9T764Y5bKSP/sqTsX2LGyeC
g63ahiAyUUSicswP77zFShok2NCYJnnc8YofJij2/SvZP4gb8xeGbO5+g7xD
jgvnrBlGhoIij33sDWz/XD15/vcARlQ3aARXvMatczJfwk8OgWzTfnJ412s8
+lglfMJrGDcN9lWKZfpiwh3JKJbgEMKNj8lkqfrCqnZ/+q0jLIyan79gGemD
l9Fxp1f87McKqxvxCkt90PL06XvlhgFYOthMaPH1RlK5UbhU7gA+vnym6y7h
jUnf9r3bpDqI7wFeHjpPvFCh7X5XZRMLilFBbb/+eSKkMPlm8c5hnE6LVoy2
9ET64gg1ga+DiChMu2Uy5IH4qCOTHQVY6KguyJpj4oHm67YlY7+Y9UxnpVhp
/StYrIl9+bFqGGc4rYce6r/CznmVXdH6bPj8HQxcX/AS7cu9Tx2eMoTOKT9Z
fRovYbjg2KxhlSFm3SG40S/eHSfWKq2/+YyNs3LTHxkoumOi98ODs4+z4bt2
fplQoBsE7gzJ7V0zhC5N+XmpUm4ImGg249gtZn20d73pFRdXLJ+2P3mxCxv6
R7Vilgi7wim16aJCAQuvz+/5XXPPBTXyNYZBRiwEDsQ6z+l7gZaLcX/9tg1C
TahY9mG1M15KZvaqpLMQtLAjpS/7Od5e/X5ssdsApm36tc8g5hkkAu74NH9k
I/jAjJ4Uv6f4d+5HRM65AUy/uuLekmdOmHU2zObjKjY+OG2d8ezOE1S92dC3
/vQgJIKPho6YOuLmETMv4yI27sOCHDd0wOpbJ/skVAaZ+/vTqlytx1iquWeu
2mYWHowEXlRe+Qh6Wcq2r43YkJyaxucpbY/vbz7e3NXEgo18pee/SXaIc0qQ
X3ODhZnag0rnfzxEz7rrC4Kl2Hh4QiCnrNMGS8ceOri6DKGOsyHuetADSExa
q75uCxsCy8xatz64h2C1d4du3h9E41Fv0ZlH7sLbc5aRw+phCLsWbuhexzzw
yUoEyTHr5+bcnyaJU2/BO2dMhPWbjfhxeVfH/htg3Svmv9s8gNaVR9IP517H
Wgef16/cmfWYiVOfgv9V7JbTfytdz0LO2psrxkbNYd9Q++HXoyFYvKmy8wk/
D4Xqep/YlkEUCqs0bj5lAvUq1dOar9m4dc1jXcusk0i4WHjYsnkIuglDUhO9
D6I5Yb9nM7O+Ys08/uqFyF70sny01F+xoXcnfWh1hhoWhfp4DDWxMfH8fT9L
+UXE4XNO7FmzYWznzd9eabGNyIkJji/wY36W23s9eO9+Moc9dcLSnkH0GTzP
PNlxlExcECqkwaxnbmmYiohvPk0m+6azdedwUFgpGH3xsSnZ6eb2fkIKG3Mv
Bh8sLLtA5FZF3azTZsGcb9s/uXlXSJH8bS1bZr616F7fnxV7jbwTkNTP4BvG
yVlblnFqLEjA46cb1kly8KRt+i+ZPzfJxmzzU309bMR+bPuyd/FtUr/g8bsE
w0HU34p5d0/HisR/sjwstJ/5PFsfWn40tya1PQcUbTgs2Ivp72pwvU+QGfFN
8v4wDppPm/roqA3JW2nHTW1gY0B/7Lb05YfkcXrOQwSy8UC1tf2TjS05Ft15
68MqFj5LF+zWdbcj789Z1bpuZ8OQPzqhPdie3J6UaTN0eRh9PZ4LrZIeEekN
Fc8rbrBxr/SB0/Tix0Rmp3HbhUoWJD6dGwlpciBCC44eq9vDgYGX3glNtiMx
aTus95afg557qgU1/E4kR3b1qvS0Qdw9I7PmysynJMHtTXNK9SCm7hR+LbT8
GRl+uKRxrjIbQcrDgn4bn5OCqYZDrXuZ+TCj5sr6Pc5konOEi141G3d+ZtSV
GL8g6622FJ/lsuFwpWLRGjUXovW3frmcJwv6p/Or72W5kHOtV4KcjDmYdyD1
aaGuK5l+LEMkhs1Gqk6U5swqVyKQ83ji2BQ2Hm0MHD15wo0MfdqZUFXMxj4l
z7CPPW5koUbu/sEwFuYufGo8dtWddPGe7L+YyrwfiQeS2uPuRMDygqtQwRDs
BS0KX9i9JFnL/5k+mMWsr8dM7zeIviI+69av6rHiMOvqI2uXebwiliueusle
ZKOzaW/vdRkPwicWpjz7GQeRZVveZIR4EI+rkSV8vizszVYxmLzGk/S67rPQ
GGZjToKCsFGqJ5l/ZHea7Qk22kMWpAVoe5HbDctmaruyEOErcW2o1ItgZNU6
YWZe7XEWklM76E32fxB7fNJ3GLMfjtfbt3qTN6vZBtLM+dtmwXpRZuZDNM90
WEwcZeOjabu2NM+HiEbePHXoPBuWh6t/nrP2Jd6LbO0mjbExa3dR5CfB1+S3
ydtlHX5DaNXIOPPP+TWx8zFYJJc1hLDVsXN057whR7YNam16x8FN2felHgFv
yOwZtQsXvmGDzPaxbVfwIwaX9junfGWjZZKzqnKcH/lcu/OJXAQHob8fDt5R
f0sq3vfLVqoM48bwzYDcvLdkW8ejByd2cSDDWRcustyfeCf9XBt+kA37/shH
keb+5InK621PUoZR2bH8pGGMPzHc6Fs2i3k9taZ3G8dH/cnMvAVZnkPM/bxa
eqb/xgBiu960Y6LiMCaWeQxvexBABMqkj9Z3cWBWOK1oIDuA1I5vkZv1ioPk
LKcgV5F3RLG88ajEYWZ9mibwQHXPOzLLUSQwLIkDu/j7h5tc35GKG9UvYs9w
0Bs5ttau+h2ZOSJSY9Y1hD0h18Xl5wWSFy0Rsleus/AmYLD3i3EgKWubn77K
ngV+X9PsG0GBZNxz/jXOaQ7OvWx9M7cvkPRMvnWDk8BC6fMjtz8rBZGhh6XN
VmlszHeoNDC9HkQmbT6zX/0lG7Y2e5VEE4PIy1gvUY2lLHTfKRCO/RVE5sg8
4Ys8Ngxdiy3tBzWDyX03uU5dFxaizdPS/tgHE70mr40S6Rzwmap4BhYGk3gd
fnsxTQ5MjaOv7RR/T9T901/eqeGg+JDC7mGD9yROcL24rwAXqwyC5F55vif5
K/jtNohz8Ep3Ad+mxvdkS23kpibm+uvS9mpoXfiBSHI7F3SFc7BLQyLh8dkP
5ODWq7dfW7MQpfrMRTHsA/Fe874pn/l+JVcLXfzG+kCqa6WFjJh5aaVgs+32
2hCi+uRNTlIHG0VLxmUW3A4h4n8T3S6/5mDl/Bvj2WkhZPPaoJMizPnwchar
0owvlEi8D3cK3szBz6nno6ZuDyWzv5fs2cysD09Man8S7xRKbk8JK0yaOoxI
/mMmR7+GElV+542Fe9iY8btKg08yjCRPYhWIurNxe1RP6sOhMHJnLMhRfRob
zaxC3u43YeTkos8hxTZsbO3d+oXbFkZid11/YBzHgntbeoiXXDjZUPKsjRU3
jLF6VTuNi+HkZuATQRPjYRyvjDneGRVO9lZK/HmWwUFW6YoNTiPhJA/mVbLy
HEjkB0usUvtI3v+tjdnBrN9vfZYZqrr3kWS3bVqlMpWNxmTv/LtZH8m4+omh
HEUOtD7NeLdIOIJcvjsqn93GwYePz63zdSNIwbBn9AUNDn4ECx+85BJBdHb0
L2Izr3/s7cPVM6oiyIH2B/LaFsPI9Po1JVkqkshkhG33zWVBzu1m94kTkeTK
sPH00xIcPH06/FkgMJIcdZsm8W0WBw32Zr5hPZFE94f3cwOrYWje77i5TzGK
ZJnHhWkrcRF86/i+71ejiNmVVNXunVxMuVaj8Do+itx6K7BqcjMbVy/oC24Z
jyL3ffVzx5j7SWtM17CFTDRRfCxrvshpGG6Ri5vytKLJkeeuhjs+c7At3LhI
yiSa1G0NO2hpxsbYh9eJ5o+jScy0La9sH3MRFsQ8nIREE+sRn+H/v1+DgFlu
EsXRJHHdWa9HTmwI+u1/cHaIeb271cKxIlwk+riYJ02NIb/uChb8YNbrFzxL
D09ZE0PmRc5wkkzlQPrlZJ0ThjFkzsetsfpzOchx0VkXYxlDZncIOnOUmePx
3H6RgHcMydxp8qT+AxsKTpniB1NjyPRmcb3pzPqz8fHfX6FNMeTOXQlJK2a9
YW+3qe/3vxjC+nDbN30qF6o2t6v1FseSt2JiMW+Y+3mfdXz2O+1Y4rXUZTBV
mYPXd7jRo6ax5KqL1vmts7jYa7nSb8eTWHKOm6qXfGUY36+bP/UNjyXfv09b
fGAFG6FXQm+zSmNJf7GxzhFZ5viad5/VYseSDyJ/AuN+D0PcbMn+lxKfyGmj
2FqZ72xknj2p2bPuExG5ouEbpcTMt9NvlDYe/ET+yTp9GU8fxjzj+rnP7zC/
ryUi0ODBwZejs0VafT+RCW/G1Cydh2FzyHB0TcYnsuu7YelYPRtrD7i2P2r9
RN5O0vz1iVnvNOh/+VrLH0e+NK58beXDhfPeKekrlsYRu8Qjq6vH2dDU3RF2
XyeOeHR8HYt24oKn88iz3CyO/NFpn3fAexjB2ln2ss/iyEu+O6t12znYo/Xv
2q3IOKIRWtKaJ8zBBI3NxkVlcSTVzmdwfx8Xnzbe2T2fF0f27fPqWniZmVeq
CWpXZ8aTgpr7zvuY7198HU8uWzWeZN5OvixjzsbnVaskZx2JJ2rDqbs5RVxY
KF3iM7OOJyGW2YpGBVwsVQhjpfrFk106n6JE7NmoletpEM+MJ5sCa0bcmPPN
Zols4amOeOKsWizgM8DBmoWnEuIEE8jCddLHFH2ZeSftFyi8PIH4xs9KkjjN
hZdUg8uRXQlkswvrzCnm33fNmnM/wjyBhC/e8PsYc/y4EgcuTniRQFSP/zi1
8xzzvDDV7dD+mARSbtcxR/8zGwdFv257X5FAIob1o4qSOZg8SXTtz9EEcnnw
fleHERdpgjsX7p6TSEK6pribM9eHCf9jsbcbE0lplEJhUhIbs/9ljXOOJZLi
+ki9DSlcFP3616P9IJEstFN0UGOeF6zHNld5BiSSY719/XEGzDwdvZPVn51I
Tkz7+9FvJxs1nIQo9e5EUtl/65/7BGY9yuK9dhFJIpn/Cq5+V2Fj88Aqpw6F
JPKo3EE2m/l8rJ5Lt1T2JJF/TdfOvGWOT0BnmMmTK0lk64OHM/GFjZ1tPfqN
rknkYWe+k1UEG7+bZMnKuCRyN/Ok/nEpZr1Tf0rRtjqJ6O8cu2e2kodTNX5S
VWNJpMqn2WPDVjYmVTYILZ+XTCbkCut6bmPWa2VzRqzUk8nG/nfmasz8u1x6
oK3UOJlc7ljrHPqIg4VFbl8W2iYTRefpumEFHFTkfU21CEom1t/zqvSY8+Fu
tmhoXl4yeeK9qTRpEhfKn3d6SPUlkwNTtrkpMa/XmvbYznxKCmnMSVHaEcOB
e3L2VSilkNWrph6ZdI+NbQkTTkjsSyEXV33IvN7IwVCsuu7Z68zPChtvXz7I
g3+U1YaklymkxaAxIYhZPxl8TFw6JTGF2G3raem05EAwdETiRF0KaV+k2dTf
x0Zi8OoJMb9SyPMU+TsWHRycfHd5aOKCVMJ1mvbqOrMekHgbXm+kmUqy3S5n
Tj3JRa5vb37o6VRivSfwSKkr8zzktTT+t30qOZrj/+wes55UeHX6nd4H5v9f
P6M5yYSDb65vX7wrTCU5iTlJhPm89s6N1qMDqWTeWdm/507zoPpU6sIO8TSi
JttmFuPGzCcHo4O+q9LI4YXFMXtrmflk767NMkgjZfIn5H4Lc6H9sGy11s00
0iPrsjtBiYcf98RkXnqmkej5HlqezPkbarVLtCc5jbyvnP86ahMzn245/FRr
TCNCcxasC2bmocCNnO5nf9PI8o3rjpzZwEHCVb7KloXpZDpX31rClAuzSxqZ
a7amk01xDqJ2zPkz78LdyEdn08meCkuFBW+Z+WSa5FvrkE4au29KO/NzYXlm
1HFFWDrx//rDvVuaA/mTayzvl6QTc0sDPh1BLhqOXTlTzkonwTK2kmdWcuB8
+OM+2ekZpOjQSNOtWC40jfrUb63NIGFxGzcbNnPRayC3ouhABjnXrh3vIcOF
r96ZOfNvZxBNhR/aJ35zsWe3v+BVnwxitnaH3xNjHibsbOJmpWWQpgk+Wgod
zHzaNrd1ZksGMbgqYTX+g4ujWw6WnucDKdoZuGNWHBti5GVK6hIQIeFXc0rM
efi8qfyD+HaQ90Y10g99Obi+QfzVqfMgVwefRd+R52Hpel3bOCeQ528MlNcz
z0+lqx2vCEeA8Bnn8leLcPBAOffYka8gb63uhvd1srFmBf8uZtlLpPJs61Ta
mXnj/nbehMmfianun80V0RzsltBwk5/3mYQ/e538M5MLf5dGkf2Kn8mwTM4f
lZc8/BS/+8Ba/TOpqBLQNGHu3wbPpb4H7/1MorkZcWMpPIRPSTL/avyZ8Dcs
zH+nxcW/J0YdY1c/k0et85Y7fuDisMjo4cW2n4m6dXtp1XMOYh+7l+m6fyZV
HlP2p+cy6wPBNTo3gz6T5hzHsCkJHJy1K0v3i/9MrMcczQ4y11My35V1BXmf
ydip7u4SGeb8txEL59R8Jo1/hsSmJHNx8W/4onl9n8mNJMkyS2cecqx3eWmP
fyZzBXeY+5nxsOBXr/jlKZmkXX/3wrgZPFy/4/DIUzqTpCov/+3CrE+Kfyz9
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
us0jCpMfXzp4YV0tBI8dspXt5mJDS6nCHJNa2BLlnGF/gItCcvJN8Za1UGfG
H48k+1nleCJ63c5aWBPzu3tNKYUHYj7blDnWwu9bi7+tv8LF642i4gcP1cKp
s2PZ2V+4mCGz9yd1oha0ogzO9zpSyHB4FRR2thaUXF95VItQOPs+bbTkUi2M
pMuuO7ebwvV1W/iZ12pBf59I7001Cg/Nv59hebsWLgf+G07P5GKkHdur/X4t
dKV5rnqpxsWcKF1N72e1UOi8d77ZTR72Vl1hz3xVCw8md/6JmeDhPKmauMfv
a+F93Ul24REuGtsq71+dXQtRTcuYc30p9Ig4LfMzrxaUhSdXzrKmMKb8W7Vj
cS34+y5qzdxH4c/Zkrf/VteCcO7qCjXitwe3O1tebamF8x+OTbh4cFE+/K3w
QlYtHHnn+6pDkYuWJRP45nctDFh7nJ2nS+E5MauLprxamHny0i3eeQpfWD5e
2zBRC3ePg7kz6Y/S0P6hEzPqYM17qWTDdApHCw3eTJtTB/tqRpzHCK8tm3nz
6D2ZOiiuSji27QkPd25pUtFcUgdhRsfvC60h/vGaekeueh3smatu6feUi6/z
z8fara4DX8sNmlMnKawXKtzVs74Ofi1fGtt3iIeCmxZIXTKtAxNn9+sRLjzU
Dj5SKrWtDgSFg93zLCncl5d5/aVdHUTOKmU+FaXx2jThTYb76+Duo2cJ0UE8
TAe7yYrDdRAyoh7gjDzsuPwi+7BnHQglVtpZR/FQPHfo7KhPHRh07cxb58zD
dRPGq25frgN5lsnkOxK/g0aR/crX60D4tFugoiKFERc7XmZF1MGOWIvIDxQP
v3zWOrj9YR2IirV9ERAi/DF6SaEzrg7uKK/fX15L4dz1ZY0+r+vgY3vuJadw
LoKvfLRYeh2kmUHTRACFJ7JO2Dz7XAdnL8YsN37Aw4fUZzHdH3XwvNZP8+wf
Hhboif0sKiHrV8qGzR7h4d+ze4MO1NbBBXWdoxufc1Eu85XRcGsd9B7ZZ82W
IvwyQtMh7DrQ41cLxL/n4lkd8wy5gTow8iqerHIgPHP6vtd7isRvvFzNi/BD
yXu2htlUHZTsaVy7K45C/l9ddtPMeqiR29TaOo+LqtpX47wk6+H2BoPW3s8U
7vCq2Se0sB6SxktGKOIPLr9RlnmoVA/mm58EeQQQ//z7dPUKzXrY8y872mIj
hbXL827l6dTDmXi1Dd8LKBQ4IWnpYFgPL6SK97QL8lAr2Vm4fxNZr9QpwZb0
l2PvWwzYXg/73rcvqW3j4VX1yQvzd9WDrhA+cLDmYpq71drXB+rhPF9gUOME
he0vHw9tcCPXTV+kBM25KMbpT632qofwGp2L1sY81F1qeNT9fD1orjDP/3eC
i66Hb6qMB9RDsupHTcsNFN6Kb2qPDK2Hj6kyajaPKfzMVI9deqceGn0Wu72d
oLBbyXfX55h6aChOb097wkUp10JJmxf1UP77hY/HCwo3xC0o7Uquh8lVup2n
Q7h4vOPIdd+MerDd9WRu50EKHyz+YDr7az0Y7G7Mpvfy8McB4cnn+fWQP/DU
7Goy8VuP7bLXltXDwfzrdl8juLio9cXZkrp6KJQ1Wvc1iYfmcsPaLu31YC2x
bd1dwuPejib9XE49BKvo1e4k+4mLiXx54289sAZQ/tMiHhY3drgu5teDkzBj
myqPi7SMtkLGtAaQuPBl0/KlNKrsvtxoLtoAGdJhq2470Gh7v+xuq1QDeB5a
aMi9y0P/Onmb04sawEe/wMDahYsv53uIzVBpgHF2Y9djooc1dl8KYpc3wJaL
bQmuChROuysWpK3bAC6T315mXObiiuq9RvlGDQCuJ59NZlK4V+o1vcesASK9
X/2ssSF+y5af/seqAYq3PzgwDBS+jzD3CnZogJv65mpvinnYWn5fQ8a5AQYz
99wLvU6hqASHleLeANOHpm6O7qZxjZVenPGpBpgx+mHXqTIeuoRf3Vfn2wBj
D3rHrkxwMbykZsHxoAb4V38tUUaXh9liKtWTNxrgq06hZMFFHnIsz9y6G9UA
M8s6RqpIfiRv5FmoP2oArtaiuJIzXDQqkhTOiW+A06uOn/7jRuOxmS64I7UB
PlxPsKgg/H9vy7sLnMwGkJw8+Lf1GoXfr03qXcxpAJE52mu3J1H4O99qaM7P
Blim/FDhqj2FC4WfpCaUN4Bfg3DwJVJPZpt+u69vaAChxbUZRe5cPBNsqFLe
0QB95bKtHyMofJZ3s/1gD3n/l5FrhRfQ+Gtacww92ABJ+kWJO5q5yAONXeGj
DeAeG8bUIDysHOArqSTYCLnXDfniTAptcgtLPog1giBDNGJuKeGhiQXXt85r
hI5rC+Ise7iYaORm2iHXCPuCTjw2G6aw+uKHCW/VRvBLWvHkIPHjU5+Fs0VW
NsI3R88ZeidpXD5md/aJXiN8iADuBzJf9qyP19bZ2AjHVpSYCjznYbDvcN/P
LY1gla+SfMSUwrdZJi/32TTC7yWxncL7eNhCRboO7m6Ehz9+zeURPyayliF/
zaUR/gx5223I4KGOj3bjwmON4Om+99TgJBedMi/ffXu6Efqnb/j0aICLYSNl
1psuNMKbIztffBXm4ScdBbHG4EZ4Hb7zO3+ch6zTHgUeYY2w1rdRyKyNixJp
XwIFohthh6/Sp933eWg4KGZ0/3EjSL31bXgkQeFRbUdaM7ERWmz+0OU+PIz2
ep2ObxqhO6akpKSdh3lv+J72Hxth07oghas7aOz/ba7Rm9sI91LN2IcJv8qs
eMC6VNgIK5dsk1tE8rX5BOfZ3MpGeFHqLBjfSuHpZL19SY2NYGntJRzLITzU
e3WBUWcjLBMWyh13obFQvbaqsrcRhqhD0pMcLnLdVW4dGW6E0O0T7ifTuKiU
dMZibKwRHEXvP1G6QKEVJ08oQqgJHrjXJomPcfHCUilUmdUEAh330qSvUJhw
2OXCp/lNcJVH/XujxsOq+Hd6VgpN0OoiJPBnCeEh5uRg59ImiF24bjAnh4ua
ytap57SawEtkgdK0ZTTudn3iLq7fBAev7JOLiOFhUNxv5ThogiPPPnz550bh
mw7Ddl2LJli4Uyh/A6mv5sVhMb9smyDD8nvkeAkXZzg12zvtbQLaOvDm+Wc0
rnqiITni2gRLWrKfOCUSv9XqW3L9eBPoeo/sqSXz6KZcUYi8dxPcWfm9LWM1
Dz86ypimXWyC43nO7Qev0dgV4zZhdrUJ3l6OjNf/yMXZTR8+NYc3QRXfYVXr
bAoNZKefPXmvCW7VpRp5idDottteW/hpExSLXTIoJfx3935838OXTSBkmyPm
VcXFb3XDiSvfNUHWGfY0/RIK++abun7PaoKmV6unqi1pXGB/R373tybw/ewv
4RdF46a7jIb+oiaguoO3Gi/k4alq7buBVU0QmLT6prMBjY+lAqylm5vg/bx2
2ePpPPxpWy6azGwCx1GpPlVJGkciFAo29jfBn/0v2VfqKVSs8AisGWmC/qwB
GwnyvtslvhoeHW+C0JoBK9EQCv2sxOlx4Wb4JmCefOYEjfHhjul3ZjfDipr8
qevAw4qS157LFjSD2v1Mg1pSz+Nio+pfFjeDhIL1FyMZCjW2WrBs1Jph4Gxd
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
hZ2Qx+/b6Ur8pYPrkHyyQid8dt+SI0V44fe0mAtcpU4IdF9o/uQfjUFxxo0b
l3XCjPWeOwPs+Chj3KN3Q7MTIn8qDvfokXx2RNyt0eqE9fLBDR2pFG4O0B9S
WNMJgkN/73SG/vf9o8P6qH4nWAddFNjtQOHJ3JDUdMNOQKetq6/85uEMJy2x
CegEu6zpOu6mFD6eqHM330yer85+WLOBRp0nlwruWHRCxd11x8tJ/n4ZLVVp
3d4JDmpliz9V8NCptTRw2Y5OiDEUGft+m0buxbPtp3Z1wrtR3WNlRhTelJM3
+rK3E66l+ZseQJLPLz9ipjuR/6+Ze9mQ+K0sxxO0zcFOOG/5vHEe6c/tY3N3
xbp1QqtgpwTDnsyHmM/prOOdoPCqoMQ/mY++6w9Kap/shPQBL4slQOGcJlEv
P+9OMP51br0M8cMJvmklP853wnWLy3e2vuWjgexeDQn/Tjj+3c1/nTUfK7Om
Xd8T2Al9NXd+PSf65777FevF1U5IcVxyNZf4rQnKxvRPaCcEC9yab7WBj1H3
6Wf6tzphy9kjhq/1+ai+9tlE0J1OcFIN+tZwkUKs27Kv9F4n/CrakZpxhsZd
PgOfFsR2Qld0GKP/I5k/8+8vcH3aCSKCu650CFEYmLnhbMqLTtDwmks4gkYZ
e3YV72UnVInuvHifx8M3I+HaximdsFa4l5lO+GXTXd1bN991wkNe+Mx1O2hs
1mntq80g9+8c8HpqxMeT1VcsFD91wracyjXXFvJx+pnlL499Jb+HqgzvIDzx
SKpGKPMbyedY+o+22WRep11wnczvBP0KY/caEz4W2Sqjxa9OuGpTlN02l8ID
g7/k75Z1QkbyChUpDQpHIk5faKvqBIs1p9oOkvzc1F7YqFbfCY6c7d8Wm9C4
pOKb3plmUh+tvv6hEXz86HX07tf2TtjnKZnOO8bHbRKSQzO6SDzW7WCe2MRH
5pss6x3dnaA6SjeAN42+Vs6pj/o7gbvgWFD/awol/swQ4/wl7//6ntkfMt/i
w9+6r+J2Quz1Y7/83tNosMKh4AK/E3KyTNZ8/k5jZcmEcsF4J7hXrzlqVs5D
txOJgXMEmLAk8s6AbiAfx8Ws2vdOZ8Jbe935q4k+3EnmGiaIMqHyrmOQUz6N
6lsfxwzMZkJ1WMEh+Vg+5vZuotfNZQK7fb7VoXc02t/ot7+ygAkjbwY2nd7D
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
xuEljXkrBL1HlLrBYPWedPvpNDqUvq7csIz8f+qjv98aGgdO7NAK1eyGfHqB
YxzhpSvio2HVWt0ws1XMo5r4LdmUuF75Nd3wJFQgUec3yedWC3N3/W44unRH
p/57Pm7u+5uQZtgN2zuOxPaN8rD1xgPBcegGr+e1JsGER05rgMuWzd3w91eP
dSjxHzN+cXIiLbqho8nnVeZOPj49eluuZXs3iF7e82ylHh/XiKz1W7qjG+ZO
vhx4qEnymdRWf3JXN3z6/OyAgz/Jp/k13c97uyH65LdTy534yOWsiBJ26oYZ
90IHpwp4GB5S+9f6ILk+yz4iRPyh0jJ/qxi3blik86Dm2jQaPxaopHQd7wYX
rsWaZYQfrI+UiGid7IYzmYPO3UT/u4S93Xy9u2Fefw7bfAUfLyQsyv9+vhvu
nFCpm054Zc7m70qz/btBQfS7LoPUV0LXsYDdgd2QLLQzvCj/v/NLqbbnV8n7
p+TZl0fwsUo52+B3aDecdvBmfaBpPPbd5eHaW93gua1spsgSGiddRajAO2T9
0aFLMvp8vCvw3q7kXjc8/bphG4fkS/P57jTp2G54NOujQPQPHqLxlITL025g
DJ2eO0X8027GS4/kF91gbi4F9jk8/B1gXcx92Q1tS9xnvJnGxyBFSg1SuqFQ
bMVhSeKHFuKTazfedUP27fHcF0Tf3zqZddVkdMOKdSHpO5IoNJv8bbz4E9kv
y95vYgaNzU+inx792g3WU+5Km37z8OQGo/H0b92QV+x3cCiSwpltXXsn8sn7
CJp8Y5rw8bF/WJb5L1KvhSEFr4gerJFfIx1VRupnS1HsZj6FRV+az7RWdcNG
67994X9oPLAvuHJZPemHfiZDoolG3piG1unmbtB+b10rKkfhzdiqsC/t3RAa
cmFb6SqitwZ+vdO7ukG4+qAw14bCrKYl5rbdZH/3S+6/nkvjdr+ihNh+Ul9R
2+olXGnskj0lyP5Lrh/94c4hPOD7ScZFm9sNk++iP17m8FByD+b48cn+hjuE
fkjQmEi7yeWPk3ybvDj3eR0fDR5I+EkI9ICw0crYpO88rF77sX7P9B5YGz+t
V9qdj+71B3TjRXugaJeTdx+Lh5M+06P+zO6BuSJzy1NTeXhX+s1f/bk9sPSB
cOcGUk/qH+ytghf0gFiYX/A9VT5+sx9PLl3UA3qpQeXrmijcxY0XkVHsgdYj
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
nvlb9pYnYr7NKr2bu5dEvsELYnqvYL5m1cvvbiHR+i2MyrEUrI/Neqf68Pwp
Ivvsq/I1Prx4+el8F4tEr79dnbM1nQ8nvo16B5/G+qz02uyTwYfKOsl59V8o
dOicYUDSDYy/po+mcimJtOxm5zzMxusrndxia0Ijoeq3V+9v8sG5e9qnR1sJ
1MSrGp/M40OPiZeTYRjW5/P4lWr5WE9ylqtW4PM7pbjusyjgg4H9CltiAY2W
H9SJ87/LB1VOwB8lGwpx106vvlrMB+vz1POpOTR6MvV+uKaUD59KND6/w/W/
0F0mO3iPD1SbSQk9h0S78s6aiVbwoYN3I6UVzwOLj+8J1Kjkwy7/qG2UF4V+
bV6Rt+MRPo9azKx1xRR6IPOnM7CaD+J1a+qip2G//dw1mf4Y+9WT1kkNKwpZ
lOdrPn3Chz2zzv3SvEAi2agw569P8ftr+PduRGE8ba0viT/jw8vwn/tTPShU
pLykdvVzPtxOPKmWGUeiEDb/164mPpyulh1tWYX12dAqf6IF+13kPMHPvRSa
lXTDPOsF5qPS+/szlQjU5xoQgl7ywb/sbljWWwLlrTHL//EK12fbw+VFKQTy
nZz/ZmYnH6zmxbTO/YT12TEypd3Nh52vLVj3Z5JINKdee+8bzOfv3slLFCn0
2i/lQEQvH24sk/d0DCXQdWPPxNx3fJDZw5/bfxLjKbXxafN7Pnxo3eyubkOi
NQNSjJGPGK/c6tZr8gQaK/2iIDPIh7VqW7ssPEnUdOqRhd5nXL/rpZ1B+PMk
64thTl8x3ntn3NtE8tF+RZfCyO982Mi8f0u1mETLGNp9+T/4MH+68pHBmv//
/9I0sZe/sB525zw+J0OiJ5f6ddkj+HMRm79ubwgUu7/0oCyTDzbc2CJ1a6zP
VVHJG9iYbxO7/KW9SaQ4bvfMlcuHxBSh4zcpEv18qc4+x8f881n80nwjgSoz
xxcXkfj5y3Gmn1cS6LRPp3UHzQc7q/vNu/RJZLHxdgRfyIfYf7/SDRIoNE/y
RPGCCT7sOKI5MmpNosH3lu+NJ/nQ4Bd0zhD7cXGR0oxD//hQa5W+xqyHQMHh
PP04EQK6dke6lmtiPC1aPMqmEXDg+Lr6q71YnwszU3umExAldzKofgGJen/5
NdIzCFDOYw1c8sT6rAGe4kwCLnW5SRe28dHRODkVUykCSi86cR3PUcjA8bet
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{524.7999999999997, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.9636383637405366`, 
   1.9636383637405366`}, {-1.5556031912147592`, 1.556221072874611}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772814461911932*^9, 3.7728144670320024`*^9}, {
   3.7728150422658315`*^9, 3.772815056560614*^9}, 3.772881660484823*^9, 
   3.7728817308389907`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"95292b8a-d0d2-4f34-85d8-652123babf13"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "+", "0.5"}], ")"}], "2"]}], "+", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "1.5"}], ",", "0.5", ",", "k"}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{"2", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "0.5"}], ")"}], "2"]}], "-", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "0.5"}], ",", "1.5", ",", "k"}], "}"}]}], "]"}]}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", "data"}]}], "Input",ExpressionUUID->"d6ef9274-ddef-\
4c5d-80f4-c039dbdf6b8a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["LearnDistribution with Real-NVP", "Subsection",
 CellChangeTimes->{{3.7728146985497675`*^9, 
  3.772814704989588*^9}},ExpressionUUID->"02859dcc-83f7-468f-bc02-\
b8061d7359b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "=", 
  RowBox[{"LearnDistribution", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<RealNVP\>\"", ",", 
       RowBox[{"\"\<NetworkDepth\>\"", "\[Rule]", "8"}], ",", 
       RowBox[{"\"\<CouplingLayersNumber\>\"", "\[Rule]", "4"}], ",", 
       RowBox[{"\"\<ActivationFunction\>\"", "\[Rule]", "Ramp"}], ",", 
       RowBox[{"MaxTrainingRounds", "\[Rule]", "500"}]}], "}"}]}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<DirectTraining\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771691097157357*^9, 3.771691123858289*^9}, {
   3.7716912095220165`*^9, 3.77169125720986*^9}, {3.771691320777122*^9, 
   3.7716914169006786`*^9}, 3.771691455862616*^9, {3.7716922287764378`*^9, 
   3.7716922595552025`*^9}, {3.771777439680786*^9, 3.7717774400101624`*^9}, {
   3.7717774947073097`*^9, 3.771777494806123*^9}, {3.7728145851497684`*^9, 
   3.772814611795025*^9}, {3.772814823737076*^9, 3.772814946525828*^9}, {
   3.7728151127753277`*^9, 3.7728151203361464`*^9}, {3.772815336977915*^9, 
   3.772815340512494*^9}},
 CellLabel->
  "In[259]:=",ExpressionUUID->"c31d5cb8-3edc-4b5b-8d0a-7575a5198536"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LearnedDistribution",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                "], {{{
                   EdgeForm[], 
                   GrayLevel[0.9], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.78], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.65], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.5], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                   Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]], 
                  
                  PointBox[{{4.905308194867242, 2.630836391598927}, {
                   0.20100883034436162`, 0.02382136569576569}, {
                   1.0719666600928879`, -1.250632626872198}, {
                   3.0527398070698992`, 
                   0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                   0.3149621009629985, 
                   1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                   2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}}, {{}, {}}}}, {
             FrameStyle -> Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], Frame -> True, FrameTicks -> None, 
              FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
              Identity, DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, AxesLabel -> {None, None}, 
              FrameLabel -> {{None, None}, {None, None}}, DisplayFunction -> 
              Identity, AspectRatio -> 1, AxesLabel -> {None, None}, 
              DisplayFunction :> Identity, Frame -> True, 
              FrameLabel -> {{None, None}, {None, None}}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Directive[
                GrayLevel[0.5, 0.4]], 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "GridLinesInFront" -> True}, PlotRange -> {{-3, 3}, {-3, 3}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RealNVP\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                "], {{{
                   EdgeForm[], 
                   GrayLevel[0.9], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.78], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.65], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.5], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                   Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]], 
                  
                  PointBox[{{4.905308194867242, 2.630836391598927}, {
                   0.20100883034436162`, 0.02382136569576569}, {
                   1.0719666600928879`, -1.250632626872198}, {
                   3.0527398070698992`, 
                   0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                   0.3149621009629985, 
                   1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                   2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}}, {{}, {}}}}, {
             FrameStyle -> Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], Frame -> True, FrameTicks -> None, 
              FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
              Identity, DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, AxesLabel -> {None, None}, 
              FrameLabel -> {{None, None}, {None, None}}, DisplayFunction -> 
              Identity, AspectRatio -> 1, AxesLabel -> {None, None}, 
              DisplayFunction :> Identity, Frame -> True, 
              FrameLabel -> {{None, None}, {None, None}}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Directive[
                GrayLevel[0.5, 0.4]], 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "GridLinesInFront" -> True}, PlotRange -> {{-3, 3}, {-3, 3}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RealNVP\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["10000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  LearnedDistribution[
   Association[
   "ExampleNumber" -> 10000, "Preprocessor" -> 
    MachineLearning`MLProcessor["ToMLDataset", 
      Association[
      "Input" -> Association[
        "f1" -> Association["Type" -> "NumericalVector", "Length" -> 2]], 
       "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
         Association["Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor["WrapMLDataset", 
             Association[
             "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
              "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
       "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
       "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Standardize", 
      Association[
      "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Mean" -> {4.547473508864641*^-16, -1.5916157281026244`*^-16}, 
       "StandardDeviation" -> {0.9999499987499367, 0.999949998749937}, 
       "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Version" -> {12., 0}, "ID" -> 7612164254450540647]], 
    "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> Automatic, 
    "Model" -> Association["Sampler" -> NetGraph[
        Association[
        "Type" -> "Graph", "Inputs" -> 
         Association[
          "checker_b" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "checker_w" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Nodes" -> Association[
          "coupling_4net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.47400811314582825`, -0.8142053484916687}, \
{-0.9381108283996582, -0.9096481204032898}, {-1.2824023962020874`, 
                    0.06401971727609634}, {-0.07836522907018661, 
                    0.48831385374069214`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.10472651571035385`, -0.899893045425415, \
-0.8831688165664673, 0.841711699962616}, {
                    0.639081597328186, -1.0726513862609863`, 
                    0.016854742541909218`, 0.6379846930503845}, {
                    0.29376646876335144`, -1.0531771183013916`, \
-0.7469577193260193, -0.6804822683334351}, {-0.3903186321258545, 
                    0.41556766629219055`, -0.44766518473625183`, 
                    0.5781077742576599}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.1779835969209671, -0.7659265995025635, \
-0.6955357789993286, -0.46534663438796997`}, {
                    0.40920573472976685`, -0.5140355825424194, \
-1.0458946228027344`, 1.022903561592102}, {
                    0.6857390999794006, -0.1890314221382141, \
-0.9970906972885132, 1.1968910694122314`}, {
                    1.0493556261062622`, -0.5241221189498901, 
                    0.996066153049469, 0.6140029430389404}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.09778854995965958, -0.08884620666503906, \
-0.981550395488739, 0.14494751393795013`}, {-1.1741719245910645`, 
                    0.5936166644096375, -0.8853036165237427, 
                    1.1288560628890991`}, {1.0192004442214966`, 
                    0.45757684111595154`, 
                    0.4314703643321991, -0.4057874381542206}, {
                    0.34138989448547363`, -1.2073633670806885`, 
                    0.6353721618652344, -1.1829006671905518`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.7903922200202942, 
                    1.0306997299194336`, -1.094161868095398, \
-0.23096758127212524`}, {0.5526812076568604, 0.24305129051208496`, 
                    0.5017563104629517, 
                    0.14767198264598846`}, {-0.6947301626205444, 
                    1.087038278579712, -0.9804190397262573, 
                    0.5635855197906494}, {
                    0.838047981262207, -0.9405266642570496, \
-0.47020044922828674`, 0.298164427280426}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.3400888741016388, -0.1795671135187149, 
                    0.29517868161201477`, -1.0533629655838013`}, {
                    0.5913594365119934, -0.9476831555366516, 
                    0.1860104650259018, 
                    0.02964492328464985}, {-0.28369805216789246`, 
                    0.2887578308582306, 0.6344670057296753, 
                    0.21172834932804108`}, {0.7833213806152344, 
                    0.15075556933879852`, 0.19456005096435547`, 
                    0.9793469309806824}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.5568111538887024, -0.2508641481399536, \
-0.8237136602401733, -0.2236444056034088}, {-1.0766154527664185`, \
-0.14689864218235016`, -1.129744529724121, 
                    0.4696337580680847}, {-0.082916259765625, 
                    0.3892093598842621, -0.8197648525238037, \
-0.99456787109375}, {0.9241390824317932, -0.8137200474739075, 
                    0.5294305682182312, -0.8215039968490601}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.5217711329460144, 
                    0.7797710299491882, -0.41279080510139465`, 
                    0.5107153058052063}, {-0.22225850820541382`, 
                    0.27820247411727905`, -0.8235942125320435, 
                    0.6491014361381531}, {-0.2466532438993454, \
-0.6058765053749084, -0.5460322499275208, -0.7440249919891357}, \
{-0.7497199773788452, 0.5091549158096313, -0.8626350164413452, 
                    0.23669159412384033`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.008660465478897095, 0., 
                    0.020563967525959015`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0004466772079468`, 1., 
                    1.0005074739456177`}], "Biases" -> 
                    RawArray["Real32",{0., 0.9064932465553284, 
                    0., -0.1170889362692833}], "MovingMean" -> 
                    RawArray["Real32",{0., -0.008652647025883198, 0., 
                    0.020534871146082878`}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_4net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.6304361820220947, -1.0520421266555786`}, \
{-1.2773617506027222`, -0.5163175463676453}, {1.0575640201568604`, 
                    0.4758467674255371}, {-0.2984674572944641, \
-0.5416990518569946}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.02016102522611618, -0.020137911662459373`, 
                    0.009103432297706604, -0.020071636885404587`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.05553991347551346, 
                    0.4838116466999054, 0.6280455589294434, 
                    0.9579535126686096}, {
                    0.4094116985797882, -0.7297202944755554, \
-0.5407580137252808, 1.0920393466949463`}, {0.3416574001312256, 
                    0.8166967630386353, 0.027458971366286278`, 
                    0.5231937766075134}, {-1.0214983224868774`, 
                    1.1557561159133911`, -0.73240065574646, \
-0.3085293173789978}}], "Biases" -> 
                    RawArray["Real32",{-0.005659567657858133, 
                    0.018651708960533142`, -0.027242522686719894`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7295066118240356, -0.9585456252098083, 
                    0.4683768153190613, 0.013072196394205093`}, {
                    0.7268832325935364, 1.0297549962997437`, 
                    0.13010364770889282`, 0.8511728644371033}, {
                    0.5311985015869141, -0.7490038275718689, 
                    1.1106948852539062`, -0.783568799495697}, \
{-0.11016649007797241`, -0.7793685793876648, 0.7892118692398071, 
                    0.6283679008483887}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.02789856493473053, -0.0267933439463377, \
-0.020013725385069847`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8662037253379822, -0.7305806279182434, 
                    0.5959702134132385, 
                    0.15533588826656342`}, {-0.16451825201511383`, \
-0.9961524605751038, -1.136181116104126, 0.4645577669143677}, {
                    0.3575422465801239, -0.3326648473739624, \
-1.0992751121520996`, 0.055531591176986694`}, {1.0984028577804565`, 
                    0.4548112154006958, 0.666391134262085, 
                    1.1845535039901733`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.028072068467736244`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.8098240494728088, 
                    1.155951976776123, -0.6447374224662781, 
                    0.45518845319747925`}, {-0.6766847372055054, \
-0.47551292181015015`, -0.3867071270942688, 1.1213455200195312`}, {
                    0.9464103579521179, -1.1102110147476196`, 
                    0.7772281169891357, 
                    0.23293203115463257`}, {-1.182234764099121, \
-0.47915083169937134`, -1.1138650178909302`, -0.3971502184867859}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0002449585881549865, -0.004986758343875408, \
-0.03427859768271446, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.1852563619613647`, 
                    0.7036933302879333, 0.8977159857749939, 
                    0.928520679473877}, {-0.9681017994880676, 
                    0.7755762934684753, 
                    0.1256440281867981, -0.6624584197998047}, {
                    0.6240013241767883, -0.14710289239883423`, 
                    0.5384515523910522, 0.6343113780021667}, {
                    0.6885873675346375, 0.07010910660028458, 
                    0.09267108887434006, 0.12848487496376038`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0070115430280566216`, \
-0.015095503069460392`, -0.009009095840156078, 0.003930181264877319}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.6698826551437378, -0.29908081889152527`, \
-0.2068452537059784, -0.30872347950935364`}, {0.6599966287612915, 
                    0.04333231970667839, -1.0408837795257568`, \
-0.306166410446167}, {-0.9370322823524475, -0.3536984920501709, \
-0.6001484394073486, 0.02215658314526081}, {-0.1800127923488617, 
                    0.8332293033599854, -1.1162543296813965`, \
-0.6609154343605042}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.008087989874184132, -0.011284451000392437`, \
-0.02397492341697216}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.5182785987854004, 
                    0.6566182374954224, 0.5928246974945068, 
                    0.12140579521656036`}, {
                    0.1699356734752655, -0.27175694704055786`, 
                    0.7886574864387512, 0.6768583655357361}, {
                    0.5189081430435181, 
                    0.2447454184293747, -0.5930821299552917, \
-0.08741005510091782}, {0.0417998731136322, -0.3245701491832733, 
                    0.5038024187088013, -0.023459866642951965`}}], "Biases" -> 
                    RawArray["Real32",{-0.008279794827103615, 
                    0., -0.01587769389152527, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.9806042313575745, 1., 
                    0.9761574268341064, 1.}], "Biases" -> 
                    RawArray["Real32",{0.5513590574264526, 0., 
                    0.12312658131122589`, 0.}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.008144805207848549, -5.605193857299268*^-45, \
-0.015940163284540176`, -5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_4net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-1.007866621017456, -1.1302850246429443`}, \
{-1.1292991638183594`, 
                    0.32867714762687683`}, {-0.9661316275596619, \
-1.2228132486343384`}, {-0.35992372035980225`, 1.0590423345565796`}}], 
                    "Biases" -> 
                    RawArray[
                    "Real32",{-0.19781887531280518`, -0.052421003580093384`, \
-0.26478883624076843`, 0.10271609574556351`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.04167582467198372, -0.039781633764505386`, \
-0.026082627475261688`, 1.3676934242248535`}, {
                    0.8291130661964417, -1.4437823295593262`, \
-0.5611294507980347, -0.9822043776512146}, {-0.3967604637145996, \
-0.753619909286499, 0.362751841545105, 
                    0.14525388181209564`}, {-0.9395437836647034, \
-0.5477266907691956, -1.133709192276001, 0.847710371017456}}], "Biases" -> 
                    RawArray["Real32",{0.07890690863132477, 
                    0.3761350214481354, 
                    0.3376272916793823, -0.1185382828116417}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6026408672332764, 
                    0.3285408020019531, -0.41105180978775024`, 
                    0.8543686866760254}, {-0.11997757107019424`, 
                    0.8851994872093201, 
                    0.6833640336990356, -0.3456652760505676}, \
{-0.39565959572792053`, -0.3138121962547302, -0.6649273037910461, 
                    0.35737353563308716`}, {-0.4911477863788605, \
-1.1042778491973877`, -0.36274898052215576`, -0.11533467471599579`}}], 
                    "Biases" -> 
                    RawArray["Real32",{0.020833812654018402`, 
                    0.20892350375652313`, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.9802055358886719, 
                    0.44653260707855225`, -1.1153992414474487`, \
-0.5422317981719971}, {1.0233982801437378`, -0.0626722201704979, 
                    1.0991966724395752`, -1.063027024269104}, \
{-0.6796855330467224, 
                    0.23226308822631836`, -0.3158417344093323, \
-0.5147196054458618}, {-0.8717750310897827, -0.3191491961479187, 
                    0.4369300305843353, -0.6443153619766235}}], "Biases" -> 
                    RawArray["Real32",{
                    0.16314755380153656`, -0.009577592834830284, 
                    0.18332423269748688`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.18324266374111176`, -0.5023815035820007, \
-0.7085782289505005, 
                    0.20978394150733948`}, {-0.8939442038536072, \
-0.6249310970306396, -0.21290069818496704`, 
                    0.979325532913208}, {-0.5504775643348694, \
-0.05832118168473244, -0.11689189821481705`, 0.053812094032764435`}, {
                    1.0853383541107178`, 0.0061812330968678, 
                    0.5580741763114929, -0.3068590462207794}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.05754492059350014}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.36064276099205017`, 
                    0.6194612383842468, -0.27823686599731445`, \
-8.196585440600757*^-6}, {0.4804772138595581, -0.165147066116333, 
                    0.9228812456130981, 
                    0.7461766004562378}, {-0.3477061092853546, \
-0.09727273136377335, 
                    0.4745616912841797, -1.1461161375045776`}, \
{-0.9887083172798157, 0.6576195955276489, -0.8700469732284546, 
                    1.0412739515304565`}}], "Biases" -> 
                    RawArray["Real32",{0.07557635009288788, 
                    0.018580619245767593`, 0., -0.030154014006257057`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{9.325220162281767*^-6, 
                    0.8228119611740112, -0.4993772506713867, \
-0.21248407661914825`}, {0.07443057745695114, -0.26470720767974854`, 
                    0.2867298722267151, -0.2581230103969574}, {
                    6.920875421201345*^-6, 
                    0.09026002883911133, -0.5431668758392334, 
                    0.31951263546943665`}, {-0.8487663269042969, \
-0.5759012699127197, 0.33831918239593506`, 0.3584586977958679}}], "Biases" -> 
                    RawArray["Real32",{-0.05139141529798508, 
                    0., -0.0088221849873662, 0.004635503049939871}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8246548771858215, -0.2259514480829239, 
                    0.3128778040409088, 0.3548484742641449}, {
                    0.03844049572944641, -0.7165543437004089, \
-0.6533167362213135, 0.02939617820084095}, {
                    0.8554775714874268, -0.7347059845924377, \
-0.7679096460342407, -0.06620988994836807}, {1.0089783668518066`, 
                    0.7805302143096924, 
                    0.42812126874923706`, -0.013497886247932911`}}], "Biases" -> 
                    RawArray["Real32",{0., 0.015746716409921646`, 
                    0., -0.005764590576291084}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.35106638073921204`, 1., 
                    2.100911855697632}], "Biases" -> 
                    RawArray["Real32",{0., -0.12786923348903656`, 0., 
                    0.05423612520098686}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.10744404792785645`, -0.13281498849391937`, 
                    0.005403124261647463, 0.32040634751319885`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0011073986534029245`, 
                    0.0017343112267553806`, 0.000022023315978003666`, 
                    0.009115437045693398}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_4net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.4652402400970459, 
                    0.49676209688186646`}, {0.1175260916352272, 
                    1.2375682592391968`}, {-0.8456810712814331, \
-0.6227266788482666}, {-1.4109878540039062`, 0.37913620471954346`}}], 
                    "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.9029104709625244, -0.7850021123886108, \
-0.45101794600486755`, 
                    0.5204910039901733}, {-0.18260669708251953`, \
-1.0518146753311157`, -0.006921728607267141, -0.26572009921073914`}, \
{-1.0894790887832642`, -1.0242424011230469`, -0.9082985520362854, 
                    1.1481907367706299`}, {-1.1608684062957764`, \
-0.9526859521865845, -0.5282173156738281, 0.20659083127975464`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6848381757736206, 
                    0.6082578301429749, 
                    0.7840158939361572, -0.5883799195289612}, \
{-0.9217560887336731, 
                    0.40544581413269043`, -0.33492571115493774`, \
-0.3102727234363556}, {-0.5688890814781189, 
                    1.046210527420044, -0.9115222096443176, \
-0.5828470587730408}, {-0.05852051451802254, 0.9531077146530151, 
                    0.32824960350990295`, 0.16221819818019867`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.9153900742530823, 
                    0.6633276343345642, -0.6811608672142029, 
                    0.19160978496074677`}, {-0.5331753492355347, \
-0.15094305574893951`, 
                    0.5140804052352905, -0.9406359195709229}, \
{-0.16569238901138306`, 0.47429540753364563`, -1.0168081521987915`, 
                    0.1246163472533226}, {-0.8730981349945068, \
-0.8632358312606812, 0.33973273634910583`, -0.3848488926887512}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6421592831611633, 
                    0.7852470874786377, 
                    0.9743026494979858, -0.5576608777046204}, {
                    1.029341697692871, -0.7168751955032349, \
-0.06433585286140442, 0.08959601074457169}, {0.27530547976493835`, 
                    0.5117119550704956, 
                    0.7906123995780945, -0.4385753571987152}, {
                    0.7723061442375183, -0.06683015823364258, \
-0.8859438896179199, -1.218153953552246}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    1.203736662864685, -0.25375401973724365`, 
                    0.7500302195549011, -0.22818173468112946`}, \
{-1.0999925136566162`, 0.9465587139129639, 0.3289337754249573, 
                    0.8465142846107483}, {
                    0.028109243139624596`, -0.03129323944449425, 
                    1.1834310293197632`, -0.44804665446281433`}, \
{-0.037871867418289185`, 0.010917437262833118`, -0.8484542369842529, 
                    0.20530910789966583`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.9259331226348877, 
                    0.37142977118492126`, 0.1256236582994461, 
                    0.04828003793954849}, {
                    0.9989590048789978, -0.2154754400253296, \
-0.016423378139734268`, 0.9485648274421692}, {1.040073037147522, 
                    0.12642869353294373`, -0.3693975806236267, \
-1.1077848672866821`}, {-0.5319598317146301, -0.4387214481830597, \
-0.534461259841919, -0.4620550572872162}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.0833996906876564, -0.46460387110710144`, \
-0.1812361478805542, 0.679459273815155}, {-0.8004432320594788, 
                    0.10009783506393433`, 
                    0.24950337409973145`, -0.41158491373062134`}, \
{-0.47476792335510254`, -0.3978653848171234, -0.15602312982082367`, 
                    0.8161223530769348}, {0.02307536080479622, 
                    0.14550918340682983`, 0.8530614376068115, 
                    0.5101252198219299}}], "Biases" -> 
                    RawArray["Real32",{0.011915917508304119`, 0., 
                    0.034721240401268005`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.000890851020813, 1., 
                    1.0057798624038696`, 1.}], "Biases" -> 
                    RawArray["Real32",{0.2999424636363983, 0., 
                    0.3054947257041931, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.01201102789491415, 0., 
                    0.0346289798617363, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    1.0418953895568848`, -0.513334333896637}, {
                    0.1687389612197876, -0.3302590548992157}, {
                    0.495919793844223, 
                    0.8434527516365051}, {-0.5314626693725586, 
                    1.3900585174560547`}}], "Biases" -> 
                    RawArray["Real32",{0.3659566044807434, 
                    0.13351543247699738`, 0.10686391592025757`, 
                    0.15509799122810364`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-1.3263261318206787`, -0.27763131260871887`, 
                    0.3791273236274719, 
                    0.2657627761363983}, {-1.4778060913085938`, 
                    0.8390009999275208, -0.9616281986236572, \
-0.025680365040898323`}, {
                    0.6034183502197266, -0.43304872512817383`, \
-0.3603288531303406, 
                    0.9616199731826782}, {-0.49781331419944763`, \
-0.529888391494751, -0.09996475279331207, -0.051624953746795654`}}], "Biases" -> 
                    RawArray["Real32",{0.08929497003555298, 
                    0.05597096309065819, -0.15732471644878387`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.5539706945419312, 
                    0.7471994757652283, 0.46178996562957764`, 
                    0.25351831316947937`}, {-0.4265191853046417, \
-0.7486802339553833, -0.7460475564002991, -0.6947806477546692}, {
                    0.9243960976600647, 
                    1.1926639080047607`, -0.17698706686496735`, \
-0.6852891445159912}, {0.09440665692090988, 0.27125465869903564`, 
                    0.869486391544342, -1.0169434547424316`}}], "Biases" -> 
                    RawArray["Real32",{0.2866675853729248, 0., 
                    0.04700961336493492, -0.1856992095708847}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.8231660723686218, -0.8155822157859802, \
-1.1855549812316895`, 
                    0.29907849431037903`}, {-0.4099087715148926, \
-0.6159327626228333, 
                    0.3841255307197571, -0.5931782722473145}, \
{-0.24869844317436218`, -0.5106825232505798, -0.07572083175182343, 
                    0.9675281047821045}, {
                    0.14630478620529175`, -0.14799608290195465`, \
-1.059540867805481, -1.1832749843597412`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.18658752739429474`, -0.023231053724884987`, \
-0.24010439217090607`, -0.05971395596861839}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.23073528707027435`, -0.4012846350669861, \
-0.2839476466178894, -1.0680859088897705`}, {-0.3161003589630127, \
-0.20132650434970856`, -1.0062566995620728`, 0.19635431468486786`}, {
                    0.46060413122177124`, 
                    0.20692935585975647`, -0.08522094786167145, 
                    1.1850789785385132`}, {0.0030966363847255707`, 
                    0.2825815677642822, -1.091651439666748, 
                    1.1223691701889038`}}], "Biases" -> 
                    RawArray["Real32",{0.09239514917135239, 
                    0., -0.013500048778951168`, 0.2942027449607849}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.1700756549835205`, 
                    0.13764449954032898`, 0.6639665365219116, 
                    0.5552995204925537}, {-0.4826156497001648, \
-0.8768376708030701, -1.0968669652938843`, -0.4557706117630005}, {
                    0.516022801399231, -1.1965264081954956`, 
                    0.3426477015018463, -1.1791882514953613`}, \
{-0.18313869833946228`, 1.1725883483886719`, 
                    0.6765085458755493, -0.4567888677120209}}], "Biases" -> 
                    RawArray["Real32",{0.0691957175731659, 
                    0., -0.052879009395837784`, -0.14714697003364563`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.3545922040939331, -1.0969960689544678`, \
-0.7072638869285583, -0.6124459505081177}, {0.5162127614021301, 
                    0.6238583326339722, 
                    0.34327301383018494`, -0.26791563630104065`}, \
{-0.5693504214286804, 1.2117674350738525`, -0.11955609917640686`, 
                    0.9526163935661316}, {
                    0.0004830145335290581, -0.6953133940696716, \
-0.8744909763336182, 0.5600712895393372}}], "Biases" -> 
                    RawArray["Real32",{-0.04417675733566284, 
                    0.016460709273815155`, -0.018018431961536407`, \
-0.003621066454797983}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.08364911377429962, -0.41293445229530334`, 
                    0.7456597089767456, -0.6112605333328247}, {
                    0.38328656554222107`, 
                    0.026827214285731316`, -0.6304061412811279, 
                    0.0014338655164465308`}, {
                    0.2936494052410126, -0.4953831434249878, \
-0.8156598806381226, 
                    0.7646706700325012}, {-0.037835653871297836`, \
-0.9449551701545715, 0.7161888480186462, 0.32395997643470764`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.004959477577358484, 0., 
                    0.018554257228970528`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.4236890375614166, 1., 
                    0.8259796500205994}], "Biases" -> 
                    RawArray["Real32",{0., 0.8121699094772339, 0., 
                    0.15723752975463867`}], "MovingMean" -> 
                    RawArray["Real32",{-0.12917044758796692`, 
                    0.05554655194282532, -0.09991323947906494, \
-0.25477808713912964`}], "MovingVariance" -> 
                    RawArray["Real32",{0.000266525661572814, 
                    0.00009923988545779139, 0.00010416119766887277`, 
                    0.0011296860175207257`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8055242896080017, -0.5046042799949646}, \
{-1.0678335428237915`, -0.9697098135948181}, {-0.561033308506012, \
-0.8877573609352112}, {0.9595621824264526, -0.0500657856464386}}], "Biases" -> 
                    RawArray["Real32",{0.33588457107543945`, 
                    0.07756032794713974, -0.09569449722766876, \
-0.11187814921140671`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.32993894815444946`, 
                    0.5002012252807617, -0.49956807494163513`, 
                    0.40580034255981445`}, {
                    0.07131551206111908, -0.16277313232421875`, \
-1.1159601211547852`, 1.1482741832733154`}, {1.2370935678482056`, 
                    1.6028075218200684`, -0.42574992775917053`, \
-0.755722165107727}, {-0.5497583150863647, 
                    0.5320141911506653, -1.025053858757019, 
                    0.9358385801315308}}], "Biases" -> 
                    RawArray["Real32",{-0.037944987416267395`, 
                    0.22707660496234894`, 
                    0.007558062672615051, -0.03027201071381569}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.1833183318376541, -0.5434562563896179, 
                    0.35900264978408813`, 
                    0.6587458252906799}, {-0.15809792280197144`, 
                    0.8733894228935242, -0.9908549785614014, 
                    1.045094609260559}, {0.7978456616401672, 
                    0.35350021719932556`, -0.2868674695491791, \
-1.0262768268585205`}, {-0.7124864459037781, 
                    1.0488007068634033`, -0.5228165984153748, 
                    0.926790177822113}}], "Biases" -> 
                    RawArray["Real32",{-0.04258950427174568, 
                    0.17276756465435028`, -0.12131209671497345`, 
                    0.27382320165634155`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.05914736166596413, 
                    0.47175294160842896`, 0.17754751443862915`, 
                    0.9169224500656128}, {-1.0569748878479004`, 
                    0.4991212785243988, -0.6323114037513733, \
-0.8411307334899902}, {1.0993962287902832`, 
                    0.18369415402412415`, -1.0187921524047852`, \
-1.3645762205123901`}, {
                    0.6631592512130737, -0.4769909679889679, \
-0.28027579188346863`, -0.49332156777381897`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.04119429364800453, -0.005328983999788761, \
-0.18500567972660065`, 0.14757290482521057`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.11408688127994537`, 
                    0.4024689495563507, 0.3531888723373413, 
                    0.9709101915359497}, {0.6454603672027588, 
                    0.6429744362831116, 0.6609175205230713, 
                    0.41047388315200806`}, {-0.021838761866092682`, 
                    0.7679307460784912, -0.9821698665618896, 
                    0.5330458283424377}, {-0.48661771416664124`, \
-0.8861293196678162, 0.2985672652721405, -0.24996596574783325`}}], "Biases" -> 
                    RawArray["Real32",{-0.029024148359894753`, 
                    0.10164622962474823`, 
                    0.22822213172912598`, -0.0643431693315506}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.25814053416252136`, -0.5698228478431702, 
                    0.9926735162734985, 1.1822365522384644`}, {
                    0.30227944254875183`, -0.5475373864173889, \
-1.221463918685913, -0.7576279044151306}, {-0.6261985898017883, 
                    0.32760244607925415`, 0.2221505343914032, 
                    0.49372488260269165`}, {-1.0299720764160156`, \
-0.8712263703346252, 0.4709862470626831, -0.9809171557426453}}], "Biases" -> 
                    RawArray["Real32",{-0.05840636044740677, 0., 
                    0.34599795937538147`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7178837060928345, 
                    0.0754539743065834, -0.07109770178794861, 
                    0.10907488316297531`}, {-0.39196500182151794`, \
-1.0391287803649902`, 0.5946069955825806, 0.3916831910610199}, {
                    0.5160495042800903, -0.4873242974281311, 
                    0.49311238527297974`, -0.24718569219112396`}, \
{-0.6341967582702637, 
                    0.36129269003868103`, -0.6919680833816528, \
-1.0163519382476807`}}], "Biases" -> 
                    RawArray["Real32",{-0.18687163293361664`, 
                    0.02596762776374817, 0.03363369405269623, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2952757179737091, 
                    0.4504634737968445, -0.04413805529475212, 
                    0.18807938694953918`}, {-0.7450427412986755, \
-0.8215761184692383, -0.4584442377090454, -0.4913382828235626}, \
{-0.2416420727968216, 0.3537132441997528, 0.27950969338417053`, 
                    0.5292163491249084}, {-0.7373591065406799, 
                    0.36556029319763184`, -0.41158556938171387`, \
-0.2839217483997345}}], "Biases" -> 
                    RawArray["Real32",{-0.01831594482064247, 0., 
                    0.017417605966329575`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.2714173197746277, 1., 
                    0.9956449866294861, 1.}], "Biases" -> 
                    RawArray["Real32",{0.19552762806415558`, 
                    0., -0.39802759885787964`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.07385575026273727, -0.2899567484855652, 
                    0.16089841723442078`, -0.009371621534228325}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0014104446163401008`, 
                    0.011190064251422882`, 0.0026832493022084236`, 
                    0.00038680279976688325`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2642930746078491`, 
                    0.8268188238143921}, {-0.5022134184837341, 
                    0.5101158618927002}, {-1.3381139039993286`, 
                    1.166893720626831}, {0.4878425598144531, 
                    0.20256587862968445`}}], "Biases" -> 
                    RawArray["Real32",{-0.17179343104362488`, 
                    0.08783379197120667, 
                    0.06922435760498047, -0.2568233013153076}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.32112014293670654`, -1.063812017440796, \
-2.908308267593384, -0.48695436120033264`}, {-0.9814897179603577, \
-0.32749828696250916`, -0.28614771366119385`, -0.8372399806976318}, {
                    0.3182300329208374, 
                    0.1996791958808899, -0.3122684061527252, 
                    0.7359107136726379}, {1.2977542877197266`, 
                    0.28099775314331055`, -1.060470461845398, \
-0.36558130383491516`}}], "Biases" -> 
                    RawArray["Real32",{0.22945696115493774`, 0., 
                    0.3949333429336548, 0.16519878804683685`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7585293650627136, -1.1807243824005127`, 
                    0.6534357070922852, -0.26351964473724365`}, \
{-1.112922191619873, 0.17868958413600922`, 
                    1.4414318799972534`, -1.1912803649902344`}, {
                    0.31313610076904297`, 
                    0.05311939865350723, -0.7185114026069641, 
                    1.1544849872589111`}, {0.7256407141685486, 
                    0.9326233267784119, 0.028320958837866783`, 
                    0.2747834324836731}}], "Biases" -> 
                    RawArray["Real32",{0.2263377159833908, 
                    0.09536410123109818, 
                    0.23931525647640228`, -0.015928028151392937`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.9092296957969666, 
                    0.7737902402877808, -0.5791275501251221, 
                    0.007331222761422396}, {-0.3860591948032379, 
                    0.7988179326057434, 0.483842134475708, 
                    0.7352887988090515}, {
                    0.19772590696811676`, -1.0622608661651611`, \
-0.7747647166252136, 0.07980397343635559}, {
                    0.5633371472358704, -0.814481258392334, \
-0.4070219397544861, -1.0397902727127075`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.26312559843063354`, -0.09947662800550461, \
-0.020687200129032135`, -0.03377986699342728}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2686201333999634`, 
                    0.24814386665821075`, -0.27694377303123474`, 
                    0.5479679107666016}, {0.0696205124258995, 
                    1.102692723274231, 
                    1.0082558393478394`, -0.8493449091911316}, \
{-0.12962917983531952`, -0.6112529039382935, -1.1061062812805176`, 
                    0.1692829132080078}, {-0.17391467094421387`, \
-1.1689257621765137`, 0.9973315596580505, -0.7050062417984009}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.093745157122612, -0.05702408775687218, 0., 
                    0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.7096297740936279, -0.3120685815811157, 
                    1.0470035076141357`, 0.19487692415714264`}, {
                    0.009518268518149853, -0.9735857844352722, 
                    0.15269295871257782`, 
                    0.2565949261188507}, {-0.11307663470506668`, \
-1.1760481595993042`, 
                    1.039278507232666, -0.01588474214076996}, \
{-0.8765694499015808, 
                    1.1391587257385254`, -1.179132342338562, \
-0.9810775518417358}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.09613307565450668, -0.031668826937675476`, 
                    0., -0.03938092663884163}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.5577342510223389, -1.0093947649002075`, \
-0.41194576025009155`, -0.3543873131275177}, {1.0553799867630005`, 
                    1.1880255937576294`, -0.30832621455192566`, \
-0.4425933361053467}, {-1.3836721181869507`, 0.09204135090112686, 
                    0.8451066017150879, 0.22725027799606323`}, {
                    0.7735462784767151, 
                    0.21771612763404846`, -0.5773540735244751, \
-1.2089533805847168`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.8894547820091248, -0.4685942828655243, \
-0.20228110253810883`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.07895833253860474, 
                    0.3609413206577301, 0.4526773691177368, 
                    0.37655872106552124`}, {
                    0.8290538191795349, -0.023191213607788086`, \
-0.12195669859647751`, -0.31643494963645935`}, {
                    0.7179055213928223, -0.08120162039995193, \
-0.26662132143974304`, -0.5745231509208679}, {
                    0.11935969442129135`, -0.5377625226974487, \
-0.52306067943573, 0.5917158126831055}}], "Biases" -> 
                    RawArray["Real32",{0., 0.037078045308589935`, 
                    0., -0.022038575261831284`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.8302268981933594, 1., 
                    1.316287636756897}], "Biases" -> 
                    RawArray["Real32",{0., 0.15166693925857544`, 
                    0., -0.45056086778640747`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.39726001024246216`, -0.0194294061511755, \
-0.14308758080005646`, -0.48614558577537537`}], "MovingVariance" -> 
                    RawArray["Real32",{0.05312395840883255, 
                    0.002626831643283367, 0.01282864436507225, 
                    0.04547467827796936}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2269245386123657`, 
                    0.5300783514976501}, {-1.0680961608886719`, 
                    
                    1.2279157638549805`}, {-0.9560098648071289, \
-0.6157021522521973}, {-1.3427678346633911`, -0.5092048645019531}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.055263977497816086`, -0.0357687771320343, 
                    0.009987019933760166, -0.409896582365036}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2102319300174713, 
                    0.7911170721054077, 0.7531107068061829, 
                    0.05388656258583069}, {
                    0.7294581532478333, -1.0154672861099243`, \
-0.8989071249961853, -0.8402823805809021}, {0.8225075602531433, 
                    1.0055885314941406`, -0.8146655559539795, 
                    0.14929859340190887`}, {
                    0.3443886935710907, -0.23406171798706055`, 
                    0.648874044418335, -0.974784791469574}}], "Biases" -> 
                    RawArray["Real32",{
                    0.10877753049135208`, -0.10987579822540283`, \
-0.05968782678246498, 0.007396911736577749}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.5818372368812561, 
                    0.6368904113769531, -0.6741195321083069, \
-0.9550532102584839}, {-0.9334428906440735, -0.2268291413784027, \
-1.1252663135528564`, 1.0908485651016235`}, {
                    0.49197691679000854`, -0.903556227684021, 
                    0.16529005765914917`, 
                    0.7606364488601685}, {-0.060122277587652206`, \
-0.559829831123352, -0.7184230089187622, 0.19126306474208832`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.09598984569311142, 
                    0.11792483925819397`, -0.0518016554415226}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.05107980966567993, -0.5076199173927307, 
                    0.8656588792800903, 1.169507384300232}, {
                    0.043214909732341766`, -0.12430473417043686`, 
                    1.0353971719741821`, 
                    0.2244076430797577}, {-0.004986797459423542, 
                    0.7752837538719177, -0.08317965269088745, \
-0.519730269908905}, {-0.1021399050951004, 
                    0.12337113171815872`, -0.1672910451889038, \
-0.06014348939061165}}], "Biases" -> 
                    RawArray["Real32",{-0.07721059769392014, 
                    0.09335753321647644, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.5864083170890808, -1.1515958309173584`, \
-0.9700015187263489, -1.0751793384552002`}, {-0.44147804379463196`, 
                    0.904954195022583, -0.572465717792511, \
-0.07864737510681152}, {0.8050349950790405, -1.1519731283187866`, 
                    0.5112066864967346, 
                    0.06149987503886223}, {-0.2646709978580475, 
                    0.6335101127624512, -0.013110958971083164`, \
-0.9270269870758057}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.02993219904601574, -0.005128767807036638, 
                    0.016426386311650276`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.3305329382419586, -1.0482378005981445`, \
-0.1924656182527542, -0.7495168447494507}, {
                    0.47665491700172424`, -0.5365244150161743, 
                    1.124621868133545, 0.6901269555091858}, {
                    1.1700797080993652`, 0.4269246757030487, 
                    1.1931535005569458`, 0.17938324809074402`}, {
                    0.3727201223373413, 
                    0.7936676144599915, -1.1791568994522095`, 
                    0.9097337126731873}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.007643654942512512, -0.08279790729284286, 
                    0.09779099375009537}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.41163170337677, 1.0882995128631592`,
                     0.0033295280300080776`, -0.19062167406082153`}, {
                    1.1305721998214722`, -0.7240346670150757, \
-0.5251972675323486, -0.7583861947059631}, {-0.9256356954574585, \
-0.7151260375976562, -0.14005182683467865`, 
                    0.4736833870410919}, {-0.78333580493927, 
                    0.30321186780929565`, -0.9420959949493408, \
-0.8564635515213013}}], "Biases" -> 
                    RawArray["Real32",{-0.07011282444000244, 0., 
                    0.03244610130786896, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.7035068273544312, 
                    0.18534383177757263`, 0.0613018162548542, 
                    0.11431510001420975`}, {
                    0.4332052171230316, -0.5943752527236938, \
-0.8540732860565186, -0.13494515419006348`}, {-0.21640744805335999`, 
                    0.8409658670425415, -0.45774969458580017`, 
                    0.2688940465450287}, {
                    0.16293755173683167`, -0.7081860303878784, \
-0.43753185868263245`, 0.13354924321174622`}}], "Biases" -> 
                    RawArray["Real32",{0.006494243163615465, 
                    0., -0.055063627660274506`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.046222977340221405`, 1., 
                    1.0855382680892944`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.4094805121421814, 0., 
                    0.3329516053199768, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.037118829786777496`, -0.42928051948547363`, \
-0.28365957736968994`, -0.21991543471813202`}], "MovingVariance" -> 
                    RawArray["Real32",{0.00012735245400108397`, 
                    0.025137698277831078`, 0.007188437506556511, 
                    0.006597123574465513}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6084913015365601, 
                    0.34091585874557495`}, {
                    0.35409799218177795`, -0.7107595205307007}, \
{-0.47736838459968567`, 1.3376765251159668`}, {
                    1.0174744129180908`, -0.40096160769462585`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.08730413764715195, -0.30411016941070557`, 
                    0.08460777997970581, 0.1346454918384552}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7835296988487244, -0.2876985967159271, \
-0.7150038480758667, -0.441653847694397}, {-0.6377336978912354, 
                    2.105273485183716, 0.03946137800812721, 
                    0.962832510471344}, {-0.5244331359863281, \
-0.6607128381729126, 
                    0.8806125521659851, -0.4075981080532074}, \
{-0.0207088440656662, -0.8347008228302002, -0.21375447511672974`, \
-1.024819254875183}}], "Biases" -> 
                    RawArray["Real32",{0., 0.10184445232152939`, 
                    0.2095145285129547, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.25878214836120605`, -0.6802108287811279, 
                    0.23190860450267792`, -0.5543636083602905}, \
{-1.0917338132858276`, -0.141453817486763, -0.7815151810646057, \
-1.0538750886917114`}, {-0.9915717244148254, 1.0146677494049072`, 
                    0.46070724725723267`, 1.2237516641616821`}, {
                    0.18021562695503235`, -1.0064103603363037`, 
                    0.028769556432962418`, 1.207274317741394}}], "Biases" -> 
                    RawArray["Real32",{-0.17457066476345062`, 0., 
                    0.14317403733730316`, -0.03311567381024361}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7010096907615662, 
                    0.5386219024658203, 0.13931305706501007`, 
                    1.0312293767929077`}, {
                    0.7909489870071411, -0.42114776372909546`, 
                    0.24118812382221222`, -0.9541829228401184}, {
                    0.48835626244544983`, -0.46471327543258667`, 
                    0.619662880897522, 
                    0.6258669495582581}, {-0.99852454662323, \
-0.3097281754016876, 0.25753268599510193`, -0.12958447635173798`}}], "Biases" -> 
                    RawArray["Real32",{0.05355251580476761, 
                    0.05030385032296181, 
                    0.12225575000047684`, -0.05507795140147209}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7661686539649963, 
                    0.7926455140113831, -1.0148553848266602`, \
-0.2221817821264267}, {0.6779279708862305, 0.4717486798763275, 
                    0.6864776611328125, -1.1918736696243286`}, {
                    0.7604702711105347, 
                    1.1436012983322144`, -0.9900761842727661, \
-0.9546067714691162}, {0.14667591452598572`, 
                    0.5370497703552246, -0.7491148114204407, 
                    0.08863148838281631}}], "Biases" -> 
                    RawArray["Real32",{-0.005557596683502197, 
                    0.08889354765415192, -0.039164479821920395`, \
-0.00436381995677948}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6535167694091797, 
                    0.9468663334846497, -0.6574264168739319, \
-0.5250082015991211}, {-1.0625808238983154`, -0.00959259457886219, 
                    1.0252410173416138`, -0.7745680212974548}, \
{-0.7256602048873901, -0.15038423240184784`, 
                    1.0325127840042114`, -0.8182397484779358}, \
{-0.7448923587799072, 
                    0.2248680740594864, -0.4737423360347748, \
-1.117297887802124}}], "Biases" -> 
                    RawArray["Real32",{
                    0.006623828783631325, -0.030691642314195633`, \
-0.005555391777306795, 0.02767174318432808}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.4338841438293457, 
                    0.02327045425772667, 
                    0.003029894083738327, -0.8972814679145813}, \
{-0.2538984417915344, -0.8802012801170349, 0.6719919443130493, 
                    1.069201946258545}, {
                    0.1005774438381195, -0.8963965773582458, \
-0.9779155254364014, -0.4103488326072693}, {-0.23362062871456146`, \
-0.38641712069511414`, 0.3283616006374359, 0.06959308683872223}}], "Biases" -> 
                    RawArray["Real32",{0.06830772012472153, 
                    0.08361774682998657, -0.0053450302220880985`, \
-0.006242052186280489}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.7368323802947998, 
                    0.8498879671096802, -0.4320899248123169, 
                    0.8462148904800415}, {0.581718385219574, 
                    0.09062107652425766, 
                    0.7757717967033386, -0.22117385268211365`}, \
{-0.5401679873466492, 0.4012470841407776, -0.3824312686920166, 
                    0.21749524772167206`}, {-0.3506982624530792, \
-0.05828291177749634, -0.6220205426216125, 0.7043546438217163}}], "Biases" -> 
                    RawArray["Real32",{0., -0.0989883542060852, 0., 
                    0.034546662122011185`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0943498611450195`, 1., 
                    0.5707899332046509}], "Biases" -> 
                    RawArray["Real32",{0., -0.011473491787910461`, 0., 
                    0.02301899343729019}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.016649531200528145`, \
-0.0011380029609426856`, -0.036924321204423904`, -0.02508625201880932}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00038284322363324463`, 
                    0.0002371612936258316, 0.0002056993980659172, 
                    0.00008736725430935621}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.0232733488082886`, 
                    0.4123275578022003}, {-0.42913058400154114`, \
-0.7507485747337341}, {-0.6771546006202698, -0.42921799421310425`}, \
{-1.1501773595809937`, -0.5237459540367126}}], "Biases" -> 
                    RawArray["Real32",{-0.06611915677785873, 
                    0.38374435901641846`, -0.21494361758232117`, \
-0.08891620486974716}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.938681423664093, 
                    0.5236425399780273, -0.4462301731109619, 
                    0.7413621544837952}, {
                    0.36929574608802795`, -0.5489752292633057, \
-0.3339131772518158, 0.44864922761917114`}, {-0.6584511995315552, 
                    0.2634795606136322, 
                    1.1334044933319092`, -0.7523109912872314}, \
{-0.03542015701532364, -0.8779085874557495, -0.809063196182251, 
                    0.03728779777884483}}], "Biases" -> 
                    RawArray["Real32",{-0.10400308668613434`, 
                    0.2816414535045624, -0.09269170463085175, \
-0.004481355659663677}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.24621422588825226`, 
                    0.985656201839447, 0.09558389335870743, 
                    1.2012335062026978`}, {
                    0.7117063999176025, -0.4811817705631256, \
-0.2930569648742676, -0.07616393268108368}, {1.1045162677764893`, 
                    0.2911427617073059, -0.34115180373191833`, \
-0.8265060782432556}, {-0.9755216836929321, 0.4526450037956238, 
                    0.43766549229621887`, 0.5006574988365173}}], "Biases" -> 
                    RawArray["Real32",{0.013371359556913376`, 
                    0.04690810665488243, -0.03512047231197357, \
-0.1534721404314041}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.9985904693603516, 
                    0.3187827467918396, -1.0587326288223267`, \
-1.0089114904403687`}, {
                    0.43743884563446045`, -0.15510369837284088`, \
-0.9138410687446594, 0.3631367087364197}, {
                    0.9080770611763, -0.3844505250453949, 
                    0.6118550896644592, -0.5183600187301636}, {
                    0.6724507212638855, 0.93711918592453, 0.4640797972679138, 
                    0.9890212416648865}}], "Biases" -> 
                    RawArray["Real32",{
                    0.027951490134000778`, -0.10686809569597244`, 
                    0.013608737848699093`, -0.06892822682857513}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2668100893497467, 
                    0.15058819949626923`, -1.1104614734649658`, 
                    0.03640010580420494}, {-0.13042515516281128`, 
                    0.7564303874969482, 
                    0.006577329710125923, -0.6690428853034973}, \
{-0.5001853704452515, 0.4691876769065857, 
                    0.7996487021446228, -0.14533911645412445`}, {
                    0.4526841938495636, 0.8468631505966187, 
                    0.09007269889116287, -0.23484553396701813`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0052228025160729885`, -0.005015995819121599, 
                    0.04361181706190109, 0.20404070615768433`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.1011145114898682`, 
                    0.7110188603401184, 0.5675764083862305, 
                    0.9290199875831604}, {
                    0.22922439873218536`, -0.3610682487487793, 
                    0.17099426686763763`, 0.6951537132263184}, {
                    0.3940970301628113, 0.389936625957489, 
                    0.21339713037014008`, -0.9525924921035767}, {
                    0.40970227122306824`, -0.8975924849510193, 
                    1.0971708297729492`, 0.16968782246112823`}}], "Biases" -> 
                    RawArray["Real32",{0.0006359686376526952, 
                    0.025261353701353073`, -0.20041799545288086`, \
-0.0014764054212719202`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6824387907981873, 
                    0.1007201224565506, -0.13071443140506744`, \
-0.9145658612251282}, {-0.2611132264137268, -0.4049318730831146, \
-0.3291284143924713, -0.40765678882598877`}, {0.4567570090293884, 
                    0.23558172583580017`, 0.21312430500984192`, 
                    0.0910617858171463}, {0.15193194150924683`, 
                    0.8316170573234558, -0.14471234381198883`, \
-0.26284971833229065`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0.00010937114711850882`, 
                    0.01756111904978752}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.5749830007553101, -0.5930800437927246, 
                    0.07424910366535187, 0.11974163353443146`}, {
                    0.5756600499153137, 0.14637413620948792`, 
                    0.6387523412704468, -0.14677976071834564`}, {
                    0.6429774165153503, 0.32796573638916016`, 
                    0.5578079223632812, -0.08706668764352798}, {
                    0.7294813394546509, -0.5185415148735046, \
-0.3751922845840454, -0.19885247945785522`}}], "Biases" -> 
                    RawArray["Real32",{0.10288982093334198`, 
                    0., -0.053429532796144485`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.7660358548164368, 1., 
                    0.6746312379837036, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.1611233502626419, 
                    0., -0.16056616604328156`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.1324150562286377, 
                    0.14110837876796722`, 
                    0.07327874004840851, -0.11011964827775955`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00007790406380081549, 
                    0.004116098862141371, 0.0031010578386485577`, 
                    0.001395107712596655}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.6247974634170532, 
                    1.0719972848892212`}, {-0.8147713541984558, \
-0.951488196849823}, {0.4458984434604645, 
                    1.009402871131897}, {-0.6509699821472168, 
                    0.6131016612052917}}], "Biases" -> 
                    RawArray["Real32",{-0.30463317036628723`, 
                    0.23118887841701508`, 
                    0.06617609411478043, -0.30046290159225464`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.308014988899231, 
                    0.41012367606163025`, 
                    1.1328684091567993`, -0.6759518980979919}, \
{-0.06172512471675873, -0.27633190155029297`, 1.1597766876220703`, 
                    1.054457664489746}, {
                    1.1483964920043945`, -1.1610616445541382`, \
-0.32596054673194885`, 1.2034265995025635`}, {
                    0.2506335377693176, -0.5807443261146545, 
                    0.09045513719320297, -0.3083084225654602}}], "Biases" -> 
                    RawArray["Real32",{
                    0.024193117395043373`, -0.22505512833595276`, \
-0.05639704689383507, 0.3493075966835022}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.2778819501399994, 
                    0.7496756315231323, 1.0025731325149536`, 
                    0.5138924717903137}, {-0.7969806790351868, \
-0.2784910798072815, -0.546769380569458, 0.6271833777427673}, {
                    0.5501472353935242, 1.320475697517395, 0.7035324573516846,
                     1.2081241607666016`}, {0.9598748087882996, 
                    0.6415534615516663, -1.3248586654663086`, 
                    0.24694617092609406`}}], "Biases" -> 
                    RawArray["Real32",{-0.17849385738372803`, 
                    0.2985064685344696, -0.1312658190727234, 
                    0.1636054366827011}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.2408421039581299`, 
                    0.6402130722999573, -0.5636037588119507, 
                    0.7157518267631531}, {
                    0.7387978434562683, -1.0216920375823975`, 
                    0.22834144532680511`, 0.30655571818351746`}, {
                    0.5690512657165527, -0.35685232281684875`, \
-0.41032058000564575`, -1.1276694536209106`}, {0.022032486274838448`, 
                    0.18081532418727875`, -0.7020317912101746, 
                    0.533079206943512}}], "Biases" -> 
                    RawArray["Real32",{
                    0.13038139045238495`, -0.26013192534446716`, \
-0.03431916981935501, 0.26744359731674194`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.884698212146759, -0.9137963056564331, \
-0.6820396184921265, -1.1969163417816162`}, {1.02857506275177, 
                    0.6642537713050842, 0.028140507638454437`, 
                    0.06875970214605331}, {-0.09183403104543686, 
                    0.0021497849375009537`, -0.2629159390926361, \
-0.16911469399929047`}, {0.6566782593727112, 0.6675363183021545, 
                    0.553555428981781, 1.0056182146072388`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.05621147155761719, -0.010769825428724289`, 
                    0.07819464057683945}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2057257890701294`, 
                    0.24814435839653015`, 1.1151946783065796`, 
                    0.49364256858825684`}, {-0.34746411442756653`, 
                    0.6987231373786926, 0.943751871585846, 
                    0.7946571707725525}, {
                    0.46374526619911194`, -0.4114575982093811, 
                    0.6955560445785522, 
                    0.3322679400444031}, {-0.47509536147117615`, \
-1.0886939764022827`, 0.07419174164533615, 0.6524626612663269}}], "Biases" -> 
                    RawArray["Real32",{
                    0.013026686385273933`, -0.007407285738736391, 
                    0.11372725665569305`, -0.07177607715129852}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.723952054977417, 0.631230354309082,
                     0.07747747749090195, 
                    0.4074034094810486}, {-1.197285771369934, \
-0.5476441979408264, -0.5596575736999512, 
                    1.183302879333496}, {-0.8752565979957581, \
-0.4132252037525177, 0.293244332075119, 0.21619480848312378`}, {
                    0.4112408757209778, -0.07134272903203964, 
                    0.25418463349342346`, 0.15527468919754028`}}], "Biases" -> 
                    RawArray["Real32",{0.06009580194950104, 0., 0., 
                    0.009850728325545788}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.6709763407707214, -0.8419735431671143, \
-0.6108553409576416, 
                    0.31385189294815063`}, {-0.3921840488910675, \
-0.27944886684417725`, -0.44053006172180176`, 
                    0.30910852551460266`}, {-0.07277870178222656, 
                    0.5416227579116821, -0.749184787273407, \
-0.22155964374542236`}, {-0.03492600470781326, -0.5857563018798828, \
-0.289907842874527, -0.40806424617767334`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.03365085646510124, 0., 
                    0.04534592106938362}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.51395183801651, 1., 
                    0.9517407417297363}], "Biases" -> 
                    RawArray["Real32",{0., 0.2162855863571167, 
                    0., -0.33053067326545715`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.2486773431301117, -0.09127230942249298, \
-0.06003804877400398, -0.03530314937233925}], "MovingVariance" -> 
                    RawArray["Real32",{0.004154358524829149, 
                    0.00032402551732957363`, 0.00022630792227573693`, 
                    0.00040684040868654847`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.0272393226623535`, 
                    1.1851426362991333`}, {-1.1013171672821045`, 
                    1.3560041189193726`}, {-0.2645794451236725, 
                    0.8190812468528748}, {0.2288351058959961, 
                    0.5987197160720825}}], "Biases" -> 
                    RawArray["Real32",{0.020290987566113472`, 
                    0.02084389515221119, -0.020147942006587982`, \
-0.020126312971115112`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.24388974905014038`, 
                    0.4529878795146942, -1.1013665199279785`, \
-0.1728794127702713}, {
                    0.4499173164367676, -1.1148042678833008`, \
-0.5451153516769409, -0.17451262474060059`}, {-0.8063437938690186, \
-0.12459979951381683`, 1.1342663764953613`, 0.8231135010719299}, {
                    0.05881085246801376, -0.11509258300065994`, \
-1.204534888267517, 0.33516672253608704`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020205922424793243`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.32763224840164185`, -1.1029812097549438`, \
-1.1657968759536743`, 0.07768034934997559}, {
                    0.5615560412406921, -0.18220843374729156`, \
-0.6637734770774841, 1.1732587814331055`}, {0.5226121544837952, 
                    0.09836286306381226, 0.663692057132721, 
                    0.5882529020309448}, {-1.1400552988052368`, 
                    0.48360323905944824`, -0.0822700560092926, \
-0.4636894762516022}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020308714359998703`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.6304903030395508, -0.17651955783367157`, \
-0.46612972021102905`, 0.6061276793479919}, {-0.4681702256202698, 
                    0.5416781306266785, 
                    0.5326633453369141, -0.21141549944877625`}, {
                    0.095125213265419, 1.1963318586349487`, 
                    0.6131061911582947, 
                    0.16446593403816223`}, {-0.04447731375694275, 
                    0.8583840727806091, -0.6535158157348633, \
-0.8978548645973206}}], "Biases" -> 
                    RawArray["Real32",{0., -0.02120339125394821, 
                    0.02140180952847004, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.4623880088329315, 
                    0.9883906841278076, -0.6045739054679871, \
-0.1552111953496933}, {-0.6422726511955261, 
                    0.015349535271525383`, -0.8583002686500549, \
-0.9189561009407043}, {-0.6069546937942505, 
                    0.2909195125102997, -0.3387618958950043, \
-0.2795550227165222}, {-1.1471445560455322`, -0.769105076789856, 
                    0.006018396466970444, 1.1222515106201172`}}], "Biases" -> 
                    RawArray["Real32",{-0.02127707563340664, 0., 
                    0., -0.0055557615123689175`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.03880154713988304, 
                    0.1930888295173645, -0.2744407653808594, 
                    0.9316576719284058}, {
                    1.04044508934021, -0.5252693295478821, 
                    1.1132738590240479`, -0.17558589577674866`}, {
                    0.23562754690647125`, -0.11817649751901627`, \
-0.8234222531318665, -0.994630753993988}, {
                    1.1251013278961182`, -0.18200336396694183`, 
                    0.7495065927505493, 0.5922220349311829}}], "Biases" -> 
                    RawArray["Real32",{-0.008491064421832561, 
                    0.0037082810886204243`, -0.00048256112495437264`, \
-0.013342808000743389`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.5927290916442871, -0.5807473659515381, 
                    0.04569912701845169, 0.5453850030899048}, {
                    0.3536730706691742, -0.3382004201412201, 
                    0.3208562731742859, -1.1065701246261597`}, \
{-0.043284542858600616`, 0.31835034489631653`, 0.22545592486858368`, 
                    1.1699867248535156`}, {0.4927527606487274, 
                    0.26720207929611206`, -0.5632683038711548, \
-0.3714267313480377}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008471638895571232, -0.006288113072514534, \
-0.024764614179730415`, -0.002935498021543026}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8400803208351135, -0.2918619215488434, \
-0.36224615573883057`, -0.4248539209365845}, {0.21804450452327728`, 
                    0.6871101260185242, -0.09039194136857986, 
                    0.6381481289863586}, {-0.017969254404306412`, \
-0.2533146142959595, -0.5403133630752563, -0.6244195699691772}, \
{-0.557862401008606, -0.3409421443939209, -0.08292922377586365, 
                    0.37390872836112976`}}], "Biases" -> 
                    RawArray["Real32",{0.14098723232746124`, 
                    0., -0.1755669116973877, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.0340676307678223`, 1., 
                    0.9480414390563965, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.11188255250453949`, 
                    0., -0.03459589555859566, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.14253473281860352`, 
                    5.605193857299268*^-45, -0.17651954293251038`, 
                    5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.23329117894172668`, 
                    0.43448686599731445`}, {-0.5498430132865906, \
-0.2333453744649887}, {
                    0.127238467335701, -0.3405781686306}, \
{-1.3462013006210327`, -1.2543599605560303`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.032579317688941956`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.1024048328399658`, 
                    0.7728956937789917, -0.06355833262205124, 
                    1.0792820453643799`}, {-0.6330763697624207, \
-0.6129856109619141, -0.6057496070861816, -0.7020090818405151}, {
                    0.3616458475589752, -0.8576364517211914, \
-0.05248260870575905, 0.8957068920135498}, {-0.8764091730117798, 
                    0.6311792731285095, 
                    0.5927261710166931, -0.298856258392334}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.03286946564912796}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.24815647304058075`, -0.37761324644088745`, \
-1.100022554397583, 
                    0.6481032371520996}, {-0.6488040685653687, \
-0.679099977016449, 
                    0.2214793711900711, -0.601083517074585}, \
{-1.1225425004959106`, 
                    1.0572394132614136`, -1.221137523651123, \
-0.21756841242313385`}, {-0.34284016489982605`, -0.961559534072876, \
-0.9971440434455872, -0.7323741912841797}}], "Biases" -> 
                    RawArray["Real32",{-0.0331658273935318, 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.2651151418685913, -0.8428170680999756, 
                    0.4288094937801361, -0.6984238624572754}, \
{-0.36055707931518555`, -0.40606963634490967`, 
                    0.18076859414577484`, -0.8186793923377991}, {
                    0.3470284640789032, -0.7862091660499573, 
                    1.0312302112579346`, -1.1828734874725342`}, \
{-0.7150039672851562, 0.02474166825413704, 0.4519364535808563, 
                    0.24253782629966736`}}], "Biases" -> 
                    RawArray["Real32",{0.04722980037331581, 
                    0., -0.07259402424097061, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.49899449944496155`, -1.1440858840942383`, \
-0.5056160688400269, -0.9733536243438721}, {-0.9348592758178711, \
-0.2542707324028015, 1.079600214958191, 
                    0.0029605808667838573`}, {-0.3890341520309448, \
-0.12657929956912994`, 0.02132675051689148, -0.4675881266593933}, {
                    0.5685173869132996, -0.45166826248168945`, \
-0.9953811764717102, -0.35574910044670105`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008726036176085472, -0.050475168973207474`, 
                    0., 0.01855863258242607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.8794720768928528, 
                    0.45291027426719666`, -1.1260080337524414`, \
-0.4375465512275696}, {-0.5684416890144348, 
                    0.4649476706981659, -0.24840471148490906`, \
-0.28038305044174194`}, {-0.8279221653938293, 
                    0.4214527904987335, -0.2367471605539322, \
-1.2243705987930298`}, {-0.17251811921596527`, 0.9857721328735352, 
                    1.1452807188034058`, 0.36024707555770874`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.011650129221379757`, -0.01572592556476593, \
-0.012774167582392693`, -0.030365219339728355`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.327743262052536, 0.7532622814178467,
                     0.7607889175415039, 
                    1.1032756567001343`}, {-0.2636410892009735, \
-0.13159549236297607`, -0.22760000824928284`, -0.846391499042511}, {
                    0.08058207482099533, -0.8095343708992004, 
                    0.5150863528251648, 0.1342550665140152}, {
                    0.8215001821517944, 
                    0.5603652000427246, -0.7315725088119507, 
                    0.8480975031852722}}], "Biases" -> 
                    RawArray["Real32",{-0.026365989819169044`, 
                    0., -0.0005013612098991871, -0.044547807425260544`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.32944807410240173`, 
                    0.5410114526748657, -0.7933152914047241, \
-0.8292582631111145}, {0.4512331187725067, -0.12782202661037445`, 
                    0.023232072591781616`, 0.8463086485862732}, {
                    0.5111056566238403, 0.8652687668800354, 
                    0.7632277011871338, 0.24700802564620972`}, {
                    0.13815216720104218`, -0.7928653359413147, 
                    0.38433071970939636`, -0.7218269109725952}}], "Biases" -> 
                    RawArray["Real32",{0., -0.01726776547729969, 
                    0., -0.03475910797715187}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0376012325286865`, 1., 
                    0.952485203742981}], "Biases" -> 
                    RawArray["Real32",{0., 0.07142296433448792, 0., 
                    0.35761305689811707`}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-5.605193857299268*^-45, -0.017946388572454453`,
                     5.605193857299268*^-45, -0.034391891211271286`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.8957763910293579, 
                    0.3623362183570862}, {-0.174520343542099, 
                    0.9252927303314209}, {-0.1321897804737091, 
                    1.408540964126587}, {-0.429532915353775, 
                    0.6881443858146667}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.9142180681228638, -0.3998311460018158, 
                    0.373794823884964, -0.8428809642791748}, \
{-1.013462781906128, -0.9153012633323669, 
                    1.2214096784591675`, -0.8198782205581665}, {
                    0.05613064020872116, -1.1520932912826538`, \
-0.2508637011051178, 1.1238369941711426`}, {0.9063417315483093, 
                    0.021235918626189232`, 1.1031527519226074`, 
                    0.7188641428947449}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.09319031983613968, 
                    1.0391968488693237`, 
                    0.270325243473053, -0.6375017166137695}, {
                    0.9597233533859253, -0.16874465346336365`, 
                    0.22008773684501648`, -1.0515003204345703`}, \
{-0.6845393776893616, -0.9731258153915405, -0.014127678237855434`, \
-0.6081287860870361}, {-1.1281071901321411`, -0.6320348381996155, \
-0.7507789731025696, -0.836697518825531}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.1619548201560974, 
                    0.6321669816970825, -0.12518945336341858`, \
-0.8754209280014038}, {0.42449310421943665`, 0.09920264780521393, 
                    1.120271921157837, -0.2694827914237976}, {
                    0.7911468744277954, 
                    0.107190802693367, -0.15914228558540344`, \
-0.7212669253349304}, {
                    0.45065775513648987`, -0.7895684242248535, \
-0.5509428977966309, -0.7949679493904114}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.7017349004745483, -0.5246540307998657, 
                    0.44179415702819824`, 
                    0.9635450839996338}, {-1.0937368869781494`, 
                    0.3026067614555359, 0.6850050687789917, 
                    0.3425700068473816}, {-0.1728016585111618, \
-0.728571355342865, -0.5919033288955688, 
                    0.519510805606842}, {-0.3456636965274811, \
-0.5398943424224854, 1.1310919523239136`, -0.7293530106544495}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.3090231418609619, -1.064344882965088, 
                    0.8869056701660156, 0.5164023041725159}, {
                    1.1150511503219604`, 
                    1.074715256690979, -1.0552726984024048`, 
                    0.646506130695343}, {-0.9056016802787781, \
-0.989912748336792, -0.6263928413391113, 0.06015612930059433}, {
                    1.0773271322250366`, 
                    0.3191694915294647, -0.6086782813072205, \
-1.1192924976348877`}}], "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.9385467171669006, -0.9668304920196533, \
-0.26482826471328735`, -0.07200281322002411}, {-0.7782991528511047, \
-0.7488662004470825, -0.847709059715271, 
                    0.68807452917099}, {-0.8480285406112671, 
                    0.22617769241333008`, 
                    0.7120975255966187, -1.198423147201538}, \
{-1.0725282430648804`, 1.0682932138442993`, 
                    0.7012400031089783, -0.7183460593223572}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.5295577049255371, 
                    0.3512469232082367, 
                    0.2275642305612564, -0.06166284903883934}, \
{-0.7875308990478516, -0.5696789622306824, -0.6910265684127808, 
                    0.08407719433307648}, {0.25443747639656067`, 
                    0.8309063911437988, 0.7666983008384705, 
                    0.2845258116722107}, {-0.8493523001670837, 
                    0.3944772183895111, 0.11803640425205231`, 
                    0.08188746124505997}}], "Biases" -> 
                    RawArray["Real32",{-0.15906153619289398`, 0., 
                    0.017862647771835327`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.1062151193618774`, 1., 
                    1.0263330936431885`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.08614708483219147, 
                    0., -0.03560680150985718, 0.}], "MovingMean" -> 
                    RawArray["Real32",{-0.1589561104774475, 0., 
                    0.01827838644385338, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-1.0055826902389526`, -0.9614297151565552}, {
                    0.9427697658538818, -0.7433678507804871}, \
{-0.4351021945476532, 0.04881863296031952}, {-0.9517213106155396, 
                    0.9961529970169067}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.19117866456508636`, 
                    0.27121517062187195`, -0.1893296241760254, \
-0.4572905898094177}, {0.708571195602417, 0.16505128145217896`, 
                    1.0478155612945557`, -0.656966507434845}, {
                    0.29914435744285583`, -0.7274119257926941, 
                    1.0795044898986816`, -0.7368828058242798}, {
                    0.6509546637535095, -0.9017858505249023, 
                    0.14681188762187958`, -0.6649592518806458}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.46432384848594666`, 
                    0.908102810382843, 1.0478026866912842`, 
                    0.8622851967811584}, {-0.21355552971363068`, \
-0.2557402551174164, -1.1127070188522339`, 
                    0.6246770024299622}, {-0.7064324021339417, \
-0.29214048385620117`, -0.30093252658843994`, -0.7913140058517456}, \
{-0.2682134807109833, -1.0217411518096924`, -1.0430132150650024`, 
                    1.1392306089401245`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.6836269497871399, -0.30448874831199646`, \
-0.5775110125541687, 
                    0.4721684455871582}, {-0.570763349533081, \
-0.8921632170677185, 
                    0.4863985776901245, -1.2229053974151611`}, \
{-0.4215686619281769, -0.9302003383636475, -0.7996142506599426, 
                    1.215777039527893}, {-0.6872756481170654, \
-0.6428603529930115, 0.386488676071167, -0.9340691566467285}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.531825840473175, 
                    1.0124754905700684`, -0.9074230194091797, \
-0.7805092334747314}, {
                    1.098265528678894, -0.24796715378761292`, \
-0.11630570888519287`, -0.8168771266937256}, {
                    0.8796766996383667, -0.18376733362674713`, \
-0.03014848753809929, 0.46239835023880005`}, {
                    0.8197591304779053, -0.939045786857605, \
-0.5731520652770996, -0.3073666989803314}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.06325596570968628, 
                    1.1152753829956055`, -0.6454733610153198, 
                    0.887650191783905}, {0.5683873295783997, 
                    0.2518492341041565, -0.9079412817955017, \
-0.963146984577179}, {0.13283513486385345`, 
                    0.7189369797706604, -0.33037254214286804`, 
                    0.0840630754828453}, {0.07897438108921051, 
                    0.08171245455741882, -0.33058255910873413`, 
                    0.11540823429822922`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.4389474391937256, 
                    0.7196488976478577, 0.09832611680030823, 
                    0.6244978308677673}, {-0.3684132695198059, \
-0.5929128527641296, -0.20331576466560364`, 
                    1.0255637168884277`}, {-0.1422601044178009, 
                    0.8687633872032166, -0.3134025037288666, \
-0.8768927454948425}, {-0.3123319447040558, 0.13173586130142212`, 
                    1.1398409605026245`, -0.04513677582144737}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.28371381759643555`, -0.022410541772842407`, \
-0.7774190902709961, 0.5423662662506104}, {
                    0.4330427944660187, -0.6156600117683411, 
                    0.3195442855358124, -0.852202832698822}, {
                    0.4456996023654938, 0.6105488538742065, 
                    0.7942044138908386, 
                    0.6567155122756958}, {-0.33267030119895935`, 
                    0.09951091557741165, 0.2645964026451111, 
                    0.2095808982849121}}], "Biases" -> 
                    RawArray["Real32",{0., 0.17369158565998077`, 0., 
                    0.09452357888221741}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.1056221723556519`, 1., 
                    0.9821265339851379}], "Biases" -> 
                    RawArray["Real32",{0., -0.010287722572684288`, 0., 
                    0.36241286993026733`}], "MovingMean" -> 
                    RawArray["Real32",{0., 0.1741284281015396, 0., 
                    0.09339499473571777}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.28040042519569397`, 
                    0.8754277229309082}, {-0.1258702576160431, 
                    0.9857667088508606}, {-1.380333662033081, \
-0.5188001990318298}, {1.0989738702774048`, -1.3736345767974854`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.22989614307880402`, -0.24420808255672455`, \
-0.07359588891267776, -0.011434712447226048`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.8308497667312622, 
                    0.5850459933280945, 0.55536288022995, 
                    0.2275981903076172}, {-0.45424148440361023`, \
-1.0565913915634155`, 
                    0.9683523178100586, -0.6303821206092834}, \
{-0.75920170545578, -0.9600221514701843, -0.5091850757598877, 
                    
                    1.1499882936477661`}, {-1.1887308359146118`, \
-0.31259822845458984`, 0.8612467050552368, 0.24493707716464996`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.2655591368675232, -0.0065243481658399105`, 
                    0.021921809762716293`, 0.014092521741986275`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.19533894956111908`, -1.0829535722732544`, 
                    0.9076451659202576, 
                    0.7930638790130615}, {-0.16771440207958221`, 
                    1.153153419494629, 
                    0.2588096559047699, -0.39757826924324036`}, {
                    0.42902880907058716`, -0.5507331490516663, \
-0.8617340326309204, -1.2063547372817993`}, {-0.9219340682029724, \
-1.0360429286956787`, -1.0778638124465942`, 0.49378475546836853`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0036274082958698273`, -0.07150954008102417, \
-0.14796485006809235`, -0.008579540997743607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2615041136741638, 
                    0.21138696372509003`, -0.9717984199523926, \
-0.39667075872421265`}, {-0.4116203188896179, 
                    0.5252212882041931, -0.4073011875152588, \
-0.8352898955345154}, {0.569722592830658, 0.043254997581243515`, 
                    1.390390396118164, 
                    1.1961472034454346`}, {-0.2173124998807907, 
                    1.1219031810760498`, -0.05218074470758438, \
-0.5121939182281494}}], "Biases" -> 
                    RawArray["Real32",{
                    0.1688094139099121, -0.015401605516672134`, \
-0.047859013080596924`, -0.023609118536114693`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.4043121337890625`, 
                    0.989319920539856, 0.8493707180023193, 
                    0.3664087951183319}, {-0.00433536758646369, \
-1.148911952972412, 
                    0.8351345658302307, -0.5400360822677612}, \
{-0.5725638270378113, 
                    0.5460139513015747, -0.001732580829411745, \
-0.7900643944740295}, {-0.6436707973480225, -0.3394011855125427, \
-1.2217543125152588`, -0.8703947067260742}}], "Biases" -> 
                    RawArray["Real32",{
                    0.03309731185436249, -0.061290040612220764`, \
-0.003327625570818782, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7225061655044556, 
                    0.7556267976760864, 
                    0.2262432724237442, -0.1884404867887497}, \
{-0.36302366852760315`, -0.2926149070262909, -0.7215145826339722, 
                    0.20516319572925568`}, {0.7662841081619263, 
                    0.3093644082546234, 0.1925813853740692, 
                    0.39481011033058167`}, {-0.16232548654079437`, 
                    0.8706628680229187, -1.236894130706787, \
-0.8296151161193848}}], "Biases" -> 
                    RawArray["Real32",{0.01828683353960514, 0., 
                    0.15081633627414703`, -0.45662227272987366`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7094109654426575, -0.700827419757843, 
                    0.5683406591415405, 
                    0.3210662305355072}, {-1.219648838043213, 
                    0.5808302164077759, -0.19560769200325012`, \
-0.6605221629142761}, {-0.3890421986579895, -0.03711126372218132, 
                    0.6946619153022766, -0.993706464767456}, {
                    0.6287885904312134, 0.7380457520484924, 
                    0.08613798022270203, 1.0832852125167847`}}], "Biases" -> 
                    RawArray["Real32",{0.23517915606498718`, 0., 
                    0.14619426429271698`, 0.09177739173173904}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.21444521844387054`, -0.7537563443183899, 
                    0.8711041808128357, 
                    0.8564229011535645}, {-0.007904307916760445, \
-0.5445233583450317, 0.4207858741283417, 
                    0.0682104229927063}, {-0.3529924750328064, \
-0.5852335691452026, -0.21044248342514038`, 0.003850610926747322}, {
                    0.08303238451480865, 
                    0.5906074643135071, -0.15651191771030426`, 
                    0.25543975830078125`}}], "Biases" -> 
                    RawArray["Real32",{-0.0009580579353496432, 
                    0., -0.013556385412812233`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.04379437118768692, 1., 
                    0.04486582428216934, 1.}], "Biases" -> 
                    RawArray["Real32",{0.4153086245059967, 0., 
                    0.1518605500459671, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.520790696144104, 
                    0.11277378350496292`, -0.12201576679944992`, 
                    0.10225825011730194`}], "MovingVariance" -> 
                    RawArray["Real32",{0.06241406872868538, 
                    0.0012842623982578516`, 0.0028616664931178093`, 
                    0.009552285075187683}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}]], 
         "Edges" -> {
          NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Wcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Wcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Wcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath["Outputs", "X_out"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Wcore_net", "Outputs", "X_out"]}], 
        Association["Version" -> "12.0.10", "Unstable" -> False]], 
      "Processor" -> MachineLearning`MLProcessor["Center", 
        Association[
        "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Mean" -> {-0.00011694978920109752`, 0.00007700457070020814}, 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Version" -> {12., 0}, "ID" -> 5267004855378899174]], 
      "PostProcessor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "ProbabilityNet" -> NetGraph[
        Association[
        "Type" -> "Graph", "Inputs" -> 
         Association[
          "checker_b" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "checker_w" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Total_Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
           "Z_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Nodes" -> Association[
          "coupling_1" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.28040042519569397`, 
                    0.8754277229309082}, {-0.1258702576160431, 
                    0.9857667088508606}, {-1.380333662033081, \
-0.5188001990318298}, {1.0989738702774048`, -1.3736345767974854`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.22989614307880402`, -0.24420808255672455`, \
-0.07359588891267776, -0.011434712447226048`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.8308497667312622, 
                    0.5850459933280945, 0.55536288022995, 
                    0.2275981903076172}, {-0.45424148440361023`, \
-1.0565913915634155`, 
                    0.9683523178100586, -0.6303821206092834}, \
{-0.75920170545578, -0.9600221514701843, -0.5091850757598877, 
                    1.1499882936477661`}, {-1.1887308359146118`, \
-0.31259822845458984`, 0.8612467050552368, 0.24493707716464996`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.2655591368675232, -0.0065243481658399105`, 
                    0.021921809762716293`, 0.014092521741986275`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.19533894956111908`, -1.0829535722732544`, 
                    0.9076451659202576, 
                    0.7930638790130615}, {-0.16771440207958221`, 
                    1.153153419494629, 
                    0.2588096559047699, -0.39757826924324036`}, {
                    0.42902880907058716`, -0.5507331490516663, \
-0.8617340326309204, -1.2063547372817993`}, {-0.9219340682029724, \
-1.0360429286956787`, -1.0778638124465942`, 0.49378475546836853`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0036274082958698273`, -0.07150954008102417, \
-0.14796485006809235`, -0.008579540997743607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2615041136741638, 
                    0.21138696372509003`, -0.9717984199523926, \
-0.39667075872421265`}, {-0.4116203188896179, 
                    0.5252212882041931, -0.4073011875152588, \
-0.8352898955345154}, {0.569722592830658, 0.043254997581243515`, 
                    1.390390396118164, 
                    1.1961472034454346`}, {-0.2173124998807907, 
                    1.1219031810760498`, -0.05218074470758438, \
-0.5121939182281494}}], "Biases" -> 
                    RawArray["Real32",{
                    0.1688094139099121, -0.015401605516672134`, \
-0.047859013080596924`, -0.023609118536114693`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.4043121337890625`, 
                    0.989319920539856, 0.8493707180023193, 
                    0.3664087951183319}, {-0.00433536758646369, \
-1.148911952972412, 
                    0.8351345658302307, -0.5400360822677612}, \
{-0.5725638270378113, 
                    0.5460139513015747, -0.001732580829411745, \
-0.7900643944740295}, {-0.6436707973480225, -0.3394011855125427, \
-1.2217543125152588`, -0.8703947067260742}}], "Biases" -> 
                    RawArray["Real32",{
                    0.03309731185436249, -0.061290040612220764`, \
-0.003327625570818782, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7225061655044556, 
                    0.7556267976760864, 
                    0.2262432724237442, -0.1884404867887497}, \
{-0.36302366852760315`, -0.2926149070262909, -0.7215145826339722, 
                    0.20516319572925568`}, {0.7662841081619263, 
                    0.3093644082546234, 0.1925813853740692, 
                    0.39481011033058167`}, {-0.16232548654079437`, 
                    0.8706628680229187, -1.236894130706787, \
-0.8296151161193848}}], "Biases" -> 
                    RawArray["Real32",{0.01828683353960514, 0., 
                    0.15081633627414703`, -0.45662227272987366`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7094109654426575, -0.700827419757843, 
                    0.5683406591415405, 
                    0.3210662305355072}, {-1.219648838043213, 
                    0.5808302164077759, -0.19560769200325012`, \
-0.6605221629142761}, {-0.3890421986579895, -0.03711126372218132, 
                    0.6946619153022766, -0.993706464767456}, {
                    0.6287885904312134, 0.7380457520484924, 
                    0.08613798022270203, 1.0832852125167847`}}], "Biases" -> 
                    RawArray["Real32",{0.23517915606498718`, 0., 
                    0.14619426429271698`, 0.09177739173173904}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.21444521844387054`, -0.7537563443183899, 
                    0.8711041808128357, 
                    0.8564229011535645}, {-0.007904307916760445, \
-0.5445233583450317, 0.4207858741283417, 
                    0.0682104229927063}, {-0.3529924750328064, \
-0.5852335691452026, -0.21044248342514038`, 0.003850610926747322}, {
                    0.08303238451480865, 
                    0.5906074643135071, -0.15651191771030426`, 
                    0.25543975830078125`}}], "Biases" -> 
                    RawArray["Real32",{-0.0009580579353496432, 
                    0., -0.013556385412812233`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.04379437118768692, 1., 
                    0.04486582428216934, 1.}], "Biases" -> 
                    RawArray["Real32",{0.4153086245059967, 0., 
                    0.1518605500459671, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.520790696144104, 
                    0.11277378350496292`, -0.12201576679944992`, 
                    0.10225825011730194`}], "MovingVariance" -> 
                    RawArray["Real32",{0.06241406872868538, 
                    0.0012842623982578516`, 0.0028616664931178093`, 
                    0.009552285075187683}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-1.0055826902389526`, -0.9614297151565552}, {
                    0.9427697658538818, -0.7433678507804871}, \
{-0.4351021945476532, 0.04881863296031952}, {-0.9517213106155396, 
                    0.9961529970169067}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.19117866456508636`, 
                    0.27121517062187195`, -0.1893296241760254, \
-0.4572905898094177}, {0.708571195602417, 0.16505128145217896`, 
                    1.0478155612945557`, -0.656966507434845}, {
                    0.29914435744285583`, -0.7274119257926941, 
                    1.0795044898986816`, -0.7368828058242798}, {
                    0.6509546637535095, -0.9017858505249023, 
                    0.14681188762187958`, -0.6649592518806458}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.46432384848594666`, 
                    0.908102810382843, 1.0478026866912842`, 
                    0.8622851967811584}, {-0.21355552971363068`, \
-0.2557402551174164, -1.1127070188522339`, 
                    0.6246770024299622}, {-0.7064324021339417, \
-0.29214048385620117`, -0.30093252658843994`, -0.7913140058517456}, \
{-0.2682134807109833, -1.0217411518096924`, -1.0430132150650024`, 
                    1.1392306089401245`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.6836269497871399, -0.30448874831199646`, \
-0.5775110125541687, 
                    0.4721684455871582}, {-0.570763349533081, \
-0.8921632170677185, 
                    0.4863985776901245, -1.2229053974151611`}, \
{-0.4215686619281769, -0.9302003383636475, -0.7996142506599426, 
                    1.215777039527893}, {-0.6872756481170654, \
-0.6428603529930115, 0.386488676071167, -0.9340691566467285}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.531825840473175, 
                    1.0124754905700684`, -0.9074230194091797, \
-0.7805092334747314}, {
                    1.098265528678894, -0.24796715378761292`, \
-0.11630570888519287`, -0.8168771266937256}, {
                    0.8796766996383667, -0.18376733362674713`, \
-0.03014848753809929, 0.46239835023880005`}, {
                    0.8197591304779053, -0.939045786857605, \
-0.5731520652770996, -0.3073666989803314}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.06325596570968628, 
                    1.1152753829956055`, -0.6454733610153198, 
                    0.887650191783905}, {0.5683873295783997, 
                    0.2518492341041565, -0.9079412817955017, \
-0.963146984577179}, {0.13283513486385345`, 
                    0.7189369797706604, -0.33037254214286804`, 
                    0.0840630754828453}, {0.07897438108921051, 
                    0.08171245455741882, -0.33058255910873413`, 
                    0.11540823429822922`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.4389474391937256, 
                    0.7196488976478577, 0.09832611680030823, 
                    0.6244978308677673}, {-0.3684132695198059, \
-0.5929128527641296, -0.20331576466560364`, 
                    1.0255637168884277`}, {-0.1422601044178009, 
                    0.8687633872032166, -0.3134025037288666, \
-0.8768927454948425}, {-0.3123319447040558, 0.13173586130142212`, 
                    1.1398409605026245`, -0.04513677582144737}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.28371381759643555`, -0.022410541772842407`, \
-0.7774190902709961, 0.5423662662506104}, {
                    0.4330427944660187, -0.6156600117683411, 
                    0.3195442855358124, -0.852202832698822}, {
                    0.4456996023654938, 0.6105488538742065, 
                    0.7942044138908386, 
                    0.6567155122756958}, {-0.33267030119895935`, 
                    0.09951091557741165, 0.2645964026451111, 
                    0.2095808982849121}}], "Biases" -> 
                    RawArray["Real32",{0., 0.17369158565998077`, 0., 
                    0.09452357888221741}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.1056221723556519`, 1., 
                    0.9821265339851379}], "Biases" -> 
                    RawArray["Real32",{0., -0.010287722572684288`, 0., 
                    0.36241286993026733`}], "MovingMean" -> 
                    RawArray["Real32",{0., 0.1741284281015396, 0., 
                    0.09339499473571777}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.8957763910293579, 
                    0.3623362183570862}, {-0.174520343542099, 
                    0.9252927303314209}, {-0.1321897804737091, 
                    1.408540964126587}, {-0.429532915353775, 
                    0.6881443858146667}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.9142180681228638, -0.3998311460018158, 
                    0.373794823884964, -0.8428809642791748}, \
{-1.013462781906128, -0.9153012633323669, 
                    1.2214096784591675`, -0.8198782205581665}, {
                    0.05613064020872116, -1.1520932912826538`, \
-0.2508637011051178, 1.1238369941711426`}, {0.9063417315483093, 
                    0.021235918626189232`, 1.1031527519226074`, 
                    0.7188641428947449}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.09319031983613968, 
                    1.0391968488693237`, 
                    0.270325243473053, -0.6375017166137695}, {
                    0.9597233533859253, -0.16874465346336365`, 
                    0.22008773684501648`, -1.0515003204345703`}, \
{-0.6845393776893616, -0.9731258153915405, -0.014127678237855434`, \
-0.6081287860870361}, {-1.1281071901321411`, -0.6320348381996155, \
-0.7507789731025696, -0.836697518825531}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.1619548201560974, 
                    0.6321669816970825, -0.12518945336341858`, \
-0.8754209280014038}, {0.42449310421943665`, 0.09920264780521393, 
                    1.120271921157837, -0.2694827914237976}, {
                    0.7911468744277954, 
                    0.107190802693367, -0.15914228558540344`, \
-0.7212669253349304}, {
                    0.45065775513648987`, -0.7895684242248535, \
-0.5509428977966309, -0.7949679493904114}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.7017349004745483, -0.5246540307998657, 
                    0.44179415702819824`, 
                    0.9635450839996338}, {-1.0937368869781494`, 
                    0.3026067614555359, 0.6850050687789917, 
                    0.3425700068473816}, {-0.1728016585111618, \
-0.728571355342865, -0.5919033288955688, 
                    0.519510805606842}, {-0.3456636965274811, \
-0.5398943424224854, 1.1310919523239136`, -0.7293530106544495}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.3090231418609619, -1.064344882965088, 
                    0.8869056701660156, 0.5164023041725159}, {
                    1.1150511503219604`, 
                    1.074715256690979, -1.0552726984024048`, 
                    0.646506130695343}, {-0.9056016802787781, \
-0.989912748336792, -0.6263928413391113, 0.06015612930059433}, {
                    1.0773271322250366`, 
                    0.3191694915294647, -0.6086782813072205, \
-1.1192924976348877`}}], "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.9385467171669006, -0.9668304920196533, \
-0.26482826471328735`, -0.07200281322002411}, {-0.7782991528511047, \
-0.7488662004470825, -0.847709059715271, 
                    0.68807452917099}, {-0.8480285406112671, 
                    0.22617769241333008`, 
                    0.7120975255966187, -1.198423147201538}, \
{-1.0725282430648804`, 1.0682932138442993`, 
                    0.7012400031089783, -0.7183460593223572}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.5295577049255371, 
                    0.3512469232082367, 
                    0.2275642305612564, -0.06166284903883934}, \
{-0.7875308990478516, -0.5696789622306824, -0.6910265684127808, 
                    0.08407719433307648}, {0.25443747639656067`, 
                    0.8309063911437988, 0.7666983008384705, 
                    0.2845258116722107}, {-0.8493523001670837, 
                    0.3944772183895111, 0.11803640425205231`, 
                    0.08188746124505997}}], "Biases" -> 
                    RawArray["Real32",{-0.15906153619289398`, 0., 
                    0.017862647771835327`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.1062151193618774`, 1., 
                    1.0263330936431885`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.08614708483219147, 
                    0., -0.03560680150985718, 0.}], "MovingMean" -> 
                    RawArray["Real32",{-0.1589561104774475, 0., 
                    0.01827838644385338, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.23329117894172668`, 
                    0.43448686599731445`}, {-0.5498430132865906, \
-0.2333453744649887}, {
                    0.127238467335701, -0.3405781686306}, \
{-1.3462013006210327`, -1.2543599605560303`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.032579317688941956`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.1024048328399658`, 
                    0.7728956937789917, -0.06355833262205124, 
                    1.0792820453643799`}, {-0.6330763697624207, \
-0.6129856109619141, -0.6057496070861816, -0.7020090818405151}, {
                    0.3616458475589752, -0.8576364517211914, \
-0.05248260870575905, 0.8957068920135498}, {-0.8764091730117798, 
                    0.6311792731285095, 
                    0.5927261710166931, -0.298856258392334}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.03286946564912796}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.24815647304058075`, -0.37761324644088745`, \
-1.100022554397583, 
                    0.6481032371520996}, {-0.6488040685653687, \
-0.679099977016449, 
                    0.2214793711900711, -0.601083517074585}, \
{-1.1225425004959106`, 
                    1.0572394132614136`, -1.221137523651123, \
-0.21756841242313385`}, {-0.34284016489982605`, -0.961559534072876, \
-0.9971440434455872, -0.7323741912841797}}], "Biases" -> 
                    RawArray["Real32",{-0.0331658273935318, 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.2651151418685913, -0.8428170680999756, 
                    0.4288094937801361, -0.6984238624572754}, \
{-0.36055707931518555`, -0.40606963634490967`, 
                    0.18076859414577484`, -0.8186793923377991}, {
                    0.3470284640789032, -0.7862091660499573, 
                    1.0312302112579346`, -1.1828734874725342`}, \
{-0.7150039672851562, 0.02474166825413704, 0.4519364535808563, 
                    0.24253782629966736`}}], "Biases" -> 
                    RawArray["Real32",{0.04722980037331581, 
                    0., -0.07259402424097061, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.49899449944496155`, -1.1440858840942383`, \
-0.5056160688400269, -0.9733536243438721}, {-0.9348592758178711, \
-0.2542707324028015, 1.079600214958191, 
                    0.0029605808667838573`}, {-0.3890341520309448, \
-0.12657929956912994`, 0.02132675051689148, -0.4675881266593933}, {
                    0.5685173869132996, -0.45166826248168945`, \
-0.9953811764717102, -0.35574910044670105`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008726036176085472, -0.050475168973207474`, 
                    0., 0.01855863258242607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.8794720768928528, 
                    0.45291027426719666`, -1.1260080337524414`, \
-0.4375465512275696}, {-0.5684416890144348, 
                    0.4649476706981659, -0.24840471148490906`, \
-0.28038305044174194`}, {-0.8279221653938293, 
                    0.4214527904987335, -0.2367471605539322, \
-1.2243705987930298`}, {-0.17251811921596527`, 0.9857721328735352, 
                    1.1452807188034058`, 0.36024707555770874`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.011650129221379757`, -0.01572592556476593, \
-0.012774167582392693`, -0.030365219339728355`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.327743262052536, 
                    0.7532622814178467, 0.7607889175415039, 
                    1.1032756567001343`}, {-0.2636410892009735, \
-0.13159549236297607`, -0.22760000824928284`, -0.846391499042511}, {
                    0.08058207482099533, -0.8095343708992004, 
                    0.5150863528251648, 0.1342550665140152}, {
                    0.8215001821517944, 
                    0.5603652000427246, -0.7315725088119507, 
                    0.8480975031852722}}], "Biases" -> 
                    RawArray["Real32",{-0.026365989819169044`, 
                    0., -0.0005013612098991871, -0.044547807425260544`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.32944807410240173`, 
                    0.5410114526748657, -0.7933152914047241, \
-0.8292582631111145}, {0.4512331187725067, -0.12782202661037445`, 
                    0.023232072591781616`, 0.8463086485862732}, {
                    0.5111056566238403, 0.8652687668800354, 
                    0.7632277011871338, 0.24700802564620972`}, {
                    0.13815216720104218`, -0.7928653359413147, 
                    0.38433071970939636`, -0.7218269109725952}}], "Biases" -> 
                    RawArray["Real32",{0., -0.01726776547729969, 
                    0., -0.03475910797715187}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0376012325286865`, 1., 
                    0.952485203742981}], "Biases" -> 
                    RawArray["Real32",{0., 0.07142296433448792, 0., 
                    0.35761305689811707`}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-5.605193857299268*^-45, -0.017946388572454453`,
                     5.605193857299268*^-45, -0.034391891211271286`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "coupling_2" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.0272393226623535`, 
                    1.1851426362991333`}, {-1.1013171672821045`, 
                    1.3560041189193726`}, {-0.2645794451236725, 
                    0.8190812468528748}, {0.2288351058959961, 
                    0.5987197160720825}}], "Biases" -> 
                    RawArray["Real32",{0.020290987566113472`, 
                    0.02084389515221119, -0.020147942006587982`, \
-0.020126312971115112`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.24388974905014038`, 
                    0.4529878795146942, -1.1013665199279785`, \
-0.1728794127702713}, {
                    0.4499173164367676, -1.1148042678833008`, \
-0.5451153516769409, -0.17451262474060059`}, {-0.8063437938690186, \
-0.12459979951381683`, 1.1342663764953613`, 0.8231135010719299}, {
                    0.05881085246801376, -0.11509258300065994`, \
-1.204534888267517, 0.33516672253608704`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020205922424793243`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.32763224840164185`, -1.1029812097549438`, \
-1.1657968759536743`, 0.07768034934997559}, {
                    0.5615560412406921, -0.18220843374729156`, \
-0.6637734770774841, 1.1732587814331055`}, {0.5226121544837952, 
                    0.09836286306381226, 0.663692057132721, 
                    0.5882529020309448}, {-1.1400552988052368`, 
                    0.48360323905944824`, -0.0822700560092926, \
-0.4636894762516022}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020308714359998703`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.6304903030395508, -0.17651955783367157`, \
-0.46612972021102905`, 0.6061276793479919}, {-0.4681702256202698, 
                    0.5416781306266785, 
                    0.5326633453369141, -0.21141549944877625`}, {
                    0.095125213265419, 1.1963318586349487`, 
                    0.6131061911582947, 
                    0.16446593403816223`}, {-0.04447731375694275, 
                    0.8583840727806091, -0.6535158157348633, \
-0.8978548645973206}}], "Biases" -> 
                    RawArray["Real32",{0., -0.02120339125394821, 
                    0.02140180952847004, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.4623880088329315, 
                    0.9883906841278076, -0.6045739054679871, \
-0.1552111953496933}, {-0.6422726511955261, 
                    0.015349535271525383`, -0.8583002686500549, \
-0.9189561009407043}, {-0.6069546937942505, 
                    
                    0.2909195125102997, -0.3387618958950043, \
-0.2795550227165222}, {-1.1471445560455322`, -0.769105076789856, 
                    0.006018396466970444, 1.1222515106201172`}}], "Biases" -> 
                    RawArray["Real32",{-0.02127707563340664, 0., 
                    0., -0.0055557615123689175`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.03880154713988304, 
                    0.1930888295173645, -0.2744407653808594, 
                    0.9316576719284058}, {
                    1.04044508934021, -0.5252693295478821, 
                    1.1132738590240479`, -0.17558589577674866`}, {
                    0.23562754690647125`, -0.11817649751901627`, \
-0.8234222531318665, -0.994630753993988}, {
                    1.1251013278961182`, -0.18200336396694183`, 
                    0.7495065927505493, 0.5922220349311829}}], "Biases" -> 
                    RawArray["Real32",{-0.008491064421832561, 
                    
                    0.0037082810886204243`, -0.00048256112495437264`, \
-0.013342808000743389`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.5927290916442871, -0.5807473659515381, 
                    0.04569912701845169, 0.5453850030899048}, {
                    0.3536730706691742, -0.3382004201412201, 
                    0.3208562731742859, -1.1065701246261597`}, \
{-0.043284542858600616`, 0.31835034489631653`, 0.22545592486858368`, 
                    1.1699867248535156`}, {0.4927527606487274, 
                    0.26720207929611206`, -0.5632683038711548, \
-0.3714267313480377}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008471638895571232, -0.006288113072514534, \
-0.024764614179730415`, -0.002935498021543026}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8400803208351135, -0.2918619215488434, \
-0.36224615573883057`, -0.4248539209365845}, {0.21804450452327728`, 
                    0.6871101260185242, -0.09039194136857986, 
                    0.6381481289863586}, {-0.017969254404306412`, \
-0.2533146142959595, -0.5403133630752563, -0.6244195699691772}, \
{-0.557862401008606, -0.3409421443939209, -0.08292922377586365, 
                    0.37390872836112976`}}], "Biases" -> 
                    RawArray["Real32",{0.14098723232746124`, 
                    0., -0.1755669116973877, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.0340676307678223`, 1., 
                    0.9480414390563965, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.11188255250453949`, 
                    0., -0.03459589555859566, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.14253473281860352`, 
                    5.605193857299268*^-45, -0.17651954293251038`, 
                    5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.6247974634170532, 
                    1.0719972848892212`}, {-0.8147713541984558, \
-0.951488196849823}, {0.4458984434604645, 
                    1.009402871131897}, {-0.6509699821472168, 
                    0.6131016612052917}}], "Biases" -> 
                    RawArray["Real32",{-0.30463317036628723`, 
                    0.23118887841701508`, 
                    0.06617609411478043, -0.30046290159225464`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.308014988899231, 
                    0.41012367606163025`, 
                    1.1328684091567993`, -0.6759518980979919}, \
{-0.06172512471675873, -0.27633190155029297`, 1.1597766876220703`, 
                    1.054457664489746}, {
                    1.1483964920043945`, -1.1610616445541382`, \
-0.32596054673194885`, 1.2034265995025635`}, {
                    0.2506335377693176, -0.5807443261146545, 
                    0.09045513719320297, -0.3083084225654602}}], "Biases" -> 
                    RawArray["Real32",{
                    0.024193117395043373`, -0.22505512833595276`, \
-0.05639704689383507, 0.3493075966835022}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.2778819501399994, 
                    0.7496756315231323, 1.0025731325149536`, 
                    0.5138924717903137}, {-0.7969806790351868, \
-0.2784910798072815, -0.546769380569458, 0.6271833777427673}, {
                    0.5501472353935242, 1.320475697517395, 0.7035324573516846,
                     1.2081241607666016`}, {0.9598748087882996, 
                    0.6415534615516663, -1.3248586654663086`, 
                    0.24694617092609406`}}], "Biases" -> 
                    RawArray["Real32",{-0.17849385738372803`, 
                    0.2985064685344696, -0.1312658190727234, 
                    0.1636054366827011}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.2408421039581299`, 
                    0.6402130722999573, -0.5636037588119507, 
                    0.7157518267631531}, {
                    0.7387978434562683, -1.0216920375823975`, 
                    0.22834144532680511`, 0.30655571818351746`}, {
                    0.5690512657165527, -0.35685232281684875`, \
-0.41032058000564575`, -1.1276694536209106`}, {0.022032486274838448`, 
                    0.18081532418727875`, -0.7020317912101746, 
                    0.533079206943512}}], "Biases" -> 
                    RawArray["Real32",{
                    0.13038139045238495`, -0.26013192534446716`, \
-0.03431916981935501, 0.26744359731674194`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.884698212146759, -0.9137963056564331, \
-0.6820396184921265, -1.1969163417816162`}, {1.02857506275177, 
                    0.6642537713050842, 0.028140507638454437`, 
                    0.06875970214605331}, {-0.09183403104543686, 
                    0.0021497849375009537`, -0.2629159390926361, \
-0.16911469399929047`}, {0.6566782593727112, 0.6675363183021545, 
                    0.553555428981781, 1.0056182146072388`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.05621147155761719, -0.010769825428724289`, 
                    0.07819464057683945}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2057257890701294`, 
                    0.24814435839653015`, 1.1151946783065796`, 
                    0.49364256858825684`}, {-0.34746411442756653`, 
                    0.6987231373786926, 0.943751871585846, 
                    0.7946571707725525}, {
                    0.46374526619911194`, -0.4114575982093811, 
                    0.6955560445785522, 
                    0.3322679400444031}, {-0.47509536147117615`, \
-1.0886939764022827`, 0.07419174164533615, 0.6524626612663269}}], "Biases" -> 
                    RawArray["Real32",{
                    0.013026686385273933`, -0.007407285738736391, 
                    0.11372725665569305`, -0.07177607715129852}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.723952054977417, 
                    0.631230354309082, 0.07747747749090195, 
                    0.4074034094810486}, {-1.197285771369934, \
-0.5476441979408264, -0.5596575736999512, 
                    1.183302879333496}, {-0.8752565979957581, \
-0.4132252037525177, 0.293244332075119, 0.21619480848312378`}, {
                    0.4112408757209778, -0.07134272903203964, 
                    0.25418463349342346`, 0.15527468919754028`}}], "Biases" -> 
                    RawArray["Real32",{0.06009580194950104, 0., 0., 
                    0.009850728325545788}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.6709763407707214, -0.8419735431671143, \
-0.6108553409576416, 
                    0.31385189294815063`}, {-0.3921840488910675, \
-0.27944886684417725`, -0.44053006172180176`, 
                    0.30910852551460266`}, {-0.07277870178222656, 
                    0.5416227579116821, -0.749184787273407, \
-0.22155964374542236`}, {-0.03492600470781326, -0.5857563018798828, \
-0.289907842874527, -0.40806424617767334`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.03365085646510124, 0., 
                    0.04534592106938362}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.51395183801651, 1., 
                    0.9517407417297363}], "Biases" -> 
                    RawArray["Real32",{0., 0.2162855863571167, 
                    0., -0.33053067326545715`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.2486773431301117, -0.09127230942249298, \
-0.06003804877400398, -0.03530314937233925}], "MovingVariance" -> 
                    RawArray["Real32",{0.004154358524829149, 
                    0.00032402551732957363`, 0.00022630792227573693`, 
                    0.00040684040868654847`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.0232733488082886`, 
                    0.4123275578022003}, {-0.42913058400154114`, \
-0.7507485747337341}, {-0.6771546006202698, -0.42921799421310425`}, \
{-1.1501773595809937`, -0.5237459540367126}}], "Biases" -> 
                    RawArray["Real32",{-0.06611915677785873, 
                    0.38374435901641846`, -0.21494361758232117`, \
-0.08891620486974716}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.938681423664093, 
                    0.5236425399780273, -0.4462301731109619, 
                    0.7413621544837952}, {
                    0.36929574608802795`, -0.5489752292633057, \
-0.3339131772518158, 0.44864922761917114`}, {-0.6584511995315552, 
                    0.2634795606136322, 
                    1.1334044933319092`, -0.7523109912872314}, \
{-0.03542015701532364, -0.8779085874557495, -0.809063196182251, 
                    0.03728779777884483}}], "Biases" -> 
                    RawArray["Real32",{-0.10400308668613434`, 
                    0.2816414535045624, -0.09269170463085175, \
-0.004481355659663677}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.24621422588825226`, 
                    0.985656201839447, 0.09558389335870743, 
                    1.2012335062026978`}, {
                    0.7117063999176025, -0.4811817705631256, \
-0.2930569648742676, -0.07616393268108368}, {1.1045162677764893`, 
                    0.2911427617073059, -0.34115180373191833`, \
-0.8265060782432556}, {-0.9755216836929321, 0.4526450037956238, 
                    0.43766549229621887`, 0.5006574988365173}}], "Biases" -> 
                    RawArray["Real32",{0.013371359556913376`, 
                    0.04690810665488243, -0.03512047231197357, \
-0.1534721404314041}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.9985904693603516, 
                    0.3187827467918396, -1.0587326288223267`, \
-1.0089114904403687`}, {
                    0.43743884563446045`, -0.15510369837284088`, \
-0.9138410687446594, 0.3631367087364197}, {
                    0.9080770611763, -0.3844505250453949, 
                    0.6118550896644592, -0.5183600187301636}, {
                    0.6724507212638855, 0.93711918592453, 0.4640797972679138, 
                    0.9890212416648865}}], "Biases" -> 
                    RawArray["Real32",{
                    0.027951490134000778`, -0.10686809569597244`, 
                    0.013608737848699093`, -0.06892822682857513}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2668100893497467, 
                    0.15058819949626923`, -1.1104614734649658`, 
                    0.03640010580420494}, {-0.13042515516281128`, 
                    0.7564303874969482, 
                    0.006577329710125923, -0.6690428853034973}, \
{-0.5001853704452515, 0.4691876769065857, 
                    0.7996487021446228, -0.14533911645412445`}, {
                    0.4526841938495636, 0.8468631505966187, 
                    0.09007269889116287, -0.23484553396701813`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0052228025160729885`, -0.005015995819121599, 
                    0.04361181706190109, 0.20404070615768433`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.1011145114898682`, 
                    0.7110188603401184, 0.5675764083862305, 
                    0.9290199875831604}, {
                    0.22922439873218536`, -0.3610682487487793, 
                    0.17099426686763763`, 0.6951537132263184}, {
                    0.3940970301628113, 0.389936625957489, 
                    0.21339713037014008`, -0.9525924921035767}, {
                    0.40970227122306824`, -0.8975924849510193, 
                    1.0971708297729492`, 0.16968782246112823`}}], "Biases" -> 
                    RawArray["Real32",{0.0006359686376526952, 
                    0.025261353701353073`, -0.20041799545288086`, \
-0.0014764054212719202`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6824387907981873, 
                    0.1007201224565506, -0.13071443140506744`, \
-0.9145658612251282}, {-0.2611132264137268, -0.4049318730831146, \
-0.3291284143924713, -0.40765678882598877`}, {0.4567570090293884, 
                    0.23558172583580017`, 0.21312430500984192`, 
                    0.0910617858171463}, {0.15193194150924683`, 
                    0.8316170573234558, -0.14471234381198883`, \
-0.26284971833229065`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0.00010937114711850882`, 
                    0.01756111904978752}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.5749830007553101, -0.5930800437927246, 
                    0.07424910366535187, 0.11974163353443146`}, {
                    0.5756600499153137, 0.14637413620948792`, 
                    0.6387523412704468, -0.14677976071834564`}, {
                    0.6429774165153503, 0.32796573638916016`, 
                    0.5578079223632812, -0.08706668764352798}, {
                    0.7294813394546509, -0.5185415148735046, \
-0.3751922845840454, -0.19885247945785522`}}], "Biases" -> 
                    RawArray["Real32",{0.10288982093334198`, 
                    0., -0.053429532796144485`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.7660358548164368, 1., 
                    0.6746312379837036, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.1611233502626419, 
                    0., -0.16056616604328156`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.1324150562286377, 
                    0.14110837876796722`, 
                    0.07327874004840851, -0.11011964827775955`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00007790406380081549, 
                    0.004116098862141371, 0.0031010578386485577`, 
                    0.001395107712596655}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6084913015365601, 
                    0.34091585874557495`}, {
                    0.35409799218177795`, -0.7107595205307007}, \
{-0.47736838459968567`, 1.3376765251159668`}, {
                    1.0174744129180908`, -0.40096160769462585`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.08730413764715195, -0.30411016941070557`, 
                    0.08460777997970581, 0.1346454918384552}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7835296988487244, -0.2876985967159271, \
-0.7150038480758667, -0.441653847694397}, {-0.6377336978912354, 
                    2.105273485183716, 0.03946137800812721, 
                    0.962832510471344}, {-0.5244331359863281, \
-0.6607128381729126, 
                    0.8806125521659851, -0.4075981080532074}, \
{-0.0207088440656662, -0.8347008228302002, -0.21375447511672974`, \
-1.024819254875183}}], "Biases" -> 
                    RawArray["Real32",{0., 0.10184445232152939`, 
                    0.2095145285129547, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.25878214836120605`, -0.6802108287811279, 
                    0.23190860450267792`, -0.5543636083602905}, \
{-1.0917338132858276`, -0.141453817486763, -0.7815151810646057, \
-1.0538750886917114`}, {-0.9915717244148254, 1.0146677494049072`, 
                    0.46070724725723267`, 1.2237516641616821`}, {
                    0.18021562695503235`, -1.0064103603363037`, 
                    0.028769556432962418`, 1.207274317741394}}], "Biases" -> 
                    RawArray["Real32",{-0.17457066476345062`, 0., 
                    0.14317403733730316`, -0.03311567381024361}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7010096907615662, 
                    0.5386219024658203, 0.13931305706501007`, 
                    1.0312293767929077`}, {
                    0.7909489870071411, -0.42114776372909546`, 
                    0.24118812382221222`, -0.9541829228401184}, {
                    0.48835626244544983`, -0.46471327543258667`, 
                    0.619662880897522, 
                    0.6258669495582581}, {-0.99852454662323, \
-0.3097281754016876, 0.25753268599510193`, -0.12958447635173798`}}], "Biases" -> 
                    RawArray["Real32",{0.05355251580476761, 
                    0.05030385032296181, 
                    0.12225575000047684`, -0.05507795140147209}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7661686539649963, 
                    0.7926455140113831, -1.0148553848266602`, \
-0.2221817821264267}, {0.6779279708862305, 0.4717486798763275, 
                    0.6864776611328125, -1.1918736696243286`}, {
                    0.7604702711105347, 
                    1.1436012983322144`, -0.9900761842727661, \
-0.9546067714691162}, {0.14667591452598572`, 
                    0.5370497703552246, -0.7491148114204407, 
                    0.08863148838281631}}], "Biases" -> 
                    RawArray["Real32",{-0.005557596683502197, 
                    0.08889354765415192, -0.039164479821920395`, \
-0.00436381995677948}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6535167694091797, 
                    0.9468663334846497, -0.6574264168739319, \
-0.5250082015991211}, {-1.0625808238983154`, -0.00959259457886219, 
                    1.0252410173416138`, -0.7745680212974548}, \
{-0.7256602048873901, -0.15038423240184784`, 
                    1.0325127840042114`, -0.8182397484779358}, \
{-0.7448923587799072, 
                    0.2248680740594864, -0.4737423360347748, \
-1.117297887802124}}], "Biases" -> 
                    RawArray["Real32",{
                    0.006623828783631325, -0.030691642314195633`, \
-0.005555391777306795, 0.02767174318432808}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.4338841438293457, 
                    0.02327045425772667, 
                    0.003029894083738327, -0.8972814679145813}, \
{-0.2538984417915344, -0.8802012801170349, 0.6719919443130493, 
                    1.069201946258545}, {
                    0.1005774438381195, -0.8963965773582458, \
-0.9779155254364014, -0.4103488326072693}, {-0.23362062871456146`, \
-0.38641712069511414`, 0.3283616006374359, 0.06959308683872223}}], "Biases" -> 
                    RawArray["Real32",{0.06830772012472153, 
                    0.08361774682998657, -0.0053450302220880985`, \
-0.006242052186280489}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.7368323802947998, 
                    0.8498879671096802, -0.4320899248123169, 
                    0.8462148904800415}, {0.581718385219574, 
                    0.09062107652425766, 
                    0.7757717967033386, -0.22117385268211365`}, \
{-0.5401679873466492, 0.4012470841407776, -0.3824312686920166, 
                    0.21749524772167206`}, {-0.3506982624530792, \
-0.05828291177749634, -0.6220205426216125, 0.7043546438217163}}], "Biases" -> 
                    RawArray["Real32",{0., -0.0989883542060852, 0., 
                    0.034546662122011185`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0943498611450195`, 1., 
                    0.5707899332046509}], "Biases" -> 
                    RawArray["Real32",{0., -0.011473491787910461`, 0., 
                    0.02301899343729019}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.016649531200528145`, \
-0.0011380029609426856`, -0.036924321204423904`, -0.02508625201880932}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00038284322363324463`, 
                    0.0002371612936258316, 0.0002056993980659172, 
                    0.00008736725430935621}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "coupling_3" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2269245386123657`, 
                    0.5300783514976501}, {-1.0680961608886719`, 
                    1.2279157638549805`}, {-0.9560098648071289, \
-0.6157021522521973}, {-1.3427678346633911`, -0.5092048645019531}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.055263977497816086`, -0.0357687771320343, 
                    0.009987019933760166, -0.409896582365036}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2102319300174713, 
                    0.7911170721054077, 0.7531107068061829, 
                    0.05388656258583069}, {
                    0.7294581532478333, -1.0154672861099243`, \
-0.8989071249961853, -0.8402823805809021}, {0.8225075602531433, 
                    1.0055885314941406`, -0.8146655559539795, 
                    0.14929859340190887`}, {
                    0.3443886935710907, -0.23406171798706055`, 
                    0.648874044418335, -0.974784791469574}}], "Biases" -> 
                    RawArray["Real32",{
                    0.10877753049135208`, -0.10987579822540283`, \
-0.05968782678246498, 0.007396911736577749}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.5818372368812561, 
                    0.6368904113769531, -0.6741195321083069, \
-0.9550532102584839}, {-0.9334428906440735, -0.2268291413784027, \
-1.1252663135528564`, 1.0908485651016235`}, {
                    0.49197691679000854`, -0.903556227684021, 
                    0.16529005765914917`, 
                    0.7606364488601685}, {-0.060122277587652206`, \
-0.559829831123352, -0.7184230089187622, 0.19126306474208832`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.09598984569311142, 
                    0.11792483925819397`, -0.0518016554415226}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.05107980966567993, -0.5076199173927307, 
                    0.8656588792800903, 1.169507384300232}, {
                    0.043214909732341766`, -0.12430473417043686`, 
                    1.0353971719741821`, 
                    0.2244076430797577}, {-0.004986797459423542, 
                    
                    0.7752837538719177, -0.08317965269088745, \
-0.519730269908905}, {-0.1021399050951004, 
                    0.12337113171815872`, -0.1672910451889038, \
-0.06014348939061165}}], "Biases" -> 
                    RawArray["Real32",{-0.07721059769392014, 
                    0.09335753321647644, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.5864083170890808, -1.1515958309173584`, \
-0.9700015187263489, -1.0751793384552002`}, {-0.44147804379463196`, 
                    0.904954195022583, -0.572465717792511, \
-0.07864737510681152}, {0.8050349950790405, -1.1519731283187866`, 
                    0.5112066864967346, 
                    0.06149987503886223}, {-0.2646709978580475, 
                    0.6335101127624512, -0.013110958971083164`, \
-0.9270269870758057}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.02993219904601574, -0.005128767807036638, 
                    0.016426386311650276`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.3305329382419586, -1.0482378005981445`, \
-0.1924656182527542, -0.7495168447494507}, {
                    0.47665491700172424`, -0.5365244150161743, 
                    1.124621868133545, 0.6901269555091858}, {
                    1.1700797080993652`, 0.4269246757030487, 
                    1.1931535005569458`, 0.17938324809074402`}, {
                    0.3727201223373413, 
                    0.7936676144599915, -1.1791568994522095`, 
                    0.9097337126731873}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.007643654942512512, -0.08279790729284286, 
                    0.09779099375009537}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.41163170337677, 
                    1.0882995128631592`, 
                    0.0033295280300080776`, -0.19062167406082153`}, {
                    1.1305721998214722`, -0.7240346670150757, \
-0.5251972675323486, -0.7583861947059631}, {-0.9256356954574585, \
-0.7151260375976562, -0.14005182683467865`, 
                    0.4736833870410919}, {-0.78333580493927, 
                    0.30321186780929565`, -0.9420959949493408, \
-0.8564635515213013}}], "Biases" -> 
                    RawArray["Real32",{-0.07011282444000244, 0., 
                    0.03244610130786896, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.7035068273544312, 
                    0.18534383177757263`, 0.0613018162548542, 
                    0.11431510001420975`}, {
                    0.4332052171230316, -0.5943752527236938, \
-0.8540732860565186, -0.13494515419006348`}, {-0.21640744805335999`, 
                    0.8409658670425415, -0.45774969458580017`, 
                    0.2688940465450287}, {
                    0.16293755173683167`, -0.7081860303878784, \
-0.43753185868263245`, 0.13354924321174622`}}], "Biases" -> 
                    RawArray["Real32",{0.006494243163615465, 
                    0., -0.055063627660274506`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.046222977340221405`, 1., 
                    1.0855382680892944`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.4094805121421814, 0., 
                    0.3329516053199768, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.037118829786777496`, -0.42928051948547363`, \
-0.28365957736968994`, -0.21991543471813202`}], "MovingVariance" -> 
                    RawArray["Real32",{0.00012735245400108397`, 
                    0.025137698277831078`, 0.007188437506556511, 
                    0.006597123574465513}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2642930746078491`, 
                    0.8268188238143921}, {-0.5022134184837341, 
                    0.5101158618927002}, {-1.3381139039993286`, 
                    1.166893720626831}, {0.4878425598144531, 
                    0.20256587862968445`}}], "Biases" -> 
                    RawArray["Real32",{-0.17179343104362488`, 
                    0.08783379197120667, 
                    0.06922435760498047, -0.2568233013153076}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.32112014293670654`, -1.063812017440796, \
-2.908308267593384, -0.48695436120033264`}, {-0.9814897179603577, \
-0.32749828696250916`, -0.28614771366119385`, -0.8372399806976318}, {
                    0.3182300329208374, 
                    0.1996791958808899, -0.3122684061527252, 
                    0.7359107136726379}, {1.2977542877197266`, 
                    0.28099775314331055`, -1.060470461845398, \
-0.36558130383491516`}}], "Biases" -> 
                    RawArray["Real32",{0.22945696115493774`, 0., 
                    0.3949333429336548, 0.16519878804683685`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7585293650627136, -1.1807243824005127`, 
                    0.6534357070922852, -0.26351964473724365`}, \
{-1.112922191619873, 0.17868958413600922`, 
                    1.4414318799972534`, -1.1912803649902344`}, {
                    0.31313610076904297`, 
                    0.05311939865350723, -0.7185114026069641, 
                    1.1544849872589111`}, {0.7256407141685486, 
                    0.9326233267784119, 0.028320958837866783`, 
                    0.2747834324836731}}], "Biases" -> 
                    RawArray["Real32",{0.2263377159833908, 
                    0.09536410123109818, 
                    0.23931525647640228`, -0.015928028151392937`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.9092296957969666, 
                    0.7737902402877808, -0.5791275501251221, 
                    0.007331222761422396}, {-0.3860591948032379, 
                    0.7988179326057434, 0.483842134475708, 
                    0.7352887988090515}, {
                    0.19772590696811676`, -1.0622608661651611`, \
-0.7747647166252136, 0.07980397343635559}, {
                    0.5633371472358704, -0.814481258392334, \
-0.4070219397544861, -1.0397902727127075`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.26312559843063354`, -0.09947662800550461, \
-0.020687200129032135`, -0.03377986699342728}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2686201333999634`, 
                    0.24814386665821075`, -0.27694377303123474`, 
                    0.5479679107666016}, {0.0696205124258995, 
                    1.102692723274231, 
                    1.0082558393478394`, -0.8493449091911316}, \
{-0.12962917983531952`, -0.6112529039382935, -1.1061062812805176`, 
                    
                    0.1692829132080078}, {-0.17391467094421387`, \
-1.1689257621765137`, 0.9973315596580505, -0.7050062417984009}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.093745157122612, -0.05702408775687218, 0., 
                    0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.7096297740936279, -0.3120685815811157, 
                    1.0470035076141357`, 0.19487692415714264`}, {
                    0.009518268518149853, -0.9735857844352722, 
                    0.15269295871257782`, 
                    0.2565949261188507}, {-0.11307663470506668`, \
-1.1760481595993042`, 
                    1.039278507232666, -0.01588474214076996}, \
{-0.8765694499015808, 
                    1.1391587257385254`, -1.179132342338562, \
-0.9810775518417358}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.09613307565450668, -0.031668826937675476`, 
                    0., -0.03938092663884163}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.5577342510223389, -1.0093947649002075`, \
-0.41194576025009155`, -0.3543873131275177}, {1.0553799867630005`, 
                    1.1880255937576294`, -0.30832621455192566`, \
-0.4425933361053467}, {-1.3836721181869507`, 0.09204135090112686, 
                    0.8451066017150879, 0.22725027799606323`}, {
                    0.7735462784767151, 
                    0.21771612763404846`, -0.5773540735244751, \
-1.2089533805847168`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.8894547820091248, -0.4685942828655243, \
-0.20228110253810883`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.07895833253860474, 
                    0.3609413206577301, 0.4526773691177368, 
                    0.37655872106552124`}, {
                    0.8290538191795349, -0.023191213607788086`, \
-0.12195669859647751`, -0.31643494963645935`}, {
                    0.7179055213928223, -0.08120162039995193, \
-0.26662132143974304`, -0.5745231509208679}, {
                    0.11935969442129135`, -0.5377625226974487, \
-0.52306067943573, 0.5917158126831055}}], "Biases" -> 
                    RawArray["Real32",{0., 0.037078045308589935`, 
                    0., -0.022038575261831284`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.8302268981933594, 1., 
                    1.316287636756897}], "Biases" -> 
                    RawArray["Real32",{0., 0.15166693925857544`, 
                    0., -0.45056086778640747`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.39726001024246216`, -0.0194294061511755, \
-0.14308758080005646`, -0.48614558577537537`}], "MovingVariance" -> 
                    RawArray["Real32",{0.05312395840883255, 
                    0.002626831643283367, 0.01282864436507225, 
                    0.04547467827796936}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8055242896080017, -0.5046042799949646}, \
{-1.0678335428237915`, -0.9697098135948181}, {-0.561033308506012, \
-0.8877573609352112}, {0.9595621824264526, -0.0500657856464386}}], "Biases" -> 
                    RawArray["Real32",{0.33588457107543945`, 
                    0.07756032794713974, -0.09569449722766876, \
-0.11187814921140671`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.32993894815444946`, 
                    0.5002012252807617, -0.49956807494163513`, 
                    0.40580034255981445`}, {
                    0.07131551206111908, -0.16277313232421875`, \
-1.1159601211547852`, 1.1482741832733154`}, {1.2370935678482056`, 
                    1.6028075218200684`, -0.42574992775917053`, \
-0.755722165107727}, {-0.5497583150863647, 
                    0.5320141911506653, -1.025053858757019, 
                    0.9358385801315308}}], "Biases" -> 
                    RawArray["Real32",{-0.037944987416267395`, 
                    0.22707660496234894`, 
                    0.007558062672615051, -0.03027201071381569}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.1833183318376541, -0.5434562563896179, 
                    0.35900264978408813`, 
                    0.6587458252906799}, {-0.15809792280197144`, 
                    0.8733894228935242, -0.9908549785614014, 
                    1.045094609260559}, {0.7978456616401672, 
                    0.35350021719932556`, -0.2868674695491791, \
-1.0262768268585205`}, {-0.7124864459037781, 
                    1.0488007068634033`, -0.5228165984153748, 
                    0.926790177822113}}], "Biases" -> 
                    RawArray["Real32",{-0.04258950427174568, 
                    0.17276756465435028`, -0.12131209671497345`, 
                    0.27382320165634155`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.05914736166596413, 
                    0.47175294160842896`, 0.17754751443862915`, 
                    0.9169224500656128}, {-1.0569748878479004`, 
                    0.4991212785243988, -0.6323114037513733, \
-0.8411307334899902}, {1.0993962287902832`, 
                    0.18369415402412415`, -1.0187921524047852`, \
-1.3645762205123901`}, {
                    0.6631592512130737, -0.4769909679889679, \
-0.28027579188346863`, -0.49332156777381897`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.04119429364800453, -0.005328983999788761, \
-0.18500567972660065`, 0.14757290482521057`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.11408688127994537`, 
                    0.4024689495563507, 0.3531888723373413, 
                    0.9709101915359497}, {0.6454603672027588, 
                    0.6429744362831116, 0.6609175205230713, 
                    0.41047388315200806`}, {-0.021838761866092682`, 
                    0.7679307460784912, -0.9821698665618896, 
                    0.5330458283424377}, {-0.48661771416664124`, \
-0.8861293196678162, 0.2985672652721405, -0.24996596574783325`}}], "Biases" -> 
                    RawArray["Real32",{-0.029024148359894753`, 
                    0.10164622962474823`, 
                    0.22822213172912598`, -0.0643431693315506}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.25814053416252136`, -0.5698228478431702, 
                    0.9926735162734985, 1.1822365522384644`}, {
                    0.30227944254875183`, -0.5475373864173889, \
-1.221463918685913, -0.7576279044151306}, {-0.6261985898017883, 
                    0.32760244607925415`, 0.2221505343914032, 
                    
                    0.49372488260269165`}, {-1.0299720764160156`, \
-0.8712263703346252, 0.4709862470626831, -0.9809171557426453}}], "Biases" -> 
                    RawArray["Real32",{-0.05840636044740677, 0., 
                    0.34599795937538147`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7178837060928345, 
                    0.0754539743065834, -0.07109770178794861, 
                    0.10907488316297531`}, {-0.39196500182151794`, \
-1.0391287803649902`, 0.5946069955825806, 0.3916831910610199}, {
                    0.5160495042800903, -0.4873242974281311, 
                    0.49311238527297974`, -0.24718569219112396`}, \
{-0.6341967582702637, 
                    0.36129269003868103`, -0.6919680833816528, \
-1.0163519382476807`}}], "Biases" -> 
                    RawArray["Real32",{-0.18687163293361664`, 
                    0.02596762776374817, 0.03363369405269623, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2952757179737091, 
                    0.4504634737968445, -0.04413805529475212, 
                    0.18807938694953918`}, {-0.7450427412986755, \
-0.8215761184692383, -0.4584442377090454, -0.4913382828235626}, \
{-0.2416420727968216, 0.3537132441997528, 0.27950969338417053`, 
                    0.5292163491249084}, {-0.7373591065406799, 
                    0.36556029319763184`, -0.41158556938171387`, \
-0.2839217483997345}}], "Biases" -> 
                    RawArray["Real32",{-0.01831594482064247, 0., 
                    0.017417605966329575`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.2714173197746277, 1., 
                    0.9956449866294861, 1.}], "Biases" -> 
                    RawArray["Real32",{0.19552762806415558`, 
                    0., -0.39802759885787964`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.07385575026273727, -0.2899567484855652, 
                    0.16089841723442078`, -0.009371621534228325}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0014104446163401008`, 
                    0.011190064251422882`, 0.0026832493022084236`, 
                    0.00038680279976688325`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    1.0418953895568848`, -0.513334333896637}, {
                    0.1687389612197876, -0.3302590548992157}, {
                    0.495919793844223, 
                    0.8434527516365051}, {-0.5314626693725586, 
                    1.3900585174560547`}}], "Biases" -> 
                    RawArray["Real32",{0.3659566044807434, 
                    0.13351543247699738`, 0.10686391592025757`, 
                    0.15509799122810364`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-1.3263261318206787`, -0.27763131260871887`, 
                    0.3791273236274719, 
                    0.2657627761363983}, {-1.4778060913085938`, 
                    0.8390009999275208, -0.9616281986236572, \
-0.025680365040898323`}, {
                    0.6034183502197266, -0.43304872512817383`, \
-0.3603288531303406, 
                    0.9616199731826782}, {-0.49781331419944763`, \
-0.529888391494751, -0.09996475279331207, -0.051624953746795654`}}], "Biases" -> 
                    RawArray["Real32",{0.08929497003555298, 
                    0.05597096309065819, -0.15732471644878387`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.5539706945419312, 
                    0.7471994757652283, 0.46178996562957764`, 
                    0.25351831316947937`}, {-0.4265191853046417, \
-0.7486802339553833, -0.7460475564002991, -0.6947806477546692}, {
                    0.9243960976600647, 
                    1.1926639080047607`, -0.17698706686496735`, \
-0.6852891445159912}, {0.09440665692090988, 0.27125465869903564`, 
                    0.869486391544342, -1.0169434547424316`}}], "Biases" -> 
                    RawArray["Real32",{0.2866675853729248, 0., 
                    0.04700961336493492, -0.1856992095708847}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.8231660723686218, -0.8155822157859802, \
-1.1855549812316895`, 
                    0.29907849431037903`}, {-0.4099087715148926, \
-0.6159327626228333, 
                    0.3841255307197571, -0.5931782722473145}, \
{-0.24869844317436218`, -0.5106825232505798, -0.07572083175182343, 
                    0.9675281047821045}, {
                    0.14630478620529175`, -0.14799608290195465`, \
-1.059540867805481, -1.1832749843597412`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.18658752739429474`, -0.023231053724884987`, \
-0.24010439217090607`, -0.05971395596861839}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.23073528707027435`, -0.4012846350669861, \
-0.2839476466178894, -1.0680859088897705`}, {-0.3161003589630127, \
-0.20132650434970856`, -1.0062566995620728`, 0.19635431468486786`}, {
                    0.46060413122177124`, 
                    0.20692935585975647`, -0.08522094786167145, 
                    1.1850789785385132`}, {0.0030966363847255707`, 
                    0.2825815677642822, -1.091651439666748, 
                    1.1223691701889038`}}], "Biases" -> 
                    RawArray["Real32",{0.09239514917135239, 
                    0., -0.013500048778951168`, 0.2942027449607849}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.1700756549835205`, 
                    0.13764449954032898`, 0.6639665365219116, 
                    0.5552995204925537}, {-0.4826156497001648, \
-0.8768376708030701, -1.0968669652938843`, -0.4557706117630005}, {
                    0.516022801399231, -1.1965264081954956`, 
                    0.3426477015018463, -1.1791882514953613`}, \
{-0.18313869833946228`, 1.1725883483886719`, 
                    0.6765085458755493, -0.4567888677120209}}], "Biases" -> 
                    RawArray["Real32",{0.0691957175731659, 
                    0., -0.052879009395837784`, -0.14714697003364563`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.3545922040939331, -1.0969960689544678`, \
-0.7072638869285583, -0.6124459505081177}, {0.5162127614021301, 
                    0.6238583326339722, 
                    0.34327301383018494`, -0.26791563630104065`}, \
{-0.5693504214286804, 1.2117674350738525`, -0.11955609917640686`, 
                    0.9526163935661316}, {
                    0.0004830145335290581, -0.6953133940696716, \
-0.8744909763336182, 0.5600712895393372}}], "Biases" -> 
                    RawArray["Real32",{-0.04417675733566284, 
                    0.016460709273815155`, -0.018018431961536407`, \
-0.003621066454797983}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.08364911377429962, -0.41293445229530334`, 
                    0.7456597089767456, -0.6112605333328247}, {
                    0.38328656554222107`, 
                    0.026827214285731316`, -0.6304061412811279, 
                    0.0014338655164465308`}, {
                    0.2936494052410126, -0.4953831434249878, \
-0.8156598806381226, 
                    0.7646706700325012}, {-0.037835653871297836`, \
-0.9449551701545715, 0.7161888480186462, 0.32395997643470764`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.004959477577358484, 0., 
                    0.018554257228970528`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.4236890375614166, 1., 
                    0.8259796500205994}], "Biases" -> 
                    RawArray["Real32",{0., 0.8121699094772339, 0., 
                    0.15723752975463867`}], "MovingMean" -> 
                    RawArray["Real32",{-0.12917044758796692`, 
                    0.05554655194282532, -0.09991323947906494, \
-0.25477808713912964`}], "MovingVariance" -> 
                    RawArray["Real32",{0.000266525661572814, 
                    0.00009923988545779139, 0.00010416119766887277`, 
                    0.0011296860175207257`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "coupling_4" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.4652402400970459, 
                    0.49676209688186646`}, {0.1175260916352272, 
                    1.2375682592391968`}, {-0.8456810712814331, \
-0.6227266788482666}, {-1.4109878540039062`, 0.37913620471954346`}}], 
                    "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.9029104709625244, -0.7850021123886108, \
-0.45101794600486755`, 
                    0.5204910039901733}, {-0.18260669708251953`, \
-1.0518146753311157`, -0.006921728607267141, -0.26572009921073914`}, \
{-1.0894790887832642`, -1.0242424011230469`, -0.9082985520362854, 
                    1.1481907367706299`}, {-1.1608684062957764`, \
-0.9526859521865845, -0.5282173156738281, 0.20659083127975464`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6848381757736206, 
                    0.6082578301429749, 
                    0.7840158939361572, -0.5883799195289612}, \
{-0.9217560887336731, 
                    0.40544581413269043`, -0.33492571115493774`, \
-0.3102727234363556}, {-0.5688890814781189, 
                    1.046210527420044, -0.9115222096443176, \
-0.5828470587730408}, {-0.05852051451802254, 0.9531077146530151, 
                    0.32824960350990295`, 0.16221819818019867`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.9153900742530823, 
                    0.6633276343345642, -0.6811608672142029, 
                    0.19160978496074677`}, {-0.5331753492355347, \
-0.15094305574893951`, 
                    0.5140804052352905, -0.9406359195709229}, \
{-0.16569238901138306`, 0.47429540753364563`, -1.0168081521987915`, 
                    0.1246163472533226}, {-0.8730981349945068, \
-0.8632358312606812, 0.33973273634910583`, -0.3848488926887512}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6421592831611633, 
                    0.7852470874786377, 
                    0.9743026494979858, -0.5576608777046204}, {
                    1.029341697692871, -0.7168751955032349, \
-0.06433585286140442, 0.08959601074457169}, {0.27530547976493835`, 
                    0.5117119550704956, 
                    0.7906123995780945, -0.4385753571987152}, {
                    0.7723061442375183, -0.06683015823364258, \
-0.8859438896179199, -1.218153953552246}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    1.203736662864685, -0.25375401973724365`, 
                    0.7500302195549011, -0.22818173468112946`}, \
{-1.0999925136566162`, 0.9465587139129639, 0.3289337754249573, 
                    0.8465142846107483}, {
                    0.028109243139624596`, -0.03129323944449425, 
                    1.1834310293197632`, -0.44804665446281433`}, \
{-0.037871867418289185`, 0.010917437262833118`, -0.8484542369842529, 
                    0.20530910789966583`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.9259331226348877, 
                    0.37142977118492126`, 0.1256236582994461, 
                    0.04828003793954849}, {
                    0.9989590048789978, -0.2154754400253296, \
-0.016423378139734268`, 0.9485648274421692}, {1.040073037147522, 
                    0.12642869353294373`, -0.3693975806236267, \
-1.1077848672866821`}, {-0.5319598317146301, -0.4387214481830597, \
-0.534461259841919, -0.4620550572872162}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.0833996906876564, -0.46460387110710144`, \
-0.1812361478805542, 0.679459273815155}, {-0.8004432320594788, 
                    0.10009783506393433`, 
                    0.24950337409973145`, -0.41158491373062134`}, \
{-0.47476792335510254`, -0.3978653848171234, -0.15602312982082367`, 
                    0.8161223530769348}, {0.02307536080479622, 
                    0.14550918340682983`, 0.8530614376068115, 
                    0.5101252198219299}}], "Biases" -> 
                    RawArray["Real32",{0.011915917508304119`, 0., 
                    0.034721240401268005`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.000890851020813, 1., 
                    1.0057798624038696`, 1.}], "Biases" -> 
                    RawArray["Real32",{0.2999424636363983, 0., 
                    0.3054947257041931, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.01201102789491415, 0., 
                    0.0346289798617363, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-1.007866621017456, -1.1302850246429443`}, \
{-1.1292991638183594`, 
                    0.32867714762687683`}, {-0.9661316275596619, \
-1.2228132486343384`}, {-0.35992372035980225`, 1.0590423345565796`}}], 
                    "Biases" -> RawArray[
                    "Real32",{-0.19781887531280518`, -0.052421003580093384`, \
-0.26478883624076843`, 0.10271609574556351`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.04167582467198372, -0.039781633764505386`, \
-0.026082627475261688`, 1.3676934242248535`}, {
                    0.8291130661964417, -1.4437823295593262`, \
-0.5611294507980347, -0.9822043776512146}, {-0.3967604637145996, \
-0.753619909286499, 0.362751841545105, 
                    
                    0.14525388181209564`}, {-0.9395437836647034, \
-0.5477266907691956, -1.133709192276001, 0.847710371017456}}], "Biases" -> 
                    RawArray["Real32",{0.07890690863132477, 
                    0.3761350214481354, 
                    0.3376272916793823, -0.1185382828116417}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6026408672332764, 
                    0.3285408020019531, -0.41105180978775024`, 
                    0.8543686866760254}, {-0.11997757107019424`, 
                    0.8851994872093201, 
                    0.6833640336990356, -0.3456652760505676}, \
{-0.39565959572792053`, -0.3138121962547302, -0.6649273037910461, 
                    0.35737353563308716`}, {-0.4911477863788605, \
-1.1042778491973877`, -0.36274898052215576`, -0.11533467471599579`}}], 
                    "Biases" -> RawArray["Real32",{0.020833812654018402`, 
                    0.20892350375652313`, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.9802055358886719, 
                    0.44653260707855225`, -1.1153992414474487`, \
-0.5422317981719971}, {1.0233982801437378`, -0.0626722201704979, 
                    1.0991966724395752`, -1.063027024269104}, \
{-0.6796855330467224, 
                    0.23226308822631836`, -0.3158417344093323, \
-0.5147196054458618}, {-0.8717750310897827, -0.3191491961479187, 
                    0.4369300305843353, -0.6443153619766235}}], "Biases" -> 
                    RawArray["Real32",{
                    0.16314755380153656`, -0.009577592834830284, 
                    0.18332423269748688`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.18324266374111176`, -0.5023815035820007, \
-0.7085782289505005, 
                    0.20978394150733948`}, {-0.8939442038536072, \
-0.6249310970306396, -0.21290069818496704`, 
                    0.979325532913208}, {-0.5504775643348694, \
-0.05832118168473244, -0.11689189821481705`, 0.053812094032764435`}, {
                    1.0853383541107178`, 0.0061812330968678, 
                    0.5580741763114929, -0.3068590462207794}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.05754492059350014}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.36064276099205017`, 
                    0.6194612383842468, -0.27823686599731445`, \
-8.196585440600757*^-6}, {0.4804772138595581, -0.165147066116333, 
                    0.9228812456130981, 
                    0.7461766004562378}, {-0.3477061092853546, \
-0.09727273136377335, 
                    0.4745616912841797, -1.1461161375045776`}, \
{-0.9887083172798157, 0.6576195955276489, -0.8700469732284546, 
                    1.0412739515304565`}}], "Biases" -> 
                    RawArray["Real32",{0.07557635009288788, 
                    0.018580619245767593`, 0., -0.030154014006257057`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{9.325220162281767*^-6, 
                    0.8228119611740112, -0.4993772506713867, \
-0.21248407661914825`}, {0.07443057745695114, -0.26470720767974854`, 
                    0.2867298722267151, -0.2581230103969574}, {
                    6.920875421201345*^-6, 
                    0.09026002883911133, -0.5431668758392334, 
                    0.31951263546943665`}, {-0.8487663269042969, \
-0.5759012699127197, 0.33831918239593506`, 0.3584586977958679}}], "Biases" -> 
                    RawArray["Real32",{-0.05139141529798508, 
                    0., -0.0088221849873662, 0.004635503049939871}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8246548771858215, -0.2259514480829239, 
                    0.3128778040409088, 0.3548484742641449}, {
                    0.03844049572944641, -0.7165543437004089, \
-0.6533167362213135, 0.02939617820084095}, {
                    0.8554775714874268, -0.7347059845924377, \
-0.7679096460342407, -0.06620988994836807}, {1.0089783668518066`, 
                    0.7805302143096924, 
                    0.42812126874923706`, -0.013497886247932911`}}], "Biases" -> 
                    RawArray["Real32",{0., 0.015746716409921646`, 
                    0., -0.005764590576291084}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.35106638073921204`, 1., 
                    2.100911855697632}], "Biases" -> 
                    RawArray["Real32",{0., -0.12786923348903656`, 0., 
                    0.05423612520098686}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.10744404792785645`, -0.13281498849391937`, 
                    0.005403124261647463, 0.32040634751319885`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0011073986534029245`, 
                    0.0017343112267553806`, 0.000022023315978003666`, 
                    0.009115437045693398}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.6304361820220947, -1.0520421266555786`}, \
{-1.2773617506027222`, -0.5163175463676453}, {1.0575640201568604`, 
                    0.4758467674255371}, {-0.2984674572944641, \
-0.5416990518569946}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.02016102522611618, -0.020137911662459373`, 
                    0.009103432297706604, -0.020071636885404587`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.05553991347551346, 
                    0.4838116466999054, 0.6280455589294434, 
                    0.9579535126686096}, {
                    0.4094116985797882, -0.7297202944755554, \
-0.5407580137252808, 1.0920393466949463`}, {0.3416574001312256, 
                    0.8166967630386353, 0.027458971366286278`, 
                    0.5231937766075134}, {-1.0214983224868774`, 
                    1.1557561159133911`, -0.73240065574646, \
-0.3085293173789978}}], "Biases" -> 
                    RawArray["Real32",{-0.005659567657858133, 
                    0.018651708960533142`, -0.027242522686719894`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7295066118240356, -0.9585456252098083, 
                    0.4683768153190613, 0.013072196394205093`}, {
                    0.7268832325935364, 1.0297549962997437`, 
                    0.13010364770889282`, 0.8511728644371033}, {
                    0.5311985015869141, -0.7490038275718689, 
                    1.1106948852539062`, -0.783568799495697}, \
{-0.11016649007797241`, -0.7793685793876648, 0.7892118692398071, 
                    0.6283679008483887}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.02789856493473053, -0.0267933439463377, \
-0.020013725385069847`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8662037253379822, -0.7305806279182434, 
                    0.5959702134132385, 
                    0.15533588826656342`}, {-0.16451825201511383`, \
-0.9961524605751038, -1.136181116104126, 0.4645577669143677}, {
                    0.3575422465801239, -0.3326648473739624, \
-1.0992751121520996`, 0.055531591176986694`}, {1.0984028577804565`, 
                    0.4548112154006958, 0.666391134262085, 
                    1.1845535039901733`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.028072068467736244`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.8098240494728088, 
                    1.155951976776123, -0.6447374224662781, 
                    0.45518845319747925`}, {-0.6766847372055054, \
-0.47551292181015015`, -0.3867071270942688, 1.1213455200195312`}, {
                    0.9464103579521179, -1.1102110147476196`, 
                    0.7772281169891357, 
                    0.23293203115463257`}, {-1.182234764099121, \
-0.47915083169937134`, -1.1138650178909302`, -0.3971502184867859}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0002449585881549865, -0.004986758343875408, \
-0.03427859768271446, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.1852563619613647`, 
                    0.7036933302879333, 0.8977159857749939, 
                    0.928520679473877}, {-0.9681017994880676, 
                    0.7755762934684753, 
                    0.1256440281867981, -0.6624584197998047}, {
                    0.6240013241767883, -0.14710289239883423`, 
                    0.5384515523910522, 0.6343113780021667}, {
                    0.6885873675346375, 0.07010910660028458, 
                    0.09267108887434006, 0.12848487496376038`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0070115430280566216`, \
-0.015095503069460392`, -0.009009095840156078, 0.003930181264877319}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.6698826551437378, -0.29908081889152527`, \
-0.2068452537059784, -0.30872347950935364`}, {0.6599966287612915, 
                    0.04333231970667839, -1.0408837795257568`, \
-0.306166410446167}, {-0.9370322823524475, -0.3536984920501709, \
-0.6001484394073486, 0.02215658314526081}, {-0.1800127923488617, 
                    0.8332293033599854, -1.1162543296813965`, \
-0.6609154343605042}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.008087989874184132, -0.011284451000392437`, \
-0.02397492341697216}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.5182785987854004, 
                    0.6566182374954224, 0.5928246974945068, 
                    0.12140579521656036`}, {
                    0.1699356734752655, -0.27175694704055786`, 
                    0.7886574864387512, 0.6768583655357361}, {
                    0.5189081430435181, 
                    0.2447454184293747, -0.5930821299552917, \
-0.08741005510091782}, {0.0417998731136322, -0.3245701491832733, 
                    0.5038024187088013, -0.023459866642951965`}}], "Biases" -> 
                    RawArray["Real32",{-0.008279794827103615, 
                    0., -0.01587769389152527, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.9806042313575745, 1., 
                    0.9761574268341064, 1.}], "Biases" -> 
                    RawArray["Real32",{0.5513590574264526, 0., 
                    0.12312658131122589`, 0.}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.008144805207848549, -5.605193857299268*^-45, \
-0.015940163284540176`, -5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"]
                     -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.47400811314582825`, -0.8142053484916687}, \
{-0.9381108283996582, -0.9096481204032898}, {-1.2824023962020874`, 
                    0.06401971727609634}, {-0.07836522907018661, 
                    0.48831385374069214`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    
                    0.10472651571035385`, -0.899893045425415, \
-0.8831688165664673, 0.841711699962616}, {
                    0.639081597328186, -1.0726513862609863`, 
                    0.016854742541909218`, 0.6379846930503845}, {
                    0.29376646876335144`, -1.0531771183013916`, \
-0.7469577193260193, -0.6804822683334351}, {-0.3903186321258545, 
                    0.41556766629219055`, -0.44766518473625183`, 
                    0.5781077742576599}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.1779835969209671, -0.7659265995025635, \
-0.6955357789993286, -0.46534663438796997`}, {
                    0.40920573472976685`, -0.5140355825424194, \
-1.0458946228027344`, 1.022903561592102}, {
                    0.6857390999794006, -0.1890314221382141, \
-0.9970906972885132, 1.1968910694122314`}, {
                    1.0493556261062622`, -0.5241221189498901, 
                    0.996066153049469, 0.6140029430389404}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.09778854995965958, -0.08884620666503906, \
-0.981550395488739, 0.14494751393795013`}, {-1.1741719245910645`, 
                    0.5936166644096375, -0.8853036165237427, 
                    1.1288560628890991`}, {1.0192004442214966`, 
                    0.45757684111595154`, 
                    0.4314703643321991, -0.4057874381542206}, {
                    0.34138989448547363`, -1.2073633670806885`, 
                    0.6353721618652344, -1.1829006671905518`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.7903922200202942, 
                    1.0306997299194336`, -1.094161868095398, \
-0.23096758127212524`}, {0.5526812076568604, 0.24305129051208496`, 
                    0.5017563104629517, 
                    0.14767198264598846`}, {-0.6947301626205444, 
                    1.087038278579712, -0.9804190397262573, 
                    0.5635855197906494}, {
                    0.838047981262207, -0.9405266642570496, \
-0.47020044922828674`, 0.298164427280426}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.3400888741016388, -0.1795671135187149, 
                    0.29517868161201477`, -1.0533629655838013`}, {
                    0.5913594365119934, -0.9476831555366516, 
                    0.1860104650259018, 
                    0.02964492328464985}, {-0.28369805216789246`, 
                    0.2887578308582306, 0.6344670057296753, 
                    0.21172834932804108`}, {0.7833213806152344, 
                    0.15075556933879852`, 0.19456005096435547`, 
                    0.9793469309806824}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.5568111538887024, -0.2508641481399536, \
-0.8237136602401733, -0.2236444056034088}, {-1.0766154527664185`, \
-0.14689864218235016`, -1.129744529724121, 
                    0.4696337580680847}, {-0.082916259765625, 
                    0.3892093598842621, -0.8197648525238037, \
-0.99456787109375}, {0.9241390824317932, -0.8137200474739075, 
                    0.5294305682182312, -0.8215039968490601}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.5217711329460144, 
                    0.7797710299491882, -0.41279080510139465`, 
                    0.5107153058052063}, {-0.22225850820541382`, 
                    0.27820247411727905`, -0.8235942125320435, 
                    0.6491014361381531}, {-0.2466532438993454, \
-0.6058765053749084, -0.5460322499275208, -0.7440249919891357}, \
{-0.7497199773788452, 0.5091549158096313, -0.8626350164413452, 
                    0.23669159412384033`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.008660465478897095, 0., 
                    0.020563967525959015`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0004466772079468`, 1., 
                    1.0005074739456177`}], "Biases" -> 
                    RawArray["Real32",{0., 0.9064932465553284, 
                    0., -0.1170889362692833}], "MovingMean" -> 
                    RawArray["Real32",{0., -0.008652647025883198, 0., 
                    0.020534871146082878`}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "square" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
               "$Dimensions" -> {2}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]],
            "summation_z" -> 
           Association[
            "Type" -> "Summation", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "minus_half" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "gaussian_coef" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.8378770664093453`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "Total_loss_jac" -> 
           Association[
            "Type" -> "Threading", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
             "Inputs" -> 
             Association[
              "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]],
            "summation_jacobian" -> 
           Association[
            "Type" -> "Summation", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "plus" -> Association[
            "Type" -> "Threading", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
             "Inputs" -> 
             Association[
              "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], "2" -> 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "density_coef" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.3862943611198906`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "minus_prob" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "perpixel" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]],
          "Edges" -> {
          NeuralNetworks`NetPath[
            "Nodes", "coupling_1", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath["Nodes", "coupling_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "coupling_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_1", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "1"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Nodes", "coupling_3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_2", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "2"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Nodes", "coupling_4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_3", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "3"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_4", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "square", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_4", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "4"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Nodes", "summation_z", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "square", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "minus_half", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "summation_z", "Outputs", "Output"], 
           NeuralNetworks`NetPath[
            "Nodes", "gaussian_coef", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "minus_half", "Outputs", "Output"],
            NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "gaussian_coef", "Outputs", "Output"], 
           NeuralNetworks`NetPath[
            "Nodes", "summation_jacobian", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "Total_loss_jac", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "summation_jacobian", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "density_coef", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "plus", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "minus_prob", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "density_coef", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "perpixel", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "minus_prob", "Outputs", "Output"],
            NeuralNetworks`NetPath["Outputs", "Total_Loss"] -> 
           NeuralNetworks`NetPath["Nodes", "perpixel", "Outputs", "Output"]}], 
        Association["Version" -> "12.0.10", "Unstable" -> False]], "Method" -> 
      "RealNVP", "Options" -> 
      Association[
       MaxTrainingRounds -> 
        Association["Value" -> 500, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> Ramp, "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 8, "Options" -> Association[]], 
        "CouplingLayersNumber" -> 
        Association["Value" -> 4, "Options" -> Association[]], "NetworkType" -> 
        Association[
         "Value" -> "FullyConnected", "Options" -> Association[]]]], 
    "TrainingInformation" -> Association["Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "RealNVP", "Options" -> 
           Association[
            MaxTrainingRounds -> Association["Value" -> 500], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "CouplingLayersNumber" -> Association["Value" -> 4], 
             "NetworkType" -> Association["Value" -> "FullyConnected"]], 
           "NaiveImputer" -> MachineLearning`MLProcessor["ImputeMissing", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Mean" -> {-0.00011694978920027098`, 0.00007700457069977347}, 
              "StandardDeviation" -> {0.9999923764062054, 
               1.0000250705186169`}, "Method" -> "NaiveSampler", 
              "VectorLength" -> 2, "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
              "NumericalVector", "Version" -> {12., 0}, "ID" -> 
              6728614895511755230]], "EMIterations" -> 1] -> Association[]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{
          "Value", "Options", "NaiveImputer", "EMIterations"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
           TypeSystem`AnyType, 
           TypeSystem`Atom[Integer]}], 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 1], 
        Association["ID" -> 251092553336860]], "BestModelInformation" -> 
      Dataset[
        Association[
        "Configuration" -> {
          "RealNVP", MaxTrainingRounds -> 500, "ActivationFunction" -> Ramp, 
           "NetworkDepth" -> 8, "CouplingLayersNumber" -> 4, "NetworkType" -> 
           "FullyConnected"}, "ModelUtility" -> Missing[]], 
        TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`UnknownType}], 
        Association["ID" -> 251096848304156]]], "NaiveImputer" -> 
    MachineLearning`MLProcessor["ImputeMissing", 
      Association[
      "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Mean" -> {-0.00011694978920027098`, 0.00007700457069977347}, 
       "StandardDeviation" -> {0.9999923764062054, 1.0000250705186169`}, 
       "Method" -> "NaiveSampler", "VectorLength" -> 2, "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Type" -> "NumericalVector", "Version" -> {12., 0}, "ID" -> 
       6728614895511755230]], "InputDimension" -> 0, "OutputDimension" -> 2, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{-0.48249699075707647`, 1.4091840047834874`}}, "ID" -> 
           5216113400745425930]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 366.848324009674, 
      "MaxTrainingMemory" -> 13947480, "DataMemory" -> 160152, 
      "FunctionMemory" -> 4317032, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 7, 22, 16, 21, 48.5664587`9.438911295598352}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}], "LogPDFDistribution" -> 
    MachineLearning`TailedQuantileDistribution[
      Association["Quantiles" -> CompressedData["
1:eJwBNQPK/CFib1JlAQAAAGUAAAAvleaX7zb9v7GF6RQCovS/AJxTa6IZ8b+d
dGTGHGbvv+UVeMNqVe6/NRyyt7I97b+Aw6cz0fLrv0VJ9eXmzeq/o/so4V1n
6b/z7czD/NDov8Xt7Z6EiOi/YJpX/y7J578GR7WOEOnmv0O5NWUPeOa/r0N4
VSMa5r9ppEwUyJzlvysJd9fk/+S/2EjWhNON5L/xqCMGyB7kvyuCpVuHseO/
sIe+vKNW4782PxTCV9Xiv33CkgsLceK/tHShresH4r87JIUbEbPhvxBr9J2r
f+G/3JptanVC4b9IQkjQIAjhv87v4aJ10eC/4HQquMKk4L8RQLHYEVDgv5un
6sdzM+C/vOqxFGS237/olF/mRTffv+ErnoJE8d6/Oa33dd+23r+y4kQIaYXe
v+YXOodqNt6/DVd1PBb93b/R8A4Eu6fdv+trp5F+WN2//y+jhC3l3L/sVtO4
47Xcv54snC0bYty/rKPaKQYQ3L8bBvytFdDbvz+oHrS5qNu/1x1DIUps2794
3Dq3lz7bv99SpHP6INu/GrBija7x2r8zCPqiuMTav7Uifnf2lNq/AarCx6pu
2r+JTXP0F1Dav27s/ObdKtq/CzzIufMW2r/Sw8cIJ/fZvy039OJWwNm/aGCO
2w+O2b94OdZjATfZv1/Z768l7ti/GyxxRCe/2L+wjd0K7nTYv004RLzyD9i/
p0C7kB7O17/GTzKPLLDXv7uL+vHga9e/89zFFGgN17+RUljF6OrWv/C/bK8t
tta/1zQ9yC+F1r9iwhQA2VfWv78unnd2K9a/WZQRQKwK1r/WwaFHfeTVv3wc
tCdsuNW/9IcX/XiT1b9uRFrtD13VvxSjPMYGO9W/hhWrEjIO1b9gi1yvjNzU
vyeNe2VpvdS/mSEyLYKK1L/xVyYHxTvUv9aWs4KADNS/pZ6u2BjJ07/Gv+RP
W2bTv71+fXwXTdO/yDVCbnMT07/5APl0msbSv318mTyoRtK/RvYeaFbW0b98
EYV5Lp/RvxzHhj2DO9G/UJPmAgO70L/Ma5wrugLQv2OekHYkjc6/LSA7zR9E
zb/Gb+BTxLvIvxB0VNvNacO/ECfTTA==
        "], "LeftBoundary" -> -1.2666992147795368`, "LeftScale" -> 
       0.20060917237550235`, "LeftTailNorm" -> 0.011]], "Entropy" -> 
    Around[0.9592977740892532, 0.013404012495377662`], "EntropySampleSize" -> 
    1000]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{
  3.7728145984700885`*^9, 3.7728146354628344`*^9, {3.772814829376995*^9, 
   3.7728148442302847`*^9}, {3.772814907492152*^9, 3.772814933111657*^9}, {
   3.772815048821305*^9, 3.772815073569142*^9}, 3.772815200470866*^9, 
   3.772815708598374*^9},
 CellLabel->
  "Out[259]=",ExpressionUUID->"66865cd8-df89-4960-b728-8f0d351d30ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "@", 
  RowBox[{"RandomVariate", "[", 
   RowBox[{"ld", ",", "5000"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7728147738793707`*^9, 3.772814791942112*^9}, 
   3.772815077427827*^9, {3.7728159955828395`*^9, 3.772816001870055*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"e141c67f-00d0-4e4a-9123-6ea44749aedb"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
09E4s++s1dYJeHrpl4eE6zConP0Q94tnAB9Huls929UOx9abSH3m6gMWO8Zp
hc4VXHWKSn426oY3VFTH+nrpQJ62Z3fQG8F1BTHJqaKt6PpEN820pRstU3Jn
3iSWotqxD9pyO0YxK/SJzQzT5+3EQ+43/EdCxWbuW2N7xiD25/vfidwMdMuP
+HI9nowHtC4NSMhTwHByqlR6axqe/6EqaNoyBxuP6pSJiBfibrV3Jv5ZJBAO
PKBz8MwwbFTt9VCuJ+K6Xzy6lw0I+O4sf9bN6gVoIwx0DBOJ8NaLzfwiOx0L
Pn23MvjZifOSL/IuHq3D0w/G/N5HjaOArAV882HAmbt75SqzZsGrXftxzSgV
t7FwyrlotMErGfvVyLs09J4s4iF2/8THlptY1RKZfO9xxSi5mgT6TkPubl/I
2Oumtyc+qhaeZOs95rOhomTCos/NkhGskflRTWTyMYuLgvOHa4Owl4XttOZo
O77jd0jZad0Ga21CgXJ8nXDQR5ltJ/N8om7VPK+omMFPr7exHfreBZaJjXal
SjQ0CLnqqaTC5PjAK5HWHHNgts//IqOCCg4mPB2Oz6ZxTHm3taEK05cjqRyd
6tMotjP/y4nby5ias+gY/K0FNuqrvtsfNIJv/f44qTgMgIvpyWYb7SGYlv2S
sk90ACWq9WR+roRApJnPYELVFHAwPlzreDQB1aQa76PM/P8ckKo4xt4Evxvt
+NQeUVBoiuH6u2ABNlpnxYrr9KNm8ew0IYYIo8oq5iMn21DglF53ElsPkgpv
8Wn+KkO4uPXMPa0BSCU8eto1TUNO7WjiyPMJ+C7c/li1gobJzQL/bR4fhY3P
u5LkmX3Fna3EQjV1CjL8Nc63qdOQ5n1721nrJZwgbBaxvUsAvUuNf4L8u0GO
fdjwDEcqzDJefD/zYgjWMtf8/O/24Utlxzf7r6xhTLZ7+OTOAfxs/UZdJGcI
3+xIfNrF1gUH3qnUFm1ox8rP27cMX/yHGz6qv9RT/QhWug8W7ptNg8z9PlJi
Wy+sae0d/PiqBBU5n/PF7uoF/97LNwsT48A51Ko1sZeELS02W7/wUkFgU45y
zwqbLvFEhamPLRlAfOHCGc1hNHGfPs7KXQv05+HrnonVgEiRRIeJIAG2y7Xe
0OmcA9fhTBN1aWZO39IavJU3DpqiVZNtzXQsPLnMZfTXFSv2fAXupjnYsLFr
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
k99dX47AkNS8ypdrLHQOMJ5v6OoAgXa2yo06Jv6ICvsis7YNL5UZv1haPYCB
rDi64rJvln2g7HliPQ0y+tG080556Nnz6rbB0DBKPwm7uGNgBMoDnR6OnyPg
LP93UmJRJU5SUuQDl3NiZ0CuiZUOFYyfHi8nztMx492BY/b7h/De2d1ajvfm
4P2tAV29NzX46btS02UTBhzLCFwZv5WDGV43bA+MDwGtVbocLzGg0CpEcXUX
DS3Dd2xYH8XEXvdcg3XmNJA9ytB4ojqNWZL3CIYENiS4TvoZ5E9DLOerTrYs
E099TRJ0sPmHyhkLJ779qce7PuffR8SMYNfYcKzs61mY7evzJyQT4G6kgvbx
L2wcCrhvtvr0CHKbCS59KuHAuY/8nj9WDaCUPZmPIZSFqnV2d56HTeKJKS13
O/dZaF54NLkluR3HuwvFz7gxQSMuT/3dpgVw/UAx29tfi8nJN7InXcuhm05t
j3Ecg+lQpQTf/4jQbn1353s3Nv6TbCPo8C6B5uq7KpoPmiFo5PIDbvEBMNq7
7gwnNgFl7tKkzDnl8DVxePi69jDYS5t+/2+mEy0Wuc6uI7bjWEg0ptixYN5I
vHun9CjKhKg7ykbPQ1ip1TO5yzXYkjRnGmpJhhY1nj9iomzkNm8XtBrLBNfH
vfqUDBpKLw2OZXfHwwSv5ecePRqWOpcd1Vu9rOdPD/5sTirGH3aWpdVqXdiT
bn5JNqEJz9xaOKkjQYZcwxe5DCE2XntW5a59mAlp/JsHHmpR8aj3gNXCowSM
y7264qYqFe/9KzMfPDgIKokv6rnXslF3fd2OHNkqKHxgUr20dRj2pfQIDTAp
cPhp04dx7j68vI4S6zJIhScjZyZe6DPwvXSwkt+Vf7j16c+ukytL8UBi/mW9
+X7sk6UweMZScfwOJOgVEvE//0s3wgz+QNBs2cjwIg20L01dV0ibQe/ohONO
f+jwmW8jNc2OgX4LKcyxCwvYXHFv9EN6DXTUus1HrIqH7E+i/3jPTuO95Lue
LNG/4Mxy3dZSkowfj587KaBRDQHNJzU+SDFQ1P1Fl93JMXi/T+ItL42Fmw5k
dnKH9mNLUb5wVBsLZrMcPRKeU/A/RRnahfcDoCzaEo/tbNCsjC1eTyCjieD5
6O6ONlSP7/9VTWjDzvODaTrLefVpOSGMKUsCT+LNC0yPYhTUzF/VJDmCt3gq
VPPfLfvb2ptCwU3dONymwXpsv4A8Bw6sFNdpBhWXGOsEZiBcb/TjaN+YhEiz
lTeu2lHBRzx9/Lw7C3kcL5hzkiewhPOeuhXY4NehN/TIcwhzXFNOK+QNwhjX
hxhubR4tvZZay//1zx3mdQzi46aC0hfzyebHyzzOEx5Wr1OC2xLBwHOQDiKW
jZHUKRpc4UbbXXsYOJF8acU38hyWDefsfio/AMFiKdsTPOfw7KMA7fmcPshc
03dRM3sOKj+ucObiaccfF3bSmO+n4XmwsNjalSyMOi2nadGeiwPVb/J/Ng5j
gMyIunKPB077HRw/898UHNom5/xu5yL+svbO+6QZiV9op5mtw90gptT//KUc
B89sKWmdt2tDW4vRouYaBowzvpXlQjuSzmz9QkjsRMODPz6+LVvA45PdHmeU
66Bbn0/h0KoF8NA6/P1S/zfM20Jc4yrDo3XzZtcLoYAZsDNyneTZVIUr9LV3
Sh+egZfNexpCv5JAx2W0yUG9HY+32W09mDGDkW+8iHbC/9uHnxO/zptb65ig
w6vj34eg4ydtXfrZ5dy5KOR99uUMtnsRb9482QLi5MXP2nfo2H2pq2x2nIV1
xQKRK7+OwS/bL2qzvXOQ4/D0OE/QAEL+QY2Q4OW6ObM3zNVpWQ9Xvj02aViD
1EDLUw1u4xBd9t3vXSoV/Vujp/7XD72a4RxoYfwdTDe7Wi4aUNHcwEtKoIYA
K+2UZBLUOMjNFxG+/R0ZL5059Uny+TjoHdFIs7CgwurNstd3nWYiO2zYeS5p
Fk/nW7sZryWCXI9P17D87HIOXVXb+ZOMH2xGbmzbsYSXbLm+VveHYaTvxfhj
fQTMYB6N0zrMAW19g1GnCDJcXr2jXGqZK69oZHzkvOgB26tnNFhfmXi5zkae
b6gfn15pKHT47Qk1hzJ/+V9oRWEDKdkFyX4cbcj5l3tlAb63Lsl7KiGmKJ8/
G6Dbj5xzGWfWeL2BHXdqzYJVSXg6rGH7SRobum4fiNixdwn1d67ULgoLRk9n
pqp84whuU9H7k/yADRS7zP80RTrRJ0Cyyo7AgitJKcTIlDl0/piwpEckgTv1
g6lP5BAqcKuLDzay4WrKxlmyYwcGeSx9+qnLggrPY+W+C13I7aKwSyCEBaWr
8BZHfRI+KyWHkUeY2OS6Z2SclYenEnK3J36lwyYBwllZvUX8XpQn2KH5DezJ
M2NHBKlg7xMSnSvJxESDXOcPL7rA8G3v2dEHLJSjbd3V5NUI68W0Hf88paNH
/EP3pLk63PqgT55LjgFP+LVjX5/ohq15nR8ctKphUlFevXyShGqvTTOvnGDD
ccvbPrvbFsGl21d+RDYLGVP80wraDWAQ6MfUTWCiRXrogocqDRlKQ6exnQk9
e3ueBNQOg9U1nnMKHwh49vTdSbnLXMU6N25dGrhERLne10MXDi7i+dNC17v9
i+DnkWpu3QeLcHBbjMiqjwijJTe/n9gbslyXCY5iPGNoMRFeyx/YA7eOOKwX
GmQjo/TIdafl9yC9Vd+y2IuGbZk9b4zPcPCrJs12amQYOpLHlcXFa0FUIDvj
excDAynT94TOt8GV7FLe2moGfqroF1rTEwbXh0N2zO+axN4nYa/VxQiouVlM
gJmUCS+oxhVvuglwv4l5sDyjAUU2+j403DKEQ+YmmbaHiKAicZJ6Uagbk9iX
BSSzGPDuWr6aAL0fRe+Pnv16gA1JbzcV2Ot1gHJptrbP/WVu+J6j6/yMV8vc
3NLrpDIHfM0GK0pmOaB0I1FYcmkAlU1fZylQ5zHrzed+sm0H5P6p3t/mzqMl
FK0Xw79+Arh2duiQNdtg3NnQvRVZOHHslLWC/CK0/2YSe27nwGqVaNul2VF0
2X7vecFZDlgacSR+RzFg4T+VZpfaaTx09uPezXsGIGFrgcOqEDbeyJaVbeOb
QoMVwQvHQjjw73y1uvSjBZybIbdufN8Adzx8AuydpmGT8HWhYk0Gegndkvmt
RQGZD2/Tu1P+oo9C4eruzEhoTE596lQwjWnWaXc1LpBxW7Vni0MBBzKzjnpR
B2lo/s1lYEiQBbrWQRLBYjk4UnRVqP45FZRXS8pwdfyCh2vpnpyhaTTzflOw
4xsVGHORAn+W85Dqa8sl1c4F1O8s6AoZKwXv01GV5jwE+Od3tnaSw0GpP47G
vD8X0OqiBpd4QTPUJXSHDO6vhNnLNgtLAQwc3cT65nOWg+2LtUP3+cdB3J33
q4FcG0pe33mhILkPTV/7/LrgVAv2d36p1twdhmd/DqzgTkqArrPfQkeejoHt
xPZr2z71wfFQ9wNGgUy0zL9m1u+YDOOqPuKR7VR8kKsgavZ6HsQ88uxERsvx
w9CPRncrrmJGiUazzF8SrnLTeum5ugCmv7/j2vB0EgJR9bPYOxpq3xH61rCZ
ATurdwYa7Y0DZ8ONof6nyRBaZB92J5EC657yytiuJWBMXeahI86JKOxc/Suc
Mg37+HIaPaZJIDinvfCsqAMjCvb49uVmANNhj3/uFBVvXcyqT/VlokACd9Y+
OhVMhVdVSJQsc848eYvtTiLWjJh1JzR2wGHG38cuje0gtlvJ4haHhMUOygzL
2WaIuztweobnLV555n51JHQaIoKGh0R8+tB2cueXwu9seLb1jZ9Z2TBe1Tw8
RFZmAagHHkitTARV27WF08v80pN8dSA7sgm//3iqiteISKr/pRrg1g3JijFq
WkYM7B0KlPh6qQzpM551BXMzUKJa//zpWyKeLHut/9skFx5EFvMs6cygTnFn
iQM3C5YC7V693tgMOX/aptbU0dD9fXCTaBIDOkqrtr8rnMJERYUTmxK4irm8
+fm6a9pQVU/cWLynCLYaOZc32y3z5RZ7RsTDUTg+9S2fnM7BgJIzYe69AyD/
/fBM5jEP7KiU8dEdnMMDX1oj/p7rhhN+0ktPgQDCq+wGFmyr0aJudYzfr2Lc
wBp/lKQwgplyKzNZEX3Y/K2U17OWDWOOUyf8lzm380kwPVp1GH2NnP13neuD
VFm71kWFahhekaP7ZX0PeNxwddzIz0YPx/3nn00uoNfWsY3PJv7A1z/Gboyg
P7B3+5KOZysZnitoRz30GoSwVXNmefdJOBjr/UFq2Z8fVMrRjl7vRfq1B3Gz
Cy0wV908fYxAgGfxNiV5R8fwhc6HrP5Y9rJ+hqoujc7iY2s3iXOXeoDX5sf7
vjuzuPdQsvIrFQrwZD1/UnGDBE2t/lr9ohysF/HmpVtxICXEWPk+i4IJf1aa
8BwfQptCbpJmIhukJ9jV5QpDUPx5XGvOho2BRzUNzJwH8WhfCfud0ijsdbNJ
fzyZAY4TV3IWJGkoGhi08HrHEIzJMM1zqETsr6s7eeo4CS39CiqW9Gch8M2a
3JSgPryySmuVlA4LWDoSgcPKRIg78M76ezcLFyOfHrt5ZgpCeJ/sMDzMRr1b
VWuKOMvcovxsn2g+Ax4SV2f6KPVD/GAKF7mfgyFOKaZrfRngzjd2nH+QinPy
j+MU3FqBcLT18AmPPrBS5Q7jjh4FrbpNRV/0WQh2DVt+zRJQW/dk7bQIGzaX
TTWueruEymTRYc6jPFxXdmRc8H0LjJdYXmwQ/ANr1XuSTNoW8PLgaLZHZiVE
G900MbxBQ84a2zovKRYEKLd1l3HGYJR/0CLyFQuJZ8zOW0SVorlGcHXh6xG8
71A4w4pjY06I0ab/psagtPku2y67EOx3bRwmX5nBqHNHRBjUGVy6L98RtZ0O
fZ73Xx/qpMKYrtipkosMNDemfizUbEFriTeDWst5dvDt3pjG423os2ttx3xK
H/72vRiwxqYZxFqDnf+YUGDwzMtQwY8UXCj1k5F9yQLv9N5vMVJEyE9z0W3r
bsbSekKQwpcpsLimUBb4g4VOeTqbNPfNwJWQTRvddOmYJ6QtcIJ7Du/+5360
P4oM25JthSQy5pBvN1+9ZScBeJwEg1u3EUCm+ly9YT4TZRf8ou7BHHxh3eh0
Nv+D54fe7aeFIIDIynsVcdNwuOnqRa0OMmRovtiQFt+Bm5NdHnJf6sVSh+Gx
MxvrUUOYcH1+AwWdTlcHpVzsg/431s8NDnLwbamfckrCIJBaN1OuXSbDIxPb
vC+G7fhlyIbd55aE53Ydf/A5aQLdDCQ39h6nILVvUqtUaA5G7tpWNW1ug4Ph
99Feth3mEv2e3u7JQ8cC7eYadyqIJ2WpW0AsvNNZa+o/MwWGAmOfNl4lots3
3u8JfGzQlqi6aOk8DqlerdqOH1lorCuY9yqHAEXyyWnDX9kYe+VMv11/E2Zf
PCVzk5eIg69HFoRu0cCj47U0bdlvjKwZTYRwMnY9iypY6uoAma9zYr8KSaAW
div5zXL+zQ3S/fPBcRgkO0pWx34hIiFfs8C9tx9uNk29MTVlo9iMiomvZTtu
UeuuemPJBIajt8LJ9mW9f1mpoPahE4/oPyzNnWbABoZERP3MFEby/XQVzaDi
o7+Myn1jLIgaJvnRrP6g0A/Vx9p/ltdBTfbnv1q52Dfmk2IWSgOlNxvOfzvb
h373PwRHfKpH8xAeqSY1CgqNNh4O/z4Lx0hNWXqCRfAje3Nyw2oakjK2XP50
sR/OnP31Ir6Yjf37emVb/pBh8JIWoexUP475rRYd3Myt5XBoynyjKBWul40+
CmrtR1rfraOSw6nId38gn109h3PHUrr+BbdBnKFXl/ahDrwiAIZlVmxYF77h
x1Y2HXRipNd/PT+Nx7/b3poVYKKYGE/Xsd00KJLuqW/Y1g2fOKrW7GQWKuWf
dt1EoILeG42rEfr/4wMxTaPlvPK6rvuTvwkLKEqRIzIUAg5lde9bjOEA+7/a
ER6NOZw4xD+qW0AA5s/wM1cVqRivNV9Hr2bDztPl1gnLeYFnfXvzfHEhmF08
9ev9ejJUvyr+z4/KQmnnixt0102h0DibrPaWBW3dTpvXlM+A+1jmlpyXNKSp
k46GilKwJ62hy7usFAJTTKtU/w0Cj1X7+Z+jBJQfkNXwLFuAqZOJGRceVyz7
b/jS8MOJo4JFjvKDajMQCuZT//uvhHjo3RZjDzYWCbUfPErvghDb19/0S/Jg
ZarklsYICnTLF5LvG3BQpL94quDgOHyVcaG4NLDwh87uIz8PzuGYblxnhSIZ
xk9UmiTmkLBLeivxXAcbVKPbhWUO9kKa5GPV3p4OwMtufD7PhkDnwMEfZV8I
mM30cZNZfh/pY1Ub1qks8+IsQ7l9iQHO86Yf9+6axqtn+DxVtAfhe+gR49rr
LGzdWLiRdjIb85T17lRqjePUgRnByYhh2Pnh2V4HETYqXDtHZXUy4LDM6geK
pjT0+VHomXU6B3eX27eulJgBp2ffHncv58y8mvVraZx8TJ4fN20XKUL63Zyo
7v/1C9h4yIjik42XLmsIuhvRgKlU8nviciQs2rhctDo5jayET+SHiVzFm+1H
9vGsJuD2koVoF4dBuLRWY0PiWw5aPpKNW1dGRtvTFwdl97XD5sj4XWYrWmFI
16yDd4mBz4f2S0VpdAClSEnciMHAAdN/k/pZZPC4kxH3YxMb4+1lVb4sj1Pl
ovEWlzw6Xt2dpZ1xtBSp0hZRZxXpsD9md5ODySzSVsqekVAmQEyLr7l8XTvq
qV42r+5sw99+N3NqTSohXaT+1QNLCvDv7qPE89yET6/5ZUSuUUAowmGX5qM2
OPKqTf6yZjfw+Rku8dVl4pu8bR/PfR5FfHv7+pucLrx+NJjrzP++J3BrHfL4
WYcpx8aE6UZMqBZb99D8Sjfa73UUljJmwlT+JNnZNgE+Ejc9+dg/ATLyxaKL
u2YgOene2ah7dMy6ksm4NMfC2Ev75PZKToLW4hF3q+ZWHHquMn0ngg2N1ELN
pm8M+B2zOblKfApz1gunnLXqhJWvXSW++LSCvmOs772VkUAqj4wNmZuEd5Lx
Q3SJdGyW6vbg30uFjeuDdwYKjwCFVaT78VI/ksJDTVKX/cF1yDj8xfZidFC/
bc6MHIXLf/a9HnNi4sDiTv3uiwR0ZkeXDyTNgbOistRc4xBsP1jaSXJgIdcR
uTnhsk+4v1oyuIFvBkj6Edz2J5Zg33C9h++1Jsi9dF/r+PZmMKJ4J9Pe09GF
snffEhJh2AYXK9Q4mCKxxdqijA2KdWHONpdG0P+it7tAWxOsLk/4uWGRAlE+
VUE2x0hYJVdX4u6xXA/x91jxh5n4tLQ/mWpOA9//duX6Bs2D6y4XMYGWTlRd
bH688wgJduwyP7bv+jIv2Sjp3XhMgO1vhdSTCtjodwF4vrdNgOJ6hb2NASz0
zFJK+jDViBaxDC65BTocykl/NvuOgGMD11Rd5pkg7955UfS/RtiREFUVsZ4I
316++qWgRUPjxA8uxwsYEFZRcluwZh4m+l/tf55YiEzrmY1vVefAxqJEcrKk
H5Nay9gajQ9hnmHX/5Y6haLdvEG8cekoyJw/4vRxBvzzQ4kpJp34e0DkuKon
CzJl3shrrO6BBwPEF2u+s9Hfo934sVMpipc7kV6JjOLb87qLD4VYcMPKMhAc
J/H2x/TEvLhZtFzhcuo0NwFef6QU0bQZ6BlkHzKlOgPqjnziaa9IeMBfvVJZ
iwM/Dq2N9hOfQfns5LF39gwg6zJTe26R4Yl/1KK/Jxu3upvc3LJcf1WzNjnD
j3tBVf+StHL9CM410gQcQ1iQQW+evb/0HhbW7uXfuoKK98YfWcWs7YJdBp3v
SC0sfL6wQ2lPVSeURoXybvPqgoeL1au2f6yGN69u6hUZDYFcFW0kaMsI+P55
W0qqY+OVYb9OD8JPeMff8s/9JxVFCb3bXEr7sLwp1T1XjgWEunemUhoW8PJQ
r+uXhSlQ4ZFaf7SVCKeipjgO0U3YsF231lyYgaoNQWVXvekgJfjErLNyHAb0
9l9gUZnY6UrMEOUMw7ZytdNbezjo6GsiYqtJwbRe/Yrkgiao7/XQO/meDM9q
jaezEwfQa6/w4bQwNrg3CE0WXB/H+nTFjMMDgyCQSryr6kfCIlbLnu/NqTCV
bvLMhjIJU402qbLW43CSW1dIbXjZD7wS0vKmUqFBfoDXgUkDvq6MGMnCHigg
nXx5fqQCDJ1+f7n6fhLnvwocUQyYBYvD1llVobN4cPcWXqUnhGUdaPxqEN0O
3q31NWoDzaAnFTxZYcjCGu2e3qM/pyCQ/ogrIWIWWpeeGPxq6MGL59SXZ6UC
Tjkqq43k07Fl/Dch0S8HZMzt7YxipiH8odsBAeUeVH9/oNlgsRk1fr1dr4Uk
XGs5wJqPzIQPyY9z2pb5fibEtm/fKAd2sy79Fw5D4POcO2htJxHr6qR3ZVsP
wU3jTnM/FzbKTU9S9tFnYGPdnYuKkzOY7bvFWf5JKby5e2tmN6sPPpme3VG7
h4xup5SDPjz9A47RO51uTFFQ1X82+HnrENz5O63ZokgC+21HA8oYLXjUnfeW
qy4FvGXeRkqKs/GdTYTXvZ55XOVnphXU0QjbFQafBi6N46m4v+ZXG9mw+IU8
rE/lYNnw7TXXkihgrfbVW49cDObX9C6/+DoKHT9W9UWdJOLMywMVrpLLz6NW
9VI9sQXbiZeuCa38i+bKeQE7vBuB//Ex787UQcjT3epK7xjES3/eWYe1zEJX
4LYZr+F2mKw5OBcX2wwHvaOIp4KmYP+Y7KDbPSYW/7pG+lFKAmnlo0J7FTvw
gqod5cl9ChxK973hYU9A42yh97fWLPM7+Rrdak8dluUOcm2QycdTns7jEv4j
GM7J1Dd++wtNHlYM3rQYx26mUu7B1ibQijCkHHhFgfOUGLH7u4lwY3vfK9YY
Exc5er9rGlmgZvLp9ufSMXSsklT55MPEzRrnFta0UmHlr9l72VHL/DGuPUYP
ZqOmoZ9nkWonelNXa1V1seBAmH9p9DAZtJ1WZDZuIuBCJM2A4/8bnnqHD99m
U3H3nshrajrfgW+297Sr6ww2f5/bL/+2HzfpTVcpaD7CZ8mc3m88QyDq1tY1
msrCp6wWlzSLWXiwb+diUjIJo/abQuJPCqS/jZGiPGJjrcRhRtrGQZjhU+cR
fkTCds/gKgOxKfjSKRqqI8/CP62lXIweAng1jZYpWtZhvm3OoXcLlajRMq+U
+GUQ1QsdDNaWEsFpa7q07r5WPH3e4bOMTA/kVP4KqR5lonyOttHv6YewXzks
t504AZLJV4K8mzthvvX+lRXncsCw/D8eL5N5DHty4uUbiU6o5ppydWoZgE69
72sb65jYkMZcjD43hVsZwSbClRzYYjbK3XdhEBziYyiccxxsFsV3UkVDoHBd
f1KR04YO5fjodQ4DV2zVrYh7S4MXvsQ9VgQmSNYlhExOTSCjwDTlw9NeID6w
i9kkirBfq7bz7+wQypFcMgmniNA3pKJe2f4Hw7etesOjzISfTns1X6fQQIFx
deTPVjpeeKHazfEtwN6Xl+7VB45i7vRYt385Hd/90v3kYcmC041iK9z9elD+
oMDZnQNM2K/CH7COn0vr+e13oMPTA1LNAqsE9F+Aj5T76cmiGai9sphVfaEF
jMY3vg0lUECNwhbXIoyiRZycR4nmMj/UnBTTvDELsb499Hfj3dilfNeZ/Pwv
6H7dyum3awR732eWVzTImKzoE6q4mQMLutyXzxNJYOd4LpN5n43cJz56VrjW
g9dRiWbaRzIkaQ5HDh5Px+jHguNM4ykwk2GKv77VAMXhqTfldzLwR9XRBwOb
h9FytL9lYy8JOPY3VpU8moJHZrkH3DsZGHCMb3wohIVR8ddKL4hMAhOa/B0V
yJg3u2bHbZEJCOLiEk+OLIA3qR5mHo5jYGzTrJdTXg/+ERoKIcoDoC5S7H8m
PA8VOL1tHjU0CPWpflf/JR2LyP/1SShPoszqzYqSA2wMOciqFauegL0eitxu
mnPw68jQhysB/aiTT2t8K8GlZUtWz+W62QeVNrefvljZCetI1VPcE3Vw2SLA
PXRwBtN9uK48X5qBEh1+8nmgwNxcQUSbAgHXmJruCE7tA7fUnWlTM8EQ2K0e
muaSCj5CeZ9/69Hw8bnni+PqM1BvIeUreJiBF2zzJVedHIPrnvfaDP+337bh
oZstX9kAZDn9jZ5DKPDshWnkVS4tRdUDgX+uDICHnjE1+jQFVWQ81qgun5f2
bXhdaygDPFYGPHhWTEWBfFDpersIw3xOaa3HsjFxb/Tx1/ZM2OFFDPonQ8Us
FVn39zZdMMnuLNP3roWHWrfNCtY3oUfofGCiNAl1j5K0A9nZaKmXflDbZhSr
mAHhrF4i0DOdUrNz6tGsp2Rb/7459AhSL03mGoATkf5d2kXjGHwtue/+/TnY
sy3RZrs0Hd/820YweT4Dek+EDxD1F7D696qtwrFNINLx6oPD0yTYcnq1T0U1
FcjC8wGfrzJgrfFd3w1bqViVc6PTzPUfCsT0kX7M/MCzX2IDjjz6h+Lp/POr
vxQjUa2n8sMyZ7SKXhyx3MeEhaVoQVP7ZZ4PlWn47xQJ+BgyTUaiNMj9qsb9
uZWBJY2vH98YmYD9Amau34CNRhv9bi+rEbB+OttreMxgw6Bu1g8rEmaJKZzX
KaqA4oRqJ93l63Ul/8d9LGkIdpjEcKJFaKj/eGNx3AwdVMWzt9xdOQIPstXC
8hcJuML8xj6RojSw0OoPEzhPw8sHOk//Eh4G7ZLxUKs1bDxjMp8RnNYNolw8
T/KeN8PTQ05RDpZkfKw6JV53lw35zBcdw3x1aOCeobDRgQHYYGh2kIuBUuvy
vmq5zUBKXr36zRAO7Im/XHRBioK5oxNTtz/PY8oD2RgT2R646vfqXFwmHZty
/ikEBs5A+3YBq1M/S/HXvPjn+CPDuPpW45cbnRkY96ZDdCF84n995OZ+OHeA
xLMT6/kklsc3fvRCGG8LuvzcTxLC5XUku03k49IgFk+fMRTS6Yede+a7s/ZQ
of/vxbhXvUyk3PBPykqcx9ywbgjVaIA+obSM2E1LODkSFOxV8AcXpVcU1gnn
wltywLGs+hmsenz72P6ycdj2iFVisszfjON85Pr0aHT4bCu58+0EECP8KuUK
aGglatEqs5UFZwVWau516YEyI96s5KMlULBfoHUpjIPz60tnbYxGQPvuee1j
lCkYogfUGd1j4GCq184zL6hQraie4nOEhUUE8Rs7SQM41j+wbykuEp9d6RsP
II7hgs5l6VQyCw6/jH2tefMvCEmp8RY7NYM0J6hkm+cQfL/ZrAVLbNSvelB2
tnsQbo0W9h4UncVH3TtLIwNLIDzWPjibSAFaX927TzaLMKbg1nTTKxs+beXR
cBLoBH7fg83Tx5komFzfGDc9gSs+vWic2sWGX4t9fa1JFbCresPZhw0M9LtG
OHU7qAmPXQX5yhw6eCpeDU0PoKFR9stDl1VZoFFqPExImkMXRWHXl1L9sDL8
82Rq5SL2+3/p/1GdhcpehEOUggW8KletRjpcB8T3Ha5ml0iQyDo2ue0QG6fF
UtJOxFVCtKlKnOtpIoh6yRRP32nA3e560pkWZPR9UTf2aK4Lg6d61kmcY8Fd
P0HvtEs0DLY12y0qQYfY54GBK+c6oUaYXWj7pw60bjkYbFqoRpmJLonbD5gg
3Oq29l5mLYgH1EUe8SBDpM6DsVfxvdBy5HxrsxkThz9Hmd+p+f/9qcg9HU27
+TrgbucZK0tKO8QmkkdW+JMh4Qg+HfVl4e7h44pxfBlwvEkwWmVmEtRSj3Rp
lwzi/Lf+B+FqHHApGJw4aTyHKz16LnRyk6DqXQNv4FAfmBN5L4vUPYNNEy9y
3r5YAF+ZQdPg/Ex0rFhleOlxF8SFyXEFLf4C97eV28XS5/GWbbPYm8ctUL2v
V7ZSfQhkvQsWmLpstL2yubB55CfkrVt9QGb3DJYfnzaNtEuHtFgDs5sDVHz+
pLBifAUFnO5aXs/sYOFw4JdZUxUO2rzszNpjNQQF/8Q2XBgmLue4T865f/JA
NS+FQEmfwHQlnbVGDmwYTnToW7yWD2Pf89/dVhgFOmuG65xSEWy5djCf82sC
NkdtmJdR7kYb3W66kXoTqlvs284Y6AHDB3PTNlZsvMmjMdanQMLY7vd/71qw
ITbP+JNpMAMLR45asOvpcDquGSt3tMOHSI3KfYdb4P12F5WfdCYqiyypHmqZ
hnOagiGf1KJgpPL3k3EOFUOfjoWsWeby+IoujR0abHQ7HTb/ejATir8qfFvY
TsXgd6MJtRL9aNbfsbA3+BN+M9z3KdThL5z1VDlONKkBTeLqaC95CszfEi8u
k+LgEbm1xnUlLNymICb8pHkCbmxZ85NxkIVHRL7O2V6mAm3TNWuvdy1ouGpV
JWkfEY/6aQd4Do9gurjd9wp9DsTLerRYnVhA7EqaN7veBS8Uf6483beIU+Rp
af6SaKgtuzvl9puDVsl1aVW7huGi2Avhaj4uLT6HNE9pKyIU2sB9J9MhbMgN
J5U3EYAyqZVz8BoN98n9Xf1liQlbqK/2fPpNhxWXWbsPFiznSem6zR5ABZLE
Jfvfswy87XB3gxXfGKiulTYJFGFjXe+RewNnixCbnYgSmTS46URLU8tkYMdB
iSjTa1S4k5iV/l5uAnn7WrW5lTgQxRu79WEyDb9fs1ZyeMaEH2teXn1CK0Zq
s6TYYjQDrDrUSCd2MXH8l6zh+zwajAbzFBy5nQwJjaox69jTYC2yv0lOoQ75
HimI/85mgchwzDuR6CWUCngtWdKVj2raN2XtdzYBmBi+3yZOgpq6vHutfu2Q
fVn3qcg2NubuuTG49i0RVoj+nR9IYuPOjhvb9SjtGHNI6VlzDBM+HLnwfFMl
BVKmH2k5+LIxdLNq1eG9XMUq3VFzkPEXk4Ye7FlHG4BXjilvH35j4QLer7yq
RYYP9o4nG25zcMJox7jKpn+4c+C4fFV+C961HiP7jAzD47+Kn9dUsJDieqdG
+UA7Lr2xlZ2P7cD7O5Qs1gdnoxufSn+eHBVeecdvadrKwC85V/VD78xA3d/X
SStIIRAod+D1YuA0ZvyMj/cv70SLkTSJ3yXtOOt9rtrJa5kjtydWJCUPoAzl
1RkfDwpI39g+y9xai4k9mXdMS4gYlvJaofxYCdxRCa9cJ1oCcdVzqompQ3CW
wLuXL4KOQSMXDR4Uz4DrVifLS9epqPg4blQgggNmp9UUXXgXwbKBb1P7zTdg
TtI8kxjGgVNvqI0nXpHR8ZbFLTv+f3iP+o/XeVcj1t/OmLOTGELlq6KfcyVH
IHtmz4bryzqdKuexMZwyjm+MPo0dHSYBz68vGSI/2SgewiIfrSvH+rnCPy7y
M/BVMd2jf3c70KRtb3+VY+OWtavfCETRwJj1e/PoZQYyZ/V0NV524MX7pxzP
TjHg/KFrNdzrmmHn5BKR714/PPsmnBCZno/VnvL/PTpHg6v32GHTG4noMvBF
5rZLFhRG2JtonCSjaKt1cFMyB/bViGnX3KZinArK951lgFsTufNqzzyYRH9M
9E5rxeSZ1oD2wxN4Pusf2eEcBz7F79jwmdIMg76ff+8VbwCGdXOWHvUJnDgd
fqEgcRI9T/In6HUsjzuAX2318Ul4cLNAeZ80Ew4fEjZq2D6FLxes9I/dmcD9
b+MYo2Q2vLpaO588SgYehbcxGv/YeLTPYCRXohZWXX4mEPeejqPmBeOlib14
+N5HQafl+jTIY4HQ8wl89khDdp8oBwI+y6XN+w6iSiT7hJPmX9j63PvmjBcZ
/Y7VRGe154MsV2qEWPMMTsgJqZd7MUFU/GXj9LtMHNJ/1N8nQYVLP7Mo7Io5
XPHLdCuPZQ84j7l6hzLoeMPNYLPlUwYkUsarruo2wcTjQ3ujKhjoE1mvl3Vl
GK3OjxQL93NAh2BL9iqeRMjomVBDNqxTXq91uX4CKV+ZOo6uHOidvvd0h84M
Cmps2KKaQAeX6WLzIya/YGn9TW9m5jTwT7mprDtChTUam4ZiM1horuViIafR
AvW7T7aeFesDa+NfitJGzbBS0P1vWPxfuKgy4T7hwILepebA73ZjOFHjVsLs
ugvy9loC/DHTGPHfHXc3zWEIXtVV/f07G/uHa64ePjuFZ3L+Y5eUcUDFmtWm
EPkPA1NEBzqj2tDlG1d7TiIDJhL0vERHpvBJyvhW4fA2UGARNtS2dkPjJUWq
pTYJpzYt7B+YqQaHpVforEXFydie0g3cLHCWu0WweUUFs0VhzpXzTMxwP9/S
KjGMtszC+4MdZHCtl5arFmyHBcPx2i5bJloni/77evQ1SrxI+q9figptLQ8s
24Jr0U30w0PvH8P4bA9ornJtA6sLIkavNBmYIvYvcWCZ37nLE62Z/1iQn2Sl
akyiQ5ulyvdC7RkUuaHb2rJzAR/f940YVO8ERXWtr3zUYchw328WlcLGxpUx
xu25Y3DONPRvaSULd90wt68pIWPsu87hRm020H9avO9S6sE5P+FD/Jua0Iya
oOptNY5/h0VOTF7iwOBFzYFt++ZBo7f3W6sqYu0IcZJFKsS+DYdFcvpp8HiT
leG3xUH4z4Tn0HtdDroZRowrTbfh5IZQ26ITPZiW9uPKDcEe+PfP44/jRAHs
fXelWqBlEZ8q25oXjCSDVNi7uyPjC7DZyqDzJikBzXW4rY5IkyGoeFFJYisb
TTRZ7s/dpnGd3LOaXUlMWOfyPOfhRzpafxthPvpHh36m6qb9e/7CbePwWqhj
4SGP7ikNdxru7DyZcCGCAYq3dA9wd7fhdc2cSR5jJuTKyARZew8jf0rBh8fn
ZoHce7+X16ISjIfjZ/Y8JgNjeB3fqmcVcINy7zWX7AiM+mlIbWfNgM/1lYe7
TehY/2woOGuuGPbbDYrYBNKwmll85l0mHeS3X/xxspaGL6++ENnJJsMfyaLL
9ZO9GEm/+6q7hQTy/dVJ08u8Xb5oTtK43wZ2eU8zdr6pgbCsJg5Uj0HJyCvB
DSc5aDLTtP+U5gL4HxCJ3XO+CZOP9ZCaL1LBuXSLgMEYC0/gVOg7Xq5ixcKH
56tUO3EsYrt39GgGPOn/UUrlpgF38gmHq/wd0Ffl3AgMJvas7Hr6SpwKi386
y6z3sdA7V3vl6RNTeIz4cFWsDwtiy6Nq7k814We+1Hv/rWWCiCU/r0UWFc4k
uFuHRzJwaYh9lVw7Dl4x/gP7ImrRIFCS+3dyFHZox3Cx+ybhoOrqJs80Gl6z
vgEv9tJh45JxkMDcb8jNnVceyKVheHVOwZUWJoQPx0iHmI5hlpzLUNmdDmiX
umPQIfgXfitJX7bZnwCbFXy3q8nQ0O3cq6An10lIptzZMmw/CCoPf7wUCCbB
w30PJdQj6vAE79HplGUdaqissrl2nQ7c+QbHTppOof6dj8mfSlmQtc30m3Ts
IpywHNg2XGiP1kM3V/QasuFU2f3Jm4wx7DXarJCWNIRKu2f11/5igbXbjmGD
63+gvUp6ICSRjh5bDkhN2pJxQkYqIkyvBfgq1jn59CXiKkWFkyfnJ1D6obth
J7kJFUs3FBYJkdBgdeek4KZuUP9kF7P7BxsPTfUIfIsex52qbHcUZ8OEe7+Q
vySXVq2hwNnAy0Q4fS3w5Xs+Pq3AwB9GKpuYEGxksvEadmDFWm6f4KQ+XMk/
4q+pxqV1L+njEXYfAfbM8cT4q7CBttQ8rDIwjKVu+cQ6GzbanZ06IqgyAccE
vbf+2NwE3i8e3R89T4GGZNpEpkMLzO94c4wVQoLH3WF+324NYsMpu83XXSlQ
uShf1W3QhUf2Smz0XNmMN/cgT82ebmzovN1ykJ8JZxWEY0xlSGAvFLxIvsJB
iWzuc+s7BjFT3mrFFvgL9489ahirrEAGX0jO/e10mMOPbrafBoDzzpwmNJaF
z+9/PgswA3t5fqn12dLRsz2TEbuyHxS9tQN2h7CRv3p8c2kLBSLlgzpFf7KW
68Wrp+G/GjwcM9hJsaCDCUHgZ8bzPih/wj8lEFSAJzMiZxnWDBAXYvX8+0tF
SvXlHySuSZB+qm5rIcpB1crPqOw2ikrO10R+q7Jhg1BOQEfhIH6qi31VYUIB
8cMP5QNsidAv4O0ncr4BXziEBK2Nboct9NJGuelGUBt0KbfkpeLjL5dAL5UJ
RQGP388dnsK9Lzq1IixZEC7MkMs41gI322/XxakzcXfM2vvaiwycuiIc432A
BlLy/157BnHw5oMrI70PhmHazuFUw/l56N/jHvd7uBtbCZ5e7mV0qDrO6tNV
peEzHS/6z/utuJDklZ1u240iis10r810+Hub/ye1go5lShbe04YUzFZuCve8
PgobH3SurS1fhFVfWKbjGvEgs17u/SH5JXh+cUy6hFwM5X3U9teJ7Tiv4mN1
42gvHhx4PCVuN4U8I6TTd1PZMETsi1KpmMAPsJFTEMaGhX2r3nO6W5Gz6O7b
YNCNekrn/vvj24QfNZjFLx0ZMDDvVhZP4+CmqKq85LLl3Dk4nmDFO4WVSucO
KGWx4X7DDt+/j4rh/pZ1HVncE5BVx7/uK7MJH8zdnpj82I/k6C1nCorbQfgk
N9vjFwNN/9DF9JUJKF7s07jHe9m3/Y7f3P6NBCKUa6b2f1nIZcH1Xch3CrQ9
TsU5WrBRPlX+oGzsAnYWXVvfdTMf1G6vvy5HY0NmlWjOS9chXIjYMa3UFYaM
KqfeJ/FU2FlxhmGrR4c4E+bw3BINd733EC3nykKFI+RjrY9ocNea50QK9xxe
l6HvrgzthtXlCvFFsnNos27Pt5XNfSBtdu3zma+RUPrlp6jc7AyEtByKXvvw
EUTNFgmG9lDwBNerbX/XDoPe1g6lVE8CCsr9VtfQm4G4Ajtn088zGPz+Cbc5
eQ72TL9xflY2gH2zNlFcfU3w5dlFwy3uLLTgiRHZYF8KXI6b7v7TGoQVRq1r
+C0p0CIX/lEym4gNkdYVR9cwoD95fMW55Vxk17KodV1uCSOTT6f0MmvxX++5
eJPPZFg3H3jQ58dfXH2PdLr89RDgmyDLxrMs/L5/0DzwfDOuaTh3oXGkH88d
bbNokOqCk/r7+nsjmPix6Z77x8xhuDu79GpnKxsHxo/Ze1mwgJXSxN6hPokq
7d68E25/sUbfRkNxCdFnyPmG/No07O8V7R5YzqNCd8o/pInkwIfo19OvN42C
4uS6aKsVPZBqkfrQbh7B8e0Roe2ZDBBa9cmfKTmJjw/y01r3d0IIyu7S9WFh
RAeFWZw+ijP9bQNaH1lgMuNy5UquP6xOn/DrEaNh/d5PYZ2L7Xjng86d2Vg2
rC5dY+4eykD3X281/IaosMskkTDPXQO7PtzeUR41g5cNvhyITmBi31Htqxn/
0aA8Pnxux3siQm7/THbuCwgR2LU3cWMCTJbt40z3T2FOkPD+Bwb9UJylorN9
mcsj1B+/2Cg5guDTJeaszoG3VbFRZUU0tDE4aKahzIArLa/mn+yYX57vy0LW
u9rQaKXS8SVJDvid6tmwM5mM4q4Ssk+2z2DDxsb8HAIdHpMlW3djNfp/P2K4
pEzEvTwBFauMuIoTxOmq/tod6PQndsFt5RLe7tv8Yk9sKhZNtKT2SPVAdbpw
glpNK0yZj9IqflbjBnuO+LFuMp5xEtcJLJvBgptG7iV2dHDfuif+ifQC0rb5
7wv93g+52e1P7uYs68rItVifzBaUt5H/KBg3hG0yOn83FjXBoMLvq/RDf9G2
8fMGYxLiGtNPQQMBhTBrUBJrnz8OHzYkHiFYESBnxYsf/F5OaH5nvn/icgk+
2LsDcvSH0GGLQcen9jrQv3DfNzRpBmOFrrGJer/BvzW/XUWIjtvbH7+NWsnC
nSdX8WXqU2G73v9RdN7/WD5eHEb6FEKTopSVIsqoNHRUhJKiVBQhpShCkp09
K1KpyCYyysw+9sjee+/1eB7Psn19/4P7ft3nvN/Xdf9yBn0IEzRgfL6imvZ+
Bn/IxC/L/FzB2xotb5+0t4FoWsHLx0VLwLNspNY02YZZoxGebQcnYce/Wx/f
aS9gdh6v4s1Nk/BWaZ/9VDwNGwvCrRs4a2Fq/I9SnDsZFcJCeajPJhE/fqsr
HN3owY3IVGcZgGRpZ7LR7hica0+M3vy2BMdlpbkutFGg5GbEsTcso3DwoBXr
1w0enHp2dqU3dB5PlewJ/q1PBjUBOaMzRsMQ1ZVoKhBJR2cxkoiaNBU1QVlM
yIcI03fqNvOkLiGTnj1H8K4B6E15+/X04VXY9oj1VqtGBg4deC2o3TYPK7ZW
l24mk/HnTNGO8xvcZ6F9MmrWiQaUQso++8xJOFxx5WKkCR2rvS6EKkp2oMG1
Db8g0MBdSkdLc2UW5otuXS9XpaFK5LPEqT+NqH13q2h8HgVofvuHyGrzGEQV
8B4cpML732X300p60YLU+NAvOweL5zrPfdSchTj9HVdt2zb2f1HTk3GuGcQs
wpygkooPFOTyTj+cBbJNyNxzBSq6HBbYFeRTDZPCt0WXS6mYHPn6S1JuE6Rs
W1JymO2FDwW9Q85tKbhoqGzwLZcE39jezc4YTYN1y4S39oY/RXGu+kbsnIJr
XoKhx+7TMJ/JWCztwQzk/QABHis6Gi3t5H9ZRIZR5UZWV2siHr8XJxbNvgD3
lm8vbV8exYw8LUlX0RWoHLaxjN1RjPzuXmPLLzux5PBHAQu2GtTQeqo9ZjWB
hmZqUq5ei8AYK+DQFjcHt4tkBps/0fAVs+uMRBkRjUeGfXgVqdC3fjBYZF8b
pmVl2CcAFazvdlzkfZyImn/x4GN5AvIc8A+LkxhBCcMEU3VbOiwWxZSPVZcB
t/xejadqI+A/pvbDe2MezFSbkhK+zgM7T3/x8PVpmD6+pM8US8fVNINb6ruI
eDnu5ecHLVTIOuefX7yFgieXYgpnZckbuVKUxDk8iYGEofSvShv+fihSJOZf
Bw4wt9W5hldh9x+DJ4J5U2ge6Dts17wA0+fDfI0uMhQWBK+t7mzvQIGW4eVf
Vk3AzURLF/ak4ueqE0wZ6TWQuyVYfMstMlbrv/Ws4qGDnnApWffJOIZ/2tfw
tq8JE+Y0Tmnk9uJzvxb1HVVjQBe6sua74XOB/id2um3wVws1+bFh91/8b1iB
YWT6IxB/MOkWhE3B064bfwZsOpBEWRcbkaWB2sPdyzs+L0Nzp5hds10XEs9l
jbcfpKLKh73+MpdIsENYKFfYOxc3LwxdnhudxC0WVc685/pBm11QOm6Bjk3c
hptFhbtBSkGXDjcW8NZcvrzfQj8augl8efIzA/5LiTlNvfgT09lVWDi+z0OL
pd1lN+k5PMz7TqPlGRUkfrpcdXy9Bu4PP/h+cmkGRq/VZxeOkaHJygP1pOYx
QoP379vVSSSUqmj5RyyBsYaA11WlNWQ2TKR6a/jiTwv32FWuLvx0mpTocIoO
FJE4KvB14uT9sDuHTOlwm337vc+vV+C/pN5KlsIUZDFK9GTl7wBeSYNmjtOD
kMfYdosUsYxRxlLH1c93wEohh5nD/XZYcvvG2PSFitYWAZJPP2bh3d5jBYWq
s7jibf28aHMyarS4M+rykuGLf5KPam0tXMgTRfJ0P6ReCr1270c/sv6XcUNc
hQ7Nh/pCE1dScbfA1fvSaxOYInkks5e5C174idncPvIHGgxeHOcKXIQfy28s
T3WMIEtWmLo6Syactfunzc8zCZuOFu7sMBnA/7Ztv9mY9gcUvh02Nnj6D6z/
WbMpvifj2IPAEd8bTSiY/fxWkHoH9jhPdvSL9yPPKl85Lf8vjj+OVN0q0Q98
LSZr+m9o2JN1clX4SxM+tuH68MShG6nMpi0cMb3g9EwnlykrBoXLsv+aJm28
9887r0s9iMA8XhHkLExEhbHbzJkbvRcSWRdNK6/GPUOLd1oTqbAeEibQpzu8
wQOEM0K/O/HL2u2aM0qrMF54Tb//dzrEX3EPHUusx6DDT8XTooZQm8fmoYkK
FcUO9YRdps1BOWvxeetLzSByLLKq7S0VLynvV5GUYJDn3KfK7WU3Ch+DZXbc
DljCLe+/FlGODMIJrcXHMbIreOfJsRmBn5WgV/ROOy5+Gc8qf/LZ39wEESr7
9lQ2lGKt5k03oZkxHLjzVsxKOAkv3AZXmWuz2BVqW+d9bAjEC/IdCuRqUIXR
7GTmXDD4nXx3yZCfCKk8nX+pQyvo36amvpOjHpRkWm4Kca/AYfEnJnn/KnHV
99URtGCQT6sv3FUVMwLJhy2dOtQ3+kXrkfoNpQW8cuG2vFnSKjZFj77XmUFo
P6TrdCqEDsx6az++PBvBe8wUIanWFZQKyU0PTy8Do3l9Xn5KC6ob2F2cPkSF
ircdi6ziS3iqdfd+zqEhyDkg/y1/cRQKhSbPEjZ8kuL97+SWa6Nw+ekR/bja
HnS5u0slx64ITFRJbIdwHJ61P8wMnxkHo2du/X/eUdHpL/es9bceDPy5dFEv
jQDOfBx+JzfmQfsbQzBL4Vvc8ZKPRWhsw5u+3X/RtDYJ7nJ3M6XpQ6A4XfHg
cE4HcprPLTYdpGPmfR15hcFpeNnCPKH4fB2vsA561b6vQr7TJ/09nVcxxFx0
t/eoEcTqByjeeTCADQOX268r/4J/XUrzN7IG4HVCf+rOzjpMKRb++pcjAMO4
8MqSFAF+Ed8+bTqWDbGEK/vu3Z/HJa69vmLaI/DarToG+GjYe+7V6uuhZbCf
2fy5MLUDm60VnBkPj4NNy9HXnWF0vPH3QFIYzqDy69x86o4FUDVM8JRbI0Ha
kw+3aY3z+GtHHAPTpiXg2jL9/prQEAYatzQ7z7RDRKLXmVfFFPSn+Bzgd2yH
M8YuFTu5qJjrtvvc71ESjkoTMgre0UCgqymWyZiOya1+2obO01Cs6Jy60kqE
54ljC1cdKainKldYeDMOmxs1fww8mcJvFjq6nmE0jB3J0mUSmoVn+nDV6k0F
/OL5fGWQYwLWqr24FKl+uElkgl2ejYC3f9wxKi4YQUW9JqIsZxsYEpmylY53
QMQ3W5fLZTT0vP1ZQtVrEKPijOhyOlVQtZeNsVSuFtr87x6qbqSi9ov8LRYp
g7iXEJthoVIHv3I61d/HN4FwxlYel4ZGeMO6vidBeBEyhg2CgneM4q5Lx/m0
1muRx3KY0H50BN0ly5cEWczAyDRecaVsCluTLxxZe8cob6Z4fX/lz3lIS3p8
eHLDd/67XSReKk9HsZAcTrdHk6hhTA2hGy0Cu3Res7nuX7hjLf4+eycJq45/
5z/JWY4Bf1dy3JjGcb3BcLcFnQ4MmS4lW5jGULOtonYkbQFJSnIzmkcm4YNJ
7qKI7Bp23ur+fFLvN7YGTrf9vd8PtMo9XS68RcghhOFtfgNg6p64xNlJx7mU
3+p6CmtY97fM8I94C/qwFrHcMxyBnW/zhEQX+/BHctwz1eR55Knvf941RIFR
9ZlKfeIKRIQGzTzlOoNG+TS3V48Xwf56x4Mrsn342vXVH+3gNtRu72EcOd6B
5OjFwEtbSKjXQHFs1KfDi8szTh+4qbBc8mdHkAIRGTbvqP9cR4EX0zXyT+gk
1JJJjls2XUSB9CizW01D0PranXFHNRksT65uiZ0l4PNkqdKS7kW0HP+34h83
BmYXHZS/FK5gsB8Xl4lWNVjZFxp5rlPha3bbv2tPZ/CVj0a6w8VulDlyblfW
5G9U6nd479ReAmbRhk1bN3reocDl3v5pMpwbrdaLPkPGdxpSrGcZurGPwW4w
QbQYPcmzZQet53B2UHS9cOP5eaSneGbvvoPaHW6EfckkkPpdT787QEGx1Kda
9tLz8CiKYfkBJwFcdoWyaGTTMFe+2C5DiAL3CTfaVZKJuN6Zp7vMwFAoacVd
u7t+AO1zM61Sqe1gry+l9vv/97uHLOMkjBvBdvrhza3ZA6D3l0GR32oeXz7f
F0SRm4f4xGG4eHBj7yiZ9aH1OZCvbgub+EfB+fTTtLfSvfiDJPI7d18/qImO
H0gbsIRXTSKvBKfKUWi/it3n2SFkff0rIv3PGEjECbPes13A5G2Mwd5pg/Dv
3OIxk0Q63j3Ykdn7rwVq15LvmTV2gRtevJdyfwxU++1j7m7kx564Azs0pmeh
Tjrwv1ErGrLz3mqp8aiEsu+EJ0/GhqHSe6VmzWYCT0XL7XQn0qD3fu7nXusi
OJert1fjKwk3fR9ivHG7D+MU//2U8Njocxc/DvVqEnx2cnllaUjGPWOSPlbm
6cC389BFDk4iuox76BVnDKCVqPV77vgFMHx/9TrL3SXw/m3mUrC5D0PjrQrk
HjaDwC+Rfj2+NvA3j2apKUhF29sPr+nqzqC1r0jHqe5lnCgNm2041APOKhVy
6zK1YJG5ZLk7YR4/sIeXGJf04LLA97EHJjTQO1dCcZSgwifX59bH+gmotttm
ZvloEV4OTlk8w0oGiRazzOMX6HhmTuimYcY0tNSO8KqJLqMRjUm3kjkEUwR+
1Q3FDIAdk52BQFcxbvH6ctpmbRjcWogJTpl0nLxc/p41gQ5UfqkM64MTqOP/
foexWz8ElTrraDbHgZt0wSWGtzSQ0nA4I1c/g+V6ZwbaLheBfLFUfPBVMmof
/BEs82wR166zzoXZDgEssnnkjk7ATYMc/0e36MiZZDLXvm0Yzvy9vnpTi47K
bO+VHGJpeHUqNub4txmoEzoro6swCwdGfV7duU1Dk9HlW8+sF/DVH0Z2y0MT
gB57DXRTx/DTicb5RvNBOPhEvSvxIxmaP57Kv+lKwlcOBtsjebtxV7XQ8J3F
Inx770dozqZ1lJ2gtN3c4NrKM+9UVhKHICyZfWvtQzrK/p7xI2143p8Y7nzp
ERr6HPh71ImrHOuEHXPiM0dxm7gR4c/G3EfpCRAsozf2abakMqa4Hddd2Xgq
dKiQfDOWwPJ0Gc4qf/Ue1+xBx8eCHmSuLOTP3/6r7icR9oSkpsQv98HpP9Vm
X6lu+MaUcv8hbx5eU7gnFX1yHp5c//fSV3sYBEtUK0GEhpHu1/+zvpsGm240
GfPcI+FZaYYdhdI24KDxRlVUYQ7T5p5L9QVSEAMeZT3aTQbr/rerdlNk/GXv
a/XyBAWE23kIX+2C8XNCqcSPB+PwgrmlOF+3GpqEfWhHbwzD/WGjFkxcAkpP
PPPxW31o+HOBlE3pgCTT1Jxl5w0+sWyICduVgarBU5t+xxNhaDZGh/x5CsLS
X2ZxHaPhj+6/TVV8xXDu18+ztUGjQDU9G2F1fhByjpX9J3CGjtGkZAuPTBJk
ihjOVeyh4Hrs/oZwvlZ8I6+d1L/SjT3ZVtGG7UPYNVYbOkEtA9lLMtKNZzf6
T+irz+VlOpLSl87ZUYeg6ETsk28pbZjbL+Lms+EbzcNbDv7wpuPJjyckNd+u
Qr3H1fK/Qc2Qq8z2O+zqMki9dtvOQW1Fy27RgjeqBZDflCjvXzwO98rjd/6c
60Hmk0fkdgcsgPnBXfPKivUo26sbmWkwhNwdFOGdZSQMLi6yen+NCpMRzEeL
Wuh4/eRiGM8DAjBbSG46Ir2O37NvSXaebkKOgJ5P7OuryCH/I7MS89FDMnMq
z2AA3vAFain50vFHjMXDzsZi7CmedCp8TIXORrf9qv1/kd947JOwHhF0W25/
upPcAuIRxqFkrlYYbzLrls8sgSmu7nLHVxteqsQTkSs1CA0xd2fzaf+wKtuQ
NLcyAKealaf4y1sxvY7jwOb5Phza9jqvjfwdwwaLIsqe00Bfey71k8MU2r1c
Kv8ZtdED16x9MzKGsUm8ZiqYSN/okZvMnwan8fx95XThsWignXjrL3CACOke
tjJiJRQQJxdJZA8ScbsQ/fo5o3C8mPjt5imLOfjP3sD83Us6zqg/Xmk5PAPZ
S9WZB5oGYe/2bWLDunRclq7K7YROYNyatbldvw5eqhoyLiht8IvqTl1nywVo
HS3p29fQCt5r1/z/tG14xvYnJ03cx1Ah2pyRfH0IiJ5sIDG/ioFMxmyVNi2o
UCOVVXdwCN5wKDBWZnUghit0GCxTkWeXahH/NhKcXHAy/fWyA4Mf5LL0nKxD
7qHAbQ2lo8gxFVizwDgCy25P9ufAIIaxKnTF19Gh8um9ojMpGej3X6+W63Yi
9KjV6K6fJAKVqlrhoE3FD99JKoKCvbi/70fSgbQF0KiPExTgqYZaaZbEj+UU
7JdiVDq5dR6ywh76Zmz4eU7VjYn4uT/QQTKLEHTb4ANBHbUybwRXMy2743zj
8PdEUWs8DxW2Kjwc/C5AQFv6dFeBAwWH7tutloaRIPxeWg+LeTE2XJG1sjaZ
xD3kxrt9K604uakmT+pzO75YefEleoaMnsFGnPQzVBA+bJEt/rYJLnA8eSNr
S8O3rBfIAmfX8LnsvQbS+WTMSZAw8B0pxruOkSzHfabwss9Lz9mXw6DZbhtw
6kgfHpeMiv56dxzlYq4MH04ZhJD4yhMmirNwmoM/l/sBDRW2O5vzhKVidn3g
eVGDccjtjK1KdO/Ak0bOFnE5DZjhmlyfepoGxq4Fj17xTaP94EWVa8p9+JtU
iG5uGznG6yay+KgY35vwcha/psAUp8q78vJVzKjbvVeiPhvuVhM+5Q2uouDy
ZNbnk8lgq8P8KgKnsZBeQihJXQDK9H9mrx6kgwWXGv1NFQnzb4sbaIZOQZmm
tq3eaDdu/5H19yBxDLU0Bxw3t9MhWlSfhVvzH+xku8ql1z0GsZXTlGz2edAQ
0V+6QJ/Hun4wrn/UC00H4p+kbPSKVs1PDJakY+nmTh6t7ZOQQ/QIGFMnY5wP
24VRg3mY2GvqWHacDAy70r8c7yXh/WOfN4kcmwV/rYGVvAYaMmzdQfKJ3/DB
XttL70vy4Wu/rQ/7vlyk2/45+pGFBO3Zc2eD1IfQ1moX2cSjFIb21l4+HLeO
zRIn2R/sasN58QdZrE6r+KBV7EYCtQiZK7vt2B4NgVd+GpsBXyM+tQh6wvBn
EC7uuORsZEXH05ZfGS3fLuOl++cZlCpbgEnzU7pxJAkS73dv7z1CQbWEpwTD
2QU4paRwJER9AHOm+J2J0g1gzrGymdxNQcHQkMT6vWRUDAwZVtjwS8fwQbbe
qVw45Pdpro0wDozN/SlCVmvo8DN7JqkuDxeu7PeTIw4jx2Mbxt1yrdDsGpS0
cKUPjUKzV2/eWYBfdzoZwwcYCsvnciieu0cwgWDXrbw6DOtMKhcovjS0jM/h
FnMawYm9iZbTBY1Qrfzn9+zuWfja1xxKZ6CjvM/30Nb2eQgZVf3xVZaCp02k
zkU2LeEZz7q/UoR+yHdYi9A2aQPT+oZwxjwaFvoI6vyhk+AMsVLq1Q8K5sbc
5Ki4REP1O1FcL0gEEHltlma5ko9NS56S8b5kCG13WlLUbsbZa93V1vM0cHuU
EfbTfAB5NzlHP2a3ghCjuZkvH/rhOoqWPyAGYF+0uOdOzxQMrG9a9UkgQqi7
QYZRbzduPue+9RhzA6bde+kuY9aFY3khsmffV6DTu+8Dn4rI8M3rPzEt9o3n
qd6US/k7iVOc4J/VSAe72/uqN29fQeNTJvsiNzXC1ms9S4P8NeicwKXRcH0U
uT/pPZPxGYDkkt6tQepFyGZq+1hMmA6OpRPsd10nUCqJKGvD346bzlodnIha
gDM/hUf90kbRa4RgeYMwBB9VwyXP2RVCg4pmM+vYGCRlkRMH/8tBdS+boyU/
ppBWTfO9tcGR989HN9jXL4Ao/+nOmrE2rITbrv9E2nHzYCPH/heLuMdxwYyR
Zwz2NbNeqQ+Ih5KPh/ftViXiufXAo+M0Iq5ZRGUc2EWBsFPM4THbmyF5VFvh
7M5uKCCMVlua/QDv79LB6hFzKBVp50y1J4O22wELoxIi2sU0Myd+GYGU/NyR
V69peDSt8nZN6R8o+dWWRjo5j9Rjc09siGTgO3XotNZtEobeOGB9hbUTv965
v3OnOw1MRI9NXZhcxrij241YnTvh9Eq6xPO2txuc0Kl8e2wGlI2KV2S2LCL5
ef6l8G2j0L2Tz8KCcwxSvBReevYPYqTnz7/FaWPA4lGRUSVKx4jdE1K7w0Iw
7Kfe2Ze5M6hIjmSS2toErpc/V+r3z2MGb6ea2yUSiLUFm6TakvGDvb6VYB4Z
JUpqVDFyHrhuvInQxFbkuWzIsqOwAx299Hf9/66qYPZWTh+JaUyMVLDrOTYA
K8tHz3OEZCJdPJmqOlOHd5wTV7a6UWHHRP6XvoPdENFy5qyv2P/ztYJLKHMU
krN/fZhvHUTh0wS1nPEh1P5u+9NQYqOfcqLOqgctwfv32XtfSXThfrXjtTHE
NvCai2klbvAW+wVrstnbBXA676ppRRrEi1H3tgxfaYEzkzMuab/bgPtQ13X7
De/VJwn6SbrPYPPuzebDZcPgvPvCvFIQHb+V7Fr5KbsKm01RpXOlDtZI5ysZ
gjIg4OibvMVNU/A8fHF8/xY65C0xX7lTOIHdW8IzLaNHMZHrZ/gdiwlIU8H/
/P0Z5K1Ke0pqxYdh+E2p/tMLA6Cc+/UwRa4cN/jA7MeRVmTa71+TotiFl6qD
BVw3eGTTu/YEzZwpzB42rrb63QfsSq22ZDY6Vsn8fuw5kQ+vJdkED+WRsCbJ
e9MN1Xq4/5yzY/MOKp40H6w7bJgB54LGpr31SVjC/upqkQIJNdPGe0v7yZAt
l3dGMYOEpTz1PPGbqdD4sPGxllMVMOnd7aQtj0DOw+RuntA2ULIYsbcLIaMH
TbnO/lch3jeqLjKPHcf5JCvW7aQh6Nh0a1+QMx0/OZ74lGJQDPKFvBl0sTEo
VWFuZaweAMmxids/OGvw9PjBGX/5DmQr/9W00dVoLnU97fG+ZdQC2TVIawVK
Z1t2pcscvL69aKe6QkE/2t4t1/piYP/sjDz7AgFU3088pr8m4c/l242XAqjw
WUdw2/KrKDz1V3qTYDgR2O55avAzDQNl9VvL3rIW3LVQa3/ibz1Omi8bv5Cj
wNf9x8W7p9agnl2u1qG/FVakjlqaWHVscLOA9W52OnZFHij+eTMbU90ePtSp
3OA5E7KSPV8qLAQmhe09P4+5VNMyEdtV+HyPe6X4YAGy+vAaiD9oxIS+OAV7
Jxoc0pVq1lFdwjFOjqeU0/XwwjqaM8u2Df7e+8EttomOpxzfBazKL+NgcVXy
hEs77N1d3Dd/aRbPRbv8Pq9CB5ER5Y+ZZ4moWGdUt+8vDeTq9Y889ssBcWOi
MbMgGXvTnRfCh7ph1rCGsOU4Dbd5XePcDelAk89reUEmIp8jw8jly0OQebVE
b52tBnNH0oouzq2hjRrvt1SFOvzRoR9N5FmBS2yRm6ys8zHplI+niCERKBgg
WKBDQVNj/oCGQyuQlPcpjONAB0beuCAYylwDLhFKq/XHhyE3KreI2FQBO5+p
Z5BMh6CUefJJqGUbcEQa/ZN16gOHnV+GtlwbQb3FO/11yp0wFq0pKVH/F4Uf
HirwYJ1ByKyOmrvZCW2/38cP1lSBvaVdssuJJTzHF39AxXgYjHPy3yxaz4OR
RkZ2vScFr3cLpZrv6kLXxsxhh4+VmN6ruTMCh7AqtvD7zW+58PuWKrvN7Wm4
cmGdbr17AS0T55skC+jI/X2atHvzNCTsvPGlk68Fm2xJGZc1qSDLkxF6KDEF
mCmKh15uIqHzLrtKcdNRTO6tT+HM3PDwQAPGOKFhyHgc8NxebAHTDnV9nmnr
Q6UDJIlM9QxQqnhE3EefRV+HpDatPwsQH9lMd9aggdiarDBz5iye/u5Bzj65
DBZjmjEXvnegwJ2vhVwUBnk51bj8LsVpGC7dPnXlaC+MREZf/XuRjvvHTigw
t5DhQOdDDsdJEm5N+VbU8aALw2eCF78erMWIxBAuXb1I/HZC8N0hESpoBQzz
sJv8Ab9opurTzkQMFbu6X6J1AqJ+hlXlvOlDn5R+S+0N/9g3cEfgwd0ZDLMr
es6+se/nix7t0R0ig9vvb0JxxtMg6tHs9bKMii1VM+oMYWRwdnqyqutOxFjP
WyI+KVRY0ZkPjsok4siZAFuB2wMwsz61UkmnYZiiZUqqTTh+/HAnJ1ZmDpIb
99jVNo7hwYXlHp8NvrFKkvv+/ztd8uHZfH82ePC0l0ZC6U4SzEfvGfm8MV/V
97vbE/zm0cWsZt/WZipY6H9YqNNcwx0u25ZcKyORaPJH4FpJEDzRy2UaE5qB
+9+/Px0sWQLmvZT5AxebUMkqhHrBZQi4DcjDnyebkZzm6fwtth8OXf9s76eR
j5mnXQwfbnyHTW8qAiR/0UHnYZ+p4B0aVvG4HT56chZ2LTV+mRHtB2bzL4yv
jIJRaJTde0dyP1zcZhcn/HUBH72g7tMw7QfDTSxZendj8OJuTt2abdOoQplw
/sixCCelAjdVqX1BnwB721oCCRQDLNe+mBMx+L+aMy5sdIh/bjWmfLYQfrq9
Z30gQsJ/e5TbhGUHQGrCFKj1NGw7kn7wksIGHzY1mau0bHA5Zb2cfrEbvLTP
Tbg8o6PbZFWz+ddBcCKXNPTOtyGZcdlHcHwI/l53+rf2XzPOH75e09K3jDKu
uXffFQ4Aw9PPtlndY7hHfoJ8Q2sBOqihD5puj8DTdAtH+sgg1h9f25d1fRWr
N+l++itaBE/6tmKT/go+S+88amnXBFedn5tpbvgCizA1t0OXgFqv9jcbb/A8
lx89/nA8BeaDpKsPprRAkmzDSM4ZOopv7tNxOVsPogrc+ZH8fWDCaqVzlbUb
bKa+PTQ/voD7bJzOGb/pAo6Iil+PHKvgLlvCdF5fJS5c5fvGtDCENn2/kxW2
TQCPQbtgIpWGil4hGUaDf3G14pQAdxwJnr8X/sqiuQavH4w/ZDLvhWiO379T
yAMQo6+ddSyuFNV5WPY2RQ9g251DsSHikeDWw7k0kzsPKcL6Z2h580h3Oudp
7hSH5ml56hF2c3DW3PDRbuoyBq2kM4w1tsCdmmcTbPdTwENk7vyQ7AQckCuf
8NKcwSsyZlLFaXRYiXofPSAVBltMxJI79Eh4MfzhTywYwYc8hd7K17sg7fqJ
zY0fhzAgKuPD0vdSKBkOYGghr+CxT5qEbVFlcFVPRQ+NZqF2wnspmZ+GKZ7V
hKvnF9HV6tJn123jIFxZoHycbxREBd1Dn7oPYKO8m6MicwUSbALGQitHkGvR
8FQZrqPZDce5O1d7MPZwYoVgzDwWO/80YzhPAc3qLrlwkQ6EIledrbqLUK3j
PaP1iYidoekv2Sxo8NQ0rvDQjk7MmRYVLjy1AMsxKgdZL5Mhy9n9qoMVCR80
Xcvr6aFi1O131B23SXDBPUbOZWNeMkmll+Z5FrBWxut008wK3mXsPC17Kw2m
gm+HsSvXgkHGK0WN3D7QCPQ5HiBXDcbz7XaPJMmo6iatat3LUGhs33DOPmcY
z8ZZHyB/JWIboXZ4pYgO52JueBRxD6Cjv1ys2vsFGPhmO83bPQwppTAsrtuJ
cu+Yd3wsG8GLNbFBJK0mYOUfD56bnsHpTY+1u97QgIutxy370SisXDnqPVDa
j5fFDedjjrbDkbfPle7eo+HpPzd/EQITIchjXdAnlIRbfL5ct36zACIu7l+P
Jw7i3u892/uJNJh9abxLYPcksl8qGvhS9wVZHjhfikon4r9/aoTSiCE4c9Hj
4SqNhnSVYqJv9z/Q0GFYy9Efh06B5RT7zGnsLly64KZAh39+7VfaXSeAU6BT
IDRoAAv3645xfl1FK/IZr8kTyXBg6cLm81PzuMe6K37w2zy81gpRYH49CAXW
AUFMXXS82prgY2owiJs1FGW0i3PBNlTqbYF0KRxT8ptRHiBhhGQ6h1hsP0ow
fU7WghR0FG8XZe9eRfF4M6vCphqMsou0vu5BBC1LjgErHgqeq9P9dHl+AOwi
atJcDy7gv6SXNl8CezGzzXebKS8NRG511gXdGcMM3Uff+E4tASGei7GxexHU
z/haJQUP4M2sMW6esFI0nl9k6NxPh+O5ynZ9pUMw253yYEsFDV+OBhN5JUcx
VsZCiSS9CPEpZW+52Edhcujeeb3PQ6jZ5iN1+NwiUqb6mn93DINBA++9dw3P
0LuHvZu5igBcPyQdXBpJGJ2eG3VViQrKhO/d1UZEEJI97fLkCg25H3xtvPO2
DyNupjE/S6XCvcOJz0i+s8DAlz3FZUZB5mORv9heWeGkb77froVZFFxyKaVf
78G7dHq5bVIpGuq6jL6c60PLpzeuMm1bhHEmHdkF0x78PhOXMrm7AS+tqj7r
Jc3DqggTNseT0MNge+IF2xXYrM3R1fUqHLX8ed4dlk9GEUcPqebqKfxrvCWp
tKweKVcqbtVtoQJLqdduAkch/C6c3O64ZwKq5wb2NKTkopy7xd6vFkTwTdl1
fPzfNBb3/Cd4b/sCmNew71wfYZCfLK+Ve319BqLLj7lE0vpgz1nGFQ0nxM5r
1Xznuwfx7jZB62fa9cB3OjTPMjwbafvsG7N4SDAk8P7YlzIK7J/XvaHJR8Bf
h2+2nj87gEzr7CK1KVnof2j3QJLzFMQYNyrLp3bho9LVEx+v9ACH4bPfnu8z
cKzyTZJa/TcgrXgxGljOQKvFnkdD42SQf3M5RMpwHrmpFjrkw73oGd73Tzkm
GaJ9C89y1KWD/lmzCWrVOIgymbgej+1B/m2puhdVFyBlM7y/yTkEq2rZKfwp
DbgXNleURXWgjUtf0dJnKhRtdX97MawPUrrUONXEK/HIkivT8cCNHM7ZrDHF
PA938BaL0WUaiN9gu5y5ZQJPWrTAJg8KKj63EznhTYIAnuAF+/uNEOx9fe9B
kwk4IWx8/k1EG44bHl0WDm1GnQR+Q3dfArww9d8THELBptR9dmNS8xDewfvC
5iUZ5VYP65+om0e//87qfHxCBZdf/d85Pg6DnPyploqlbpzwPZ43v3UYHr2x
Ez3UtIAljzLHbSpX0dckjujhUgB3Pup3BDH8hn+mJu3cceOQyvZis0/1EKQR
Q2/+jKIhx8/iizUbPEaaTtLcYl6DngZrHdxG63g0Cc5U+g+gX20xiXGDG5ee
kp8/9JpDZtuYF1mefRDIou4Wc5mOn7cKZQ/SC0Eh1WAokH8SRBytZm1bp8Ar
4cDVP10ULNkW+zwYenGnxtTHzvEKHGdenkrpXMSD3O9DL+QMQaF477cvNxkK
z+o4+4UTWvDJf9ezTO2p6M9l+OzbeSIc4DwTr2SIkBwp0jaeMAVJLa4psh9L
QF/URa/Tk4y1IVLLfFUDUFZ5ST0V6PiklnUuUmES1CNVd5uE0zHQzs38JjcZ
nViYAsRfU0D+uvQmE9cuLCKc23I1mwZDr9vvHlTIAC7z4bBbWvOIUk7bGFaG
cIeNE4OGfj0kDThysRcVo6WN761es3mwsf/G6LrSi2elMqYY0hfg3N8FhqD6
JrTpnbC08afCpl+ftp4RokPTo4TT/Ccm0Z7Afu/h8xnQOrRyYlx6Ad3vlBBI
6gtoI3S7UNp+Ao4ZKy525dTDNjOpFy3+g1CIcc8ixGJBUUdnsEuUAPxTm69G
8ffAVPL2DvEvv+A23bj11dQqmMYrsGvNZIL3WdOQC2cXUPXo0arY9B44xnWP
PaV8BP3mWFx9PhQDlwW//ovvM3Dqyja/+q00zFF8H96pEA5eQXMcPAQyECwK
tqvONOB6+rH9B3dQgBCbEKa4vQLMp2e7xTRHwMKv3ZYL0xG09UW0Sqax2UhV
rcZsBTov9ly5eDgKA9hUC89NRGCEbKmyTgcBDCt5/dU7KuDp5pR9om/JaHFl
wbw12hlkVn/NKVoRgTFbVkrnYxeuflfzYvhUjAwGX9Z0nJdRukiP7sffCDTr
neeewDrW5rE+KOWvwNcJbkrb+rrh8wM/kVNcaXjpkUaoxvgien5VfJhDGwTp
onqG4gPNOGEkl3pnZz8KfjhWcIeBDrFmoWZr6hNocfJdcNEYEVh3mkvOGlPx
caSq3H7zSZh1ExNpmWnEs1Ou4u5vRjAVJMR9GxZAUfPXC6WoMbD+KGNB+DiA
Lg1bE6YmhtDvB+mXp14hlDMUUy73beQCeCS+zCWg2MDCj+9bJmCndYKVl9YC
Pj+scHMXlysOnpmKusVEwoL5Ni9t60kI2s2SfZmLjntUDx4mNa9AmwS7l4tK
LtroZq29qR4G9qSknpcWA6hc9RNaPYbBauZJ/FJgPzpv36rwq9wbFW019iu5
EUD4POu/vPTfUKBeu2nzrnmY1PsTwpGcAb4lST7RYrPoGtFxzYTYgUJvdB6m
blmAQS2mfI36RhD0YVq+LkbDpUBRi3XyGgZYmKsqXyjDrZP/TSee70LZv/rd
L740YY2PrWNiSQeaBShdJEzT4PUVqpPqMAliV89YXnpNwTbfT/qvS6bBrNDs
ssgAHV2vpxxToFMw5La79JFgIojTxJ5rNkzA64f5m/j06bibVd776cFGrHub
LdM0OoSWLg8M6v+RIZvXY+urHBI+2vybodO7EWoV+Q4a7BmD/dzWo0fIWVBu
vRyue28a9tAIyZK5i9incevQc5lRaC985WfCO4SODDpH1CbSIS+EUiR6d4P3
I3JN29wb4XmZeNmWzD8QEMS3JL1pHv9TKsrrpauDS0rSeoz/LI6RTtWvCm+S
/9xhfPTyESqsuq6H+h6JB+ftc8nbPKfA6Xavue7zCqh6wk/6lkbGnVlb1wbl
SGDp/klGfm4exRXClYWzN/xlV2qf3ftyzLH+XivOzSifFPw34xrjMPy4yCbT
ILGEDElKbhMOQ1AiYsT/4UYGOsq9ZTRZG8eLLqmmByIZCi0zRzhFzXo35jHt
RXrOKOb8PCYzmLMA1yQk/wRKkODiry9Ri4sU7LY0ajBkW4Xx8wF3WRXDIPLF
6mmLZ6N4LnjSxsRmENbT43PMH5bjDq8z++Y4xlBsd+R3mbFOiPbf82DkXBHM
jrP0m91sRyLpOJe0Eh1qSTmGVTI/wdPgZsaX37Pw7r/UA85UOlbVyTZu7d/g
0IjSFDarXhg0K/v9qIeOv1hPmQuKLuCIkJFNT/00+O9dTN20dRDtzkuwLXDS
QfXw/JDJkxEg1fqpSn0fwhdHm76nWhDxawy7SN9bKug4XxJuJ3TAtyx+wa8d
NNxO2Dtq49oBPepzYahGR8l/omnq1UuoPCHx5L3IIIxsS12XSutGov/5q3q6
dGCGIu+PHMOw8z953+LRXvxNmHR0PTkAX/TG/6uUKsbJettzrxtrcPeTVL4E
jxGU4V9L7QqfhnH1VMN1bxqm03lnpb1qIfvRFd4g9kF4M8xYXNpaBM6Bhzwl
Zyfh3bp7x93618jqaNlg+4AOx+ZvcB+6ToElrYspDhQiMqyYVfi+7AGxs3nE
mgI6/t5EOXpqM2NhzG2O3E2OI1hNnC35yzGAop8SwrL32EGg0wjbLiYiClws
OvxOnwb05KszVbyD8NvrRerSSixe1Zd+nMLmAXky7t4HbGcxtXZZJ9m+Gfjc
Igq22fSBqSfP6WaHclQlhKZlV8wDLUJ2pDmqF48O6DylySPG/9X+99CUAlM/
sjv8T5HQUolv56j5IEjctsufam3Bhsjr72umiCCpNjIWkk7B0fyRtGL/AQjx
eJVUEFiORxMu7FFKWMatr5JE1Pk7gC9IPVO3dRQHArT8Kx9NQJ97gthBo3p4
LvN4V94wGbvLGl/pNtFgZlAyuXt5GiV0jHfsHmaUn6zoVilLmYRu6Wvb3fwm
0OsmEYtW6ZDWonL5YVgbml0wFptgXIQL40KDDSVlIMbTfNj8JwnlJCS/32Yp
ADX6blLK3DRQT4t7nrBrh9LluoKkxk7QVbTxac8qwUr+pl1CDBRAxWtB13sr
8DPp4DlO0ij6WGlcY+scgYfu8g5XDIewdQvPrLjUKKYO361b/dkBLx69/GNy
+S3ueL77VqjEHOadaw2xqR+DW8c2rd2Op2HV7+mY1XNL0EosupPp0oOKoVt4
KwoCYMrgdN4WFRKyakoE1j6kAr2bu+ZR+Cx2vr3Dv6+djgfDlrPq0qdAo7Ra
msSyiNv3768tfDsCrJ2rMYc/RWFgrZTIv9U5qKiblj3FswY6eqNSHvJ18LxP
8ONdzkagG3C8XmahoMJawmPui2T4xWZzXDOLhF8VPxt5cy3CYfHtf1+y92B2
tPdsBi0B9je/riZkTcHbwM3qe4IHUQz/PF4VL4Ai8ZzsKPY5+NoWaf77BgXp
ZWHGUwRGecP42gR5rll4kD/m+FFnFN9WelzfKdwF3GMZ4eXfy0Hc6VKwZ9k0
qLJc/RlpPAbvEqpSxaIH8fzYUvLX3FXwOMD28ThvPHRHZ205YUFGLr7682zZ
ZJi8YtZnp9KP48+a3A6URKFZcWE32XoeN0vJXxQlUmD4x/R3i3ga2PgwPfsu
M4lvvpdLJLUNwI2O9c++9+nIW3g99OOlEdxr4/efY2gnxP6jhAm5z0JU5SMq
5SEV67nsVE/O00A6PGhLo/0MfmyZffW8fgXUnZP9Zd+V4iMdjblqtVEMl5M6
7qg2uTEv2a4S03Ogefld7C8nGrLLCl0sbinDqcvxYgnfxrFtfH6OltAP3H9I
KS/20tGvjUJ1PsQg/0sqsKetcgBiC4MFG692In+86F5NuVocX2a5+CLJDdwc
0ssK2Qk43DHtqHyUBsFkO1fv0umN/rhwirW2D0vPrdw8H+yOZlP6Xe9PDIPW
mE4Fx2QPnpq2rtz2ZAIuWV1ai6+k4vGjJzgvkOdwT0nHuu5HOhBCYkSNBLLh
My9l6MvQFHS1l/7DJQZ5F3cJ421vCfBBV7pc2Z0M/7Qm+qYaSGie5LVYM9gE
vtfK97Rlb/jAgbGpzWenYJpvuzBfFxX7WVperd0bQYLOePxY7iK8OpA7tyOy
DKpb3tv5XqWi1reBrbeDOrHEhYNjgYcG7HyM2topmahMaupWkZpBKcq39480
50DwxKdD7QdpqF/6J0n85yheCPteynJkED4073YpzVgFbon7/kXERlDXXgjv
+LAAQ7Djcqf2IIZ9OiybN70CMsOCipKvP2BEkc/SP6ZxvAaNy9TnQxC7/Snv
oOMM3DJiG9GLoSPDfPDwDJ2K+3Ic6sP7SMC8XfjU7Jcx+Dm/y87jBR2Pffsv
ycuPUT5SvvH865EpkPOtKZnipUN81mxa18EJZLvxo+tW2Bi8jr7/YziQjrln
MtQ/sS5i/ZpXMRt9FByuTVkqqPTgvrPlc1b3FsHzkuxI2p4GOLCmIbntTy8s
wPg5d+kxyGEgpk3bdaOynXdgnv0cfh+O8+yhUkHyV7RPcvQQmsncaop50gYv
FjMVppkGoGaLcaCMQxbyVLyTYtEYxlYJvZ+7Ti2A2vSp/c/fjcKgp13Eh80D
KHB5Jkzt6SpkcDo65f2qxuMfZPp8i0aw/2VE6vYvTfDp26t0LqsBzK/kzBA4
sgCmFgtLEazj4HPiCxP3eCduPiXNPTqWCueP6X9ysZmGKLNXcUnFc7BNgnNn
+FMauhY+f35DZQWy015EOT6px28Et5ubWHthvvcOR2RJEuRH/PdlOWQE4wkB
dh1KXRD26kL6p9ZMaODrSPLZOw6vpizYQwLG8PLNFbdrN0eh0Dbz7q5vBLj5
Nv900CoF80u9pwtdF9D6oOqyReIkXLKe/ndRpg+tg7uF5cxz8eMer2jZsnU8
fGMw9XZLBbqSU3xMvDvB5odHsnNQNrS8f8YcbzgA539y2p/dtYCLtOBybRUK
LhSbxfvcIkOBFKuQ5ucoEDvkWut7expiV3in0tepKKR0P/jIPgJ0ZnpvZRdm
KLQiiBeiSxvu8Qu8XENcRUWV97H+xpXInPEYtx0jwvC6SJaxKR3t9INeLjql
4X3ZVwnKp2fQcDNBJ9FrHLY5o/+tJjoOnXhtmzM8Bn+/i37gIdIxu9nN661n
NLa8ZS9h/f9/y9pHlPMDBJyKqS6QjaXD3qsOH+61DALZlLK2bYODKvPjjn5P
3OixCzleNf7jKO7+4s8r9MC10EmVhRtE0CzW++oQPoRNo+9F3Zbo8C+gwlVo
lIgxxhqFPfepUL5jBTV169FMlG/l//fgFxnZpqfCGlAh7cU4+xQNDjmcKJ16
RofrS05ZvG8n8EER28jOxVkI1eAjslCoaEQo9hz2aAPvS7ziKcF9sPL1TYSo
dy0qnfmjP6VEBZP035Okq3T4vbB6gdFnHJemS+o9JkqBvM6pUpE7CbnpZ/6r
/9AEu9VmeTO1x8D2o2ya/306JDfopeVRJvF6x7sjzuRlPBXVNbK7owrMVT8d
/3xhBY7/GA1hWovGw9zNA3GEKZSwO3k305oOETIzbe02NDj2C4NMq+Zwuyvn
CweXVczR2Lep4GEV+uSyCiWFj2x45yU3qh4dJ13EzWdKCBiTF8WkdIMGxmql
BVLYC7LHL7GqNOaAkTFXdPq7HLAZNEp0OTYOEpo1Q483PGOHj6r00MQUSubv
iLftXEPCzjOl127UYLD/p+LT31bx64nDn16dzN/oDWeFv786IHGkdCmEn4YB
pauq0hvcaafocVhXqhQcx84kbykhAOHDRyY5EzqKlYrtyASGwhl/NbE1QgvK
vlo07VfsAF/1CiKLQRxIRv2uDJJeQ4Op8VzvLcH4uSuGebF6ButVgr87kxcg
NHnEy/rJKgbTCa4aIb/A3NEmcPdlf1S97J7rvuFjL6qCUrk+9sLRpnMpHv9o
+FE5tiK3fQxtHMo5H3P1wIh2E2dH6AI8zj/XxHFwBPnOHLo0ojILTBfq2TL7
aeigt64iSk/D8ED1/0wmx9F336n97aFj4HeG1+9UIR3VRrZnTz0bQFO5p0ET
XskoF/p07P5fOnwPJVEaN3qAeMHhXOftUQwdPfkmSHYRlsoStQSCizDp7RLD
nbwxlC+amWkIWYPm86eS/qsohq/tIsFft4/i0nGVjJvjfZDrP1x3RWkEJ3sV
7sf3LoLk2o/LBzYvYlxK9nLcvXEoWiszSNw2h5ln5EjazHSI265+crWxEB7t
Sd789PI0ZHJRJM0ujcIb2p8THIyLmL/w2GLfgTX0e23zU9vnL/wxIJbtVm8B
E96ZeLZQKjZJ21b//76uGU6fdcttxq+Hb/yifisDhjfP3K78GAS2CFlH+fw+
uCz++oOeXSXOjTLtv7UyAV0RzJFXS+gocHLccylsAC9NGGzqvz4NzuM7w/DT
MvYWnueLPdYClpNZHzs6InCb3qdrkRbjyDiu8qe6loiJe1259A9v7OPg6/L6
zcNw4OPbhvonzWiuEZF0emQYrq0KmWgs9uKO+i03X84vgcr07rQdDPVoIOks
rpXTiCJ7j6uX+pLhariv0C+uNai8wxHoPVQMNdSWSh6pTth33NFCwXAB/bVm
hw+9YpC3fBysE2swBFe0JB6m/qHjFc+s0ZTEGSjjcuo33dUNdn2fr7m2FsJX
dccGhy1TQNbr4p68SMXoMGZdgnMBGojWJhSLkeG/hdD5qlAyvGIYq9/yYR7v
tE0fduBbRwqJmP9MuAyP2B+qYI/pwWd3dUy6JmhQmR1Rkx8yANsux05M2tMx
Zkr5zY9LI+AjFFuiYTCE7yJHgnj7iFB/JmXf2esULApIfYVsG32t5EqYT6Cj
yMvQwVMBTcD9gs6+X60TlLewKTUWLMCH+5WKPZUj6PRw/6pAIB3Ymi1rI01H
MHPAQoTKMYIp5i/6hSl0KF2prgu43w5guWcwM6sJnhsnsxioL6J0hNiVawNj
kH0yviXgaQP4pNVKTuwagdG3hq4P2+bB+PNnntZ7ZIykTni8sB6Afae1L5y7
QcdRy/ykei0KLGhynTC4PY/2tPL7zIcXQPJRfpojxzh233JujTSvQVujDiMN
czK0rLK/vi6+BEcIdhZiN/5h3e/1HstP/SDz5TrfhWxXGMoJtp207wAFqaGI
cOVKEE9t5fUz7QJbiZ1KBVY0zBS6MZy1wVntnEFZJQ6zMCkwEKT0IQomEoQq
LLPngPRtRUm/qhwEMmPdu9JG4KK3Ky59GYCnewscILgFm7iuFr9gGMeKDi3v
DLEFSNz5iR5qPwk1uxVigqT78ezs3Sz71g64xMWSww801AmoUVPd1oAaBauv
r9v346YL/gd5avNhX6aC1ZDMNMTc8SnnvTUBXypUaBGidLxY7Ux2qKyDA6Nc
gmx5faCmN9gxFDSG5rmcTglMg5CUPPpNeN8cUp9NPZ5hoUGzkzVvSD4JSo74
OB96uuEL5Usjx38R8c31hXVJPTLQnurwiJgMQ6Gda3JmBh3ZfF4cveDUBzep
il+ctr6F1rojgsNFRaB9ZUXXYaNnW86T7yeY1aCPJNGPcRsFHuUKUVtGh3Bz
9dnPH/QWYSdx2I9jVwMEtAh45r4YgLmQO0pR1DlMvlyfxnKVBgaRQQsdamT4
QNtZ9GKRiEYhWk5jio2wVXrXlTppKr4PNzfrWtzI7byZoaaxCYg0uBH/1Gkd
T1noSr88WogM+++Uymkg7P3jL3PYeBIERdK/91sV4hF9tvcPbk6if1j0DVav
JYxiHbrPe3UAZovE34yYR4GRjqaysykRT3akJw8da4OQ3jeWD3tp+OTKuEPu
czqGS89euyI3C3pjouXjCcPgG3pG63IQDX2A40KWBnWD962nWk3mENSnq48Y
F+CsuBnhZxEJuDR1ZnLE6ajSuefcJrM5KNgzMvz7RQOERyZVPmik4LuWhZOL
wpE4vXzwntIWItj79iUIk6bhT6/SdIMuHbdyN78I7RuE2nFrX76beShra6kW
o9aItIdC1VuP9GPzI+3syXd9kOicp85U/w6MS7gzq/nn0ePQLU7CTioo6Mta
TmSO4dEpic/cPTQIFZizTU6s3sir2QC2Z2MoJmnGkppCBJkUzkud+yj4tfyG
/G8lG7yWVesbWzWDOVtPfqocyoZdU8ax9YXjsP3apSEv+VWY27Hn4vcbWbA3
I/o7T2EjRmt+rHlzcAAbTbkrN60wFD5yRcg3GkADp8Ko0q0M8tLBizoJyqMQ
FgIR+kG9UJ8p9V8EbyhI7ok9WbdpGqR+PBPawkLHPXtzrimb/cZmwtQX7wQS
CKQus/4SyMVQamu8cdI8eGTwHfEwHEUjimJM5/5liO5x/EbNTsVwh8/bm0kk
iLpioDgwMISewtYJxw8uglGX5jzpLxWIli1abluIWGfn9Et8rRY8CviZrn9v
h6V8G9d7z5exKre7nJzZBAnuEdCwOox66ULHWirHYXYHcf5x4joInqUThtZ6
4WCFkzTzQjgmHhp2H/5EgKVs1YJ9f4bxhrYFX0rPIgRELwWQ8oeAXVPo/t44
Ov6vp/N+5+r//ziljDRUVBKKqGS0KJWHCFFJpJJklRlSREWFSiiVhLaRkYTM
EA9787b3eHl52eu1h/n1/eXzD5zrOs/zeNzvt9t1znUdv4LIi1MLi2hTVrtx
LTSjhNoD9wKBBWwOVSm9ahiFTM8anVqhCTD2uGh7p4aF8Y7D010vKFD27Ojr
gicMvJbQcSWvsQqctsvIPtkxAHcEar99v5cKdy7Hy04pT4LEthzBlvkmVIiX
O/EN2vDM4wITcuSyty0YTvr4TEHeWb4Tqiwm8Fo/4yfzTOHGpmgHpfQxFI0U
uGCcy4El/c1nuf8U44HB3iqt7SP4QqhzFDXmIEy8JvXwRCt+iyVtIb5c9hWC
0CFJ3TZoW1v52kC0B/dyu0mGr2FCwc+rezlDNCBKjpgfRDKWBLiH1nQPw74l
I/VJ1gD+yvdrye9Zgj3ebcnbhokgUly17fFFKk463zR39qfB4ysr3TbvGsEj
zGSFXIUBSDS5KMbzcREHLj71vMn0grtXuf89/f//JxJvnFjttpyXFy7V8Kvk
A3w/LFX53xDc1k/QUpVlQs8wPZMxNIH27Z5iGwzK4MZdf6XwAyRgiqgSJh2p
8IMSenmNHQUfM4TVWpZzUPjkxhyzkUZ0sbz6qKNsBE9u+BsovoIDYX4c79nX
/dip+iTpfWQmrCWk5v4yLkfmW7PkUSEK3A5y1eBo0BC/H40WHaaDh9z1mSX5
LpCJnqR6xOZBk9uKcJ9f41Dpl/TRS5aNnW0PQlZtoSEj1vftbDsd0hJ86ZcW
yFhxT7aCXs+AgiOUZlWzQqixfqxbYj0G6v7Cne7Tc6j6JOCGKLsUYl68Psyy
bcJH2v5+jrlMeBt6oc5JoRDIBxJ+p+ZNQWF6BBY4z4Jhte+ampEeLIh4bMBZ
pMNGw6POP3upWFTTNqT1bxHazk13n01qgU62woP0og446cc/sO5uBZyi861y
WOiHDOedyrcuVSBVb6tsfH8PKsw4PY72m4brFWPVCjmloCFmodLXRcW7Oz15
D5osn+Nn8zq5/+iwldjE7ZidhoXRbKMRKhku77y4IbGSCvuJ7pY+SXT0sG7V
dWVywFTRzUdUvg/XouqAYnI9vhjjld1/mgnszBpBnQMEeNva+qdxBRu7H4Rm
2Gqzkc5IM586MgY7ql7apZcyIM5LafPllGn0abGQdg5NgF5n/VLThQnQZx/N
C/+VBzkCkbTNMmNgvmfWQn3BGwIHX0poTlGgpapg7ErBIJQMvmIc8ujFU8Gn
ZvnvjoFraSbfx/Q+FP36o5hygIi1JuLbVm3ngFcn6dmqbaMQ417y8Pc0E9m2
p/f7LnNTcEfypoHxMZy+U2MV8GQYdhbw2hX2sVBeJuJt8o4u7Ptww1B6vg3n
TIRK9nDNgbJ3g8f1pDasMaaizjAJPqJ7rcCZMty98jA9izOHnY/2b6jgtMFZ
O973km8boI57xDpmdAQ++z0POvWiHywVoLZwfS5+DdY+kXOeBv7Tyq16Q1Tc
6tRy4tPWWTTn9q9ZiCDCphNUHlcfBlxb89/DpPAZNLD69EfpxxDopv84vImH
hTU1CXkavnOoHfyucK9SExAfxxpcGe4H0T1JKc3Xc7HuJqd2eAsbKftz9nWa
jQBRZ6BG+iYdGtl3VSOryZgoa3Q/uGoJmW6Vd3qobfhOuz//i/cgHBfNLd23
xMRtP3bvds6iwSqeRnU3cSpOndog4nN5CGWGZ254VlbC1scHt29VH0Ctim1D
J1vjQD5cRUqPwEL+S0088nXDkHzu6ezBbgoY2fKm81OYmNdSqiRR0wdHjsfy
rp1dnoeCSfqZjlRwHjI5F7WGjBtiz2/XMZ2BXDZ943//aFjYz1+QcHsC8uVf
r8i72YYdGZ+uORm2QmurMZNrTzG4/zoifHmsC4V/ufMkbWODVEbgdKxrHR6x
0jeSUhvEuYaFqC3dY6BKPJO4LoSJ3RssWDPLc66ZG7ut7S0dfod94CL/6EVt
9dvJv3Vz8U6t1sXfNyfhiuhKWr4/A/mY9isPcw/AkA3tZJdNDYa8uOtmZd4J
DCvx3Pt7WVhVotnsVDUAlX0zwt1NTPzi9PBObBwJXr9Mex/0i4ibBbxfPtk8
BDzV4WLk2l5ccSmifvPPBdy4T84s9sUf4BSshC1X84EcNugkxjsMfutlDP3c
xiBDePYiKZGFHklmW03H2aC4utVivysB83TL/wSIpuIuwh3WQWUKdB0ZamTY
M+C13e4DGjenMFhkTIgo0wvoED9w1r0aqmcLNN1jWrCf95ZPhXELZsTftosS
IcGlN5STlEEmfnPhu9O6ZwxvmK5uscpkwteoDKYPHwkC9vvFr/bpx3O3/dOT
Wsnwce3ijvoZBnpbir7bnjwE//19sefRWxaa3Fas3CQai1vOLVLSZidQ67l4
WHnGHGb61kUd/FQDTY+Gr8VzOoGeIRZxO7AcXCvPishbs9HeuLpke98kbFez
dDE5yMHuMg8Jtvkg+KjfOqp8gwHxPyLtClNn8O279Dsm80MQf7ht4r4mE59s
4dXI39EPjFSHLBmrZLTafaMuzHQQPtjMk0LYrbjOirwxHatg/6+IHtkgKpqN
Ut5Jl3AgRVIztam0D0ei4x7zfyTgNSma5zbXUvByGwo7GhsN1taFovFbKdg1
yMUIth/HmonU6aA7LPhc89q3+R0Rpj7G5RuaMrGrVUZHz6oJR3n89PZvYMEr
Deb2yc4u0KpqbkzPYOF+j4YV+xJqMcEwWstOhQaiw1sXloLjoYPta2zjMgH2
r+c33Ewhg87KxKac93TMWfXDtfgzA5XDXi9wdMnQGtLJ+Pl9Eksk9igJ6LLA
4EalGka24e0+CP66wIDbN6J4y+sH8FKTT5T8wb+gXEmOssumQfg3G4PQGgru
lT1f7evVjGO/HQ3Wk3sw3WqOP4y3DEi9w6/rWIPAZSU5J/tqBtofaWjs5mEs
5/3h4+9LB/GQiqv1fvlmmFib1uE3RIHMuqQXm19SMWb0xdcn/tzqno3z6Vgx
AacozPX66yfg5U0BG7GLDPx6KJ8SbkGAIJXnX+/yVuNI2omB7gIy7pUI+iJ8
nwUbWDeCJM9RUWX7GlEHWRqYrqrb0rXcfybV9sdXhnVBOn9cYuvudsxwKhCq
+NuIIocJk5uzqf/7vitVzs31VOIgPrUMMy1yKAZqkd9i6sc+bOP4iwYMFmCg
gnqE1hc27HzpO+I3OITFy2AqpdED17TeXvfqYOF63zpu1XstKKewV/itFwOk
3EbDd4oQoY8ZaF7WX4V6s1pBzJJZzLF7JTYEnXDkU7Ids3sQ5qrbUo08OjH8
8CnldKUxdP5SrOpXz4LI6+80ON6D2Ox5dOeXiUbQesI4r2tLhNc0q3vPG1kY
8c3PnDo5gbd6ng/LuDPhnfPwupbAMQy8KxNY3768p968XDGljVD1ONTggBAT
e/UuULS/cEAuh1CquEhElc2JufbxLIjewSNxf98wurQusPPu5GDzin9fYufG
UKKz7Pzb0SXoKWNWDNn0wDifl+OadYOQHCSzGMRuQ1KKcluG6xLKxsinBSa0
oNGoibFT+Tzmf+23yH6WBe+8sq275crR6tFKr29OI3hNmDt9fQABK/yU3vRk
MWFz7QeP3YKD6BJY7ysBHJDJ+fdAcZ6Aml0vTrlt5cB/HtWJx/JHQVLyMjwP
YKFo6juPsk1sePU+kBzfMIpc95w+Zu5cgjheatDeghqQ6xUevj7eBVHTc/d1
cothS4PFK4eFJeQ3/9lOvtWOQpGBik6PerAxMPtS4UwJkghjdzMU+5GZ3G/v
My2Jdx0lHqyVY0KXR6L/8MFx9OXv98wlzUDW+y13Xy/vzRf/k2Pazf/BAYvv
hz8+oeO1/yK9dW6Q4J6cxrtiQTYa226ayHTtQIENGz8+yWMt5/opD9sdxXD7
dmKVyhQJDm4rDFwqycDuIyv2b1ta9iS9Y1LcEhTgGSJ/SHSk4/unHnFkyWgc
OCL29fLUDEw8emXH5TeGZXrjTR0/WbCXtfHkMS8CztG+NyXHh8GCft71wk4i
bpD94dcbwQZLpTMffbYQsep8VrZRUxV4Te+SVbxCRWanap9ULQ2OhktgbDAJ
MspsKrcv+8FT9cgVem4dGNZZFzZoyIRDQ5M1VBMyfvMzcY8SYYEAiWWbv7YC
Oh41WnDukKCTu3D4waMcSP728sNqCRps4+uIizg2B6bHdRVa7xOQMPJPSpk4
DmtO/XKTlGOh4YXhhBcmBBgV4yLcc6jCbjX2m+hwxN2WKwW1do3idAGH+6VZ
K6pM30s9v7sCm3q1s705CZj4mKtQbZnnZyuUe0eXOcPbUV/u5nkmHv2UlpNl
TIJv1pGSLRcHMD2bW2NqVy7g2rokiaFJqPKSvt6yiwCeW9Xl9z2uwO3f+Z2S
BJthu7vgs3Mv2+BlruqNY54leJ61b5KmyoAnB2wdn3z1xnjDAbkwrmk4l/ts
2mSOCeVOp+Ruli97De3QPvpRKgbInXnS5EqHLvaztgezDUC/hZ9nyvqhrP6M
vwCJBAXZ23NMC5j407a3ndmyiBrzD84WfGjAJdN0abkAJrwwfr6jvH0SoyM+
XroVyULWtMPYT5dRCKF/c3ayGEaN5rN/gqfa4cxk1nVYOQBBI3rDllX1mDfp
ISv+gINZElFewT7DkNNc9l44bB5d3l3ijdu97E9+e+z2ZTTD1+0WhpyNLaAc
eUXnURsTftLU7A6WjaPTJdORu/dfAK+A9sG/WRTQC2/LuPegDILPqc7aPBsC
hf/6fh6mzkHqBq8N03ZNOBN7zFQ2kQJ20QV8Kd5U3NfSJxD6ewTf7MednCQ2
MA6ZPs9/WQjqKj3Khw1oKP/q8y2PonnUN1hQz2pNBcmqAyJCqq2Yfp+2Js+e
CZeE149P6c2jp86ne8STTbBRrrXpe9E0vN0UFzSTzETVdVmbNz5NwTfCc8dX
ECfxX6Rs2afl63nfzfxzzqcYnFLdfpw4udzPrBOk7Rlk3KJmXje+lgbi4Ki5
KpmG+wNC0/b2DWNke9VlC0kimJC25ocxqPAuS+Dvzp1U3PvA224rpxNTK5L8
15gt+97KnCibYA5Sh+oFc14Ngp2fd9OqDCIMdpm80ZzvxufWwzU/dzXBrr9l
3fuPL3vZ3forio9iMCaKN0/7Bhn+e35/eujzNMzv0smJ28DAh6x3GpQ9qRh9
ofzflUAqiOheVTrd1woNjlpTIhtYuBh1j5u2uQtsgju3/7hXAZenEk73KZMw
qqubOPq2HMY4IFI+M4HS4ae2O/xkgoPA4888ko1w2XUn7fOfHqh225MdrFuC
NeT7h2NOj+G/rnAepu8iqoWFUS/bJUOQ1HjjzeU8pQvcLn2cxoC1fZGrA+OH
4FWYWgqzmYj+SdnDDXvJEJZZkRaqwsSe7QMbyR8bwN3sRHkjFxPX1eTdM+al
4G/ecfuZqwz4mds9Y9LVgn5hG+X26dCh3+iNwe2LObDh0eHza+rHoNS2douD
VBp89V5vyzxNgbOrfnmNinMVyiilkNatWu7J66ZC1Dv9QNZ03t7gVr/s6zds
CNca8Zv53oj9Mn3Y5HJzz/Z9tSAvoTQlcJGOKyyXOps1KuDgjWnuyMfLPflc
k2vrWxKe9jIIOPWuEUzJQQRj3yEQj1rntV2ChfE7fw6bNHDgybx1n5VML7qv
6HcwdG+AslsGkSl7mbgzId9IIfYJrEVO4FPmNFJ+Sna3HM9CuQmnqpeWFBiL
u+K0fqIFhusfmPW1E2Fg68nLhEQmbBVl299xm0DBQ794uRyJOKP/Zp8LvRT4
clcoRyksQtKhixo6awph3DVihSeQoJhurcSbzsaTP6NdrYWG8cPZlvmSyz1w
0Vj0xiPpf3gumc+8OY0C0VM24u62HDgkG/V+w59OzArNtvY1GYc9XiWPG9pZ
eGAkSsY1ZA65tXNzAzY2w8fF37/19lZA7W8niZnvFMz7cdbG8V0ZnCvhjU7Z
OQbX/vjz3rLJhIA3U0m4h4xnQg/HbJykQLxP/V9e3mWue9jZbOY6AJa6Wkdf
RZag6O3UvNOPWmBXyoaTrDk6akQKC6xbGADe23E+7yeZ2HQlP2xPTwk+bs19
lsA9jKspbnIbP6SjcEP8GZ0hEnKbqGeUJPXB8QsKhkEtFXgmXKdqXmYcygm3
Ne4ve1fevveRBw+0gYMng3Cqk4nhly2hkRWDJnUPbX5dpcB4sO5/dQkkvNCc
ufLNvSbwpfYUXuMpRt+mW2xDHSrs9c9/dqScAJkLYSK71rDxk+kD22GbBTxr
f35j/45a+FbDValBpUJXbbL4unEaOpDEyDI7WoCpHF0zL9cOdVuaVtuqMkHm
Rt1mzT9TOLqwdPGvdSeq3E+pVuhlwVuFxMq9fwZwJMHKAV3YoMy73t9dugjK
xp5scQoZBZnRysMXRWj49fynyMBbDJDhuc3SsR5FemtXyRNFFnw6tXU3OXgQ
BN1CKOo6bOxL2aUZ928aCndc0pLpoWNVmqR5UM0UOnzvLji9jQPXRDNmGdcb
YNeQ70bHC3Tcxul6UAfdyPulRPlJJwuSuU47CnwZxi87V26iFfbBRwcxq/0N
M6hgkKT2N5IBVN7zjz67jEPKEa4U62EWOq9+8cPh2xDY2hVDl/eyNya49Tds
o4ND82BAi8E0ZiR+esVcW4aOZyuWsi4tc0KVNrE0oQESRT3FtMgMjFHZsENw
aJk0FcIP7/FgI6dn5k/woTQMSGJ3fjaggo6gQD7P2wqYKG7/5v+HihYqqznS
uq3Qs8mjXeNpO6j4X8z5vJCC85/OSCma0yDTx/vCe3kqFlhGHby5SAddxvmJ
T6w4FJhUaIsWIsMqkzn60XVzYPRyzEK/uhNj3n3fZ3K5Ejd4z31K6Sfh9XVn
H0zsGURXP92LGaocSA2Y8LhAoKPJT92ErD4qzP49P0j+3IydZB2LNWK9KOb9
dYgpxKVe+sMyKK2qCNLos2oGnk0oGe7LK3OUBT65/SsGL8+jScVq5cJr/8G6
I7fVBSPI2J+1pZaz3O9dVFKga2YTBAcM/JlU6wbbU7aK0WID+NNhNz/pARv8
uGO5tzrn4KS+8GGCGhXUW38+EjfpQH+l6yr6IwyQvvwkRZprDLifXpeSX573
2SlMO2nTBoFHhicIT3vBunKg6MSHbjzc0PNXhsmCFN3qVyG+C+hkGNhYIf4H
/sbL/lpdSISz55zH+H1b8bX4mER93gBYLfN2s0AmpvRWJLxeRYOIZ8HVK1up
KGj1WPyRay3kZmdcVldrg7/P17dQX3EVqj7MlPAkErF01/rNmgpD0KVvcVk6
kI0/PB3Wb/veibp/vRWGR5hQEnzyxL3GYZzBhoPPyV2wsfJfOeF9A6ye97Ao
dSHAQZep0NfvSfjqDVVcSW0WVp0+6LckxsJYucqL+pKToCFWs3NiNQlfXlIa
swxuh6VqebvT+8joNLmBd5rGhPh95aNDUxxU0VDsNbo2DNfzrn6viSQA77H0
73PD2dhYkHixtpurUPqvDb+LRg+eVLtV/qirFp6mUZyHfvSBSw1Bgu82FWQM
i8/IOFDxryp/UuniONaObiuRYjAhv8d3c/fMHP63I+bovFIPqNa5hPRap4JY
y4X4pQAKGjdW7tlDGACt6YSfjEIWZnAW2z5KLXOMeVfb/iU2rqYWdpw+R0bN
YCNDZykmNJ/P39AWUYlswyZKpCAN+A8I9zpE94LI+eLYvFQmLvReP9y0vgQ/
91yd4UzRIG00fKCXZwinctxv8nX3Qmwf+9eBtlr06UBaUyUR43Tefza8MwRn
FV0ijqwewFg+Yl4Dfz3aujzSzc5lQM2FFkHHuWHgU9twlNeMiasevr4lU8OC
BcGdlT0aI3ie/LK4rrUbnjgNJd2bzQDS7tPrrfxG4INTrEuYbQ9e56jAgPUc
vhtV+Vkq3ALajfUGovbZEK9mUaKbMwHnyY5BTxKnMGPkqELaPzYkHDvBFzvD
rT4e/PoXfWoUUo/uE3VpouAxL82Vm5Y9/fjVdultMxwMiOHnZUiSwE/px+vf
z4hwleX6NfIrC2vulmey0iJx+z35O9lRVJA/rLqZHNADr/UlQxcrczDk/m77
tbN5mKBZLP+teQTTp/e+Xn2Ig9xekZ6LoUSozDuYvMA3BCt/U481eBLRcomt
4ONHQ32+cB/6MRbsf9fpY5RPgK8XudTjIorQtqjgjH5/PYw/EpqNTWJgM93e
/a30AJKbPx0kKDNBrcmH717VPDgOhKr2CvzBMq6IOaF3dBSLcQ0mClFgSPTq
5tPLuSnIHyqS2peOgXpL13tU6GCtIxOUEUpG7vd3zH/rEVCrhOQRsPQDjxsH
VE3enIIz3/QdpjWZeNzI789k8wTuZ2RGvX/NATG5M6dfagXizhde789okiHh
7Q9SdFsPshPF0jSbmaCcLSl/fHgey/jE1boyE6BIX+xi1r0Z7L+5/mo3mQGa
xy99SehoxlPdAu/ZBDqcfdLhKdPCQNtWwjnH92TQL6r99t2tEM+o5s43NVAg
66Ghn8i5eQCRJ2u9hHLQTkPAvuAUl7rUv22zTy8Ow7Zg5bun9SqR2rKL8Xo5
jySueF+p3U4CosjT5wLGvSjOl7Hl5j2EG5s3Bgv3ToCHuNQOi7sdoH+7WnTX
GwZ+yrvpT4+bhU8qa5TMxVtxfTsP19lHdGiqv5paVzeNvVx2JKnxEVTQ9Les
dWABv8CJXFo7DRt/VEetraGBkquX/0+JfowsbediH/2EvzaJ3f9k34gJbNPH
jcJEZMXbBk7c/A8Fv96btLEn4saM3Ke+819wd9Nk/pU9VKB1PJAW0ijEN6uC
ubkOUOEj15yFX203yFp6Rez8zcCnYQVxxAd9KG3MrRkrzwY75zirm7zt8NHt
qlyuFgOZr5/u6trJAf6hHxYtX4moJhusKtgzBCG+ixv9dhAwXX2YKdnaC6y9
sq9YNelAWsGXIy83h/G+n7xehVShb2D5Z6hohYyA+4u8ngNAElkjKp6zgMoW
xAX90+XAtd18MPDTCPSPPXxfNc3CP12SMU0FueB6s/7w4Msx7HazEyHnU1F0
WPpq0yINnCaemqjkkHD01SNqYVsvqLVbDnRrETHkNzRseVgEZlb91Um+DcjV
NtN5Rr4fb8ryHBpQm8SpPqHujO9M2CJ/5ZWGNgnanXZQvc8N4L5mlsqC8SKu
PfVbU+hHKjT3VBHWLT+fiqmslpF+Ml7p9Eyl/eiErDO9Zt8mWOjwgKvtK3kW
VIhPuR0+d+AxwcPJ8iEDePvXej9LvQqwML1gpnm2A7Zt0zLfub8SujO+8Wfd
oUGixuWM5E4a7tS6wTo22QTqZgIL1nMdkK98eDRxZBCJkmn57VoTsDv2pPHq
Rhay9xhL3JsbBefqKlJofSkU+a3jbhqfgL9lP/IkpydQJM7yFdQw4cvH1uqA
KhYkvUk15787hg+Fh/10js3jIdGhghbtLjjybMGw4eAgvAxI/NFqwcL5riJv
hxo2LL69fnz8wCBqWJbv2irYB2n5qSollsl4MMRhJ5fTP/i0Yc7BxJ2Col5/
h+DDItw6YSR5pqASRBY+Rsc/LcF/TRu3/Tk5gq0xkxEBKuNI/0N8Ywos2Gj2
ktTSSMD3zXOx9Tu+Qs7qlsuhRq1w73q6xtojLfDCf1Wm/6llvyGVe6iK0eGy
KG8/z4VXcPGoVshOLwpwmd2VXvgwBkWCXMo/V7JQ9AXPp/7WUXB08xH6d4qJ
nQ7X+8UJI1B093Rr+CsWmkmleBaV9+BXNR090K/AyptpX26s4SpUXPVWLVu4
Hf/kD0efCWqAl1tHHvpeYmCuCt92ImsAxsmK19Ka2vCfeK1pc001Tj69KWAg
SYdjayV3j5lQ8M5P16ZjkSz4cLdL74NNIl6QPpeZ2TuD1tpJ/zntIaDwltV9
dX894eWUcayXZyMaeaxeJVRNg9KO+d/d67kKB69wnY840YrxQ7f2GAkTgCfr
6iZSHhtljENkef4MAYE6XWY5xcBeQsQz5p4l3Jogn9nNasbRI1lnKw8vYArv
yfbLRk1owzd/qsu/G57229K7D7Lxt7/ANuppGuy7zAiyM6fi0psNHseS6qBd
O3nl3WIiHP/O5RSznwU3Hrx4c0FqBIvkpvnvzFGBPa6TbmdExSrqsVfcNztg
zCRJOj+xFna0PJA1z6fDwumjMvViVMyhbsncLT8OgY49IoK3WLiUzHPgtTMb
JT67+Cn8G4LaWaUTr32G4dadtcRZEyaq/Be6D4WGISb3SWN30QDWHvB59ox/
BI3md5HOSHaCM58WWeNQD8Rlr7cxOcbCqbTATVzCbJAiHf3QHziK/nwjDdIR
/cC3aSDv7MAf3ClaqtYc1glyU4dV6NgA2eu/rj49TsQ9E03JN53ZsNvKSlPm
MAG47T+Yz2qwsZqypGEWRoYOvcsftWXomB2WdG6r9z9wv3VSfNO9UbAi0Orp
DrN4+7jSh5RfAxCC4l22pH8g5LqVrKI/BhI8Z6JrpZfz7teR1E22LPx21+NA
th4RX34v/y5xOgfSfCSadsyNw+fjpt4tt1m47b1zhs7mUeA72cJ93KUfu9Y0
5zVfZoPm/huXD4UT0fSQhNWNK0TglQpn+tE7l3nk8dWrH6hwqHT0+9tTdKTz
2d/38OUq3HLixGfiiz4cXKqOaiyuBpZ6hKFZIhFunXtTN+Y+Bh4RAVXpMSws
7/BRWG43OJxu7Gdva4c7//E5KD9jY1P+7nXauiPwsEtaYOIcEwrurFWK4h7D
4mnzubVne2F1vsPDiSYLDL7qPLLpWQ8INQpNG8wz0X5V/Ye4XQNwIeX1qMRU
Od4wt+rgLHtuTHzHrWTnFihnOeuvMDkJJ2X3jLhumoHKj2cbKqQpsCjWI/P2
NR09ftJ25+u1wwmRKOm0vXXg9mr22NagNritt8OBW6sBZK5f9dkBjWhmOqNg
vrUDF/oST/3ZSgLx+IKaN9fZ+LxkgPD68TwaXfOXcd3RBd3m1w6bhqTjT3uV
esXro3jLQUP4gTMLyhxuaXx7O4qnjYTyVc9P4SoR9Q3MTRz4m8er/eFmC2QV
/1ap3NwOB2xfOCeWc6ubDxJGqnaMg1BpM22lQz9ubb5yXt+eCVUXTEcM383B
lnuU2+lYhzFCIJAGNHDn5msUeEDDf7WRby0tyVB3yXkodoaOe3cYkaq2D+L6
op0S8hSEv0IHH2nCLBCfRJ6vV+3HoOkr0f7cA/D1q2xPmy8TZZJPSe6SJ+Dm
Bv5Uc0E2+Kb1mCWdHcP2h/5S3s1sSD6cbapfTMJKx04ZRVMOHCfuv1pDa8CX
b1MexvTR4ftv1Jw3q8YgX4nk4nQaRAvS1n46lQ4a77itKz0oyLJJKXlAp+JR
x1sfNRXpsIsv4d+dombg6zYVtskcgIlfXJHCriQ4JaIng0+Y2J0iuYQnmOD0
Kuil/LMpfKlw7pJ/z2dwP/JcMseAAnGtZgeKXlNhOMXrjH0/FcnVC4aUDbPg
ZXqvtENoEGf8zvXryDGglOlyM/oMGf875PicrjwIV88JHgt73Incr6+lDTt2
wEdFDXa3XSXsvOAZ1f2iBb90FmzSMO1Aqf4DPX2n6GDaWaik+W8KOblCfPmi
+aBTY9Ls0zQMzW1V0gasfnyuqNelxs9e5pATo+aK/YBPDpsITLHw7J01e0WK
2sBlVwq/1MsBsDvYv+qvcAZ+U6qXCyklw7wYf9AMtQpCteTqSZKD8NssWVmi
fgoXnGHfps9MoPvVZ2ttYEADiVvkv2gKeq8cD/i2eh4P/rh7luZfBUV5A+cE
H3Cr86cp82rHjMDGnf9l249yIODLdSJFcABznyZsys6sAj2uyuODC+1QkDtk
VW9Khp97W0cvyNGxtt+twk3kCSiuazm46DgFMVn1SurWRZjQl87znG8SvR6O
fhdc9sW9Fcpm34/S8eV0o3+SZiW+vdFZsW9uEA3fmfu6JfTBfGamyPqSamzQ
6130rO8HnVn6+3l1JhrL9YaOl4zCi+DDu+wmmRjrrFGUbcbBu04ttYeyh8GW
0v1ziYsB2hLJh7WkKegsDyZF6URcFG90D28sg3fJ5U6BRAL6S9QUzOtngB+X
aOg2tXlcNxP57XNsKlgMVtq44hSKTD2NsXjOhu1WH5sF7dPAKPlpxBWkoFs5
z1D7y0LYSOJlPqePAlHgu62+CwdvvJJJOmpAgkMyJcqOP7kKe4TfnJs+3oUT
t/WFwrO70ap5f3XW1kKcVqi6ekqoF9jq22//edUDJ5qNGdVdzShe5DOWGNCG
nC16h1cQasF+Zd5YyVcCxHtJFRgvzmPR4RqThK56yOJ/XLphHQnaNCOxXZ+F
plvXOsxWzkP3wdkYpmIdqjA0jvy9MQSv+AUrnu1moSTu9SdyfcJV/96I6HMm
sL5YteLbhyFsiMWzdaZs+McpC3RWp6GNiMXV98v7Y/hoUvOdUBNwG9yXnlmg
4t1VAw67ErrQjrTty9/7daiqrqXgv3kIN607T7mv1whBqpkythUE/BUH55aM
lnvVuPxZHGcUnMQ19lb8YWBO6wdvG8tRJJwp9veKYYHl/XX2mb3zeMXzaPW7
OzVgGlisk7gqBdSvW6jRlcl4qFTiwINPDeBqoi2u/2y5//fuJqXkL+KxhweY
RDVfWPDu6Z3onMD5q5ben1w5MGZhuU83pHSZ269+NjEmAcfRY4o6SMKV0jIH
ama74J0Fz8qiRBII35HhWaewzBehdl1nTSuxe6Wu3wYhGuw1Nu/d4tMIv4+2
7b31pA9IhjY/ndYtYOGdqvbop6mQ01U/bhtJwnZSp9U+fiKI/+mzyrkzBR8Z
YRdPpDBwT3X0cOiKJLjFMsmeyqSgWXjyxz2bSMj+fOzfya8s+PfWIKSprwJ/
3r8Qm/Z3AmpzHZMT5JpA2Oia4tdIGt7aUSF+f8sQ7NxziXO8agCnL1g0C0X/
gM768dZjqlPwRau4R2uKiDL9lYJ7KorhKiXgtkptKfwtP3RGdrlvSvp+7Nef
IMMXR6EGbUMaGpixndbUDMCagtddb6eb8Mum0ZpwiXK0rD50VF95GCNbP3Cb
pPbDqYN544HZidD4xqVIV35smaf1R7R/seH85fUOl3c3grSDc4hmFw119HK/
X2uYBRMyT/dOj2Y8+s2aOMek4K6qZ98GQ5mwQkts68mPBKBKXqpwXp434gu5
ZzeGG3D7+8Vm9hU6eDm4rnPbssxHxW+/58EYpKy8dfFk+ijK/qwhBFezYfpp
0J8tUcvUEUAaWJiaBuatnUo52AiHUtNMqKZdMC1+ssxFdRgSbR4YLOb24eia
ry50teVzG6JcjhCngWqZzI7Hip34sdF2w5AiAyzyTN3YJpNQ5St4cZ0ZC/kb
Y1LGv3Rhqf2liF0+LHi5eTLw1/c+jIqs2NRUkIrl5IdGe79Mo7lV+NXSFDYc
cvoScyV+AjcNyq55JsyBPbm1vyasxmCas1lr8XkvfpvQpRU4clD7oOr4ktkI
KIYO5a5n1YO+XjvZ+Vwf/NFMPKC6VISd83kuwtRlf96tKhf2tQWoEStI7UZ0
dEkaDz7m0oI7XK4o6diwwPGSRTiJwIb8V7WHdUpJ+DujzVebMgieC95mQY97
UfZAt+lX12V+foQHvJbvz6S3tYAd+BtjEmluRmsn8XzEa+4VTYv4ZuO/ji3V
NRjq6vQ3ipcDr6SKvhIeEZDxttXghtTw/95HO8yyXj9d0YerygckspRYcF7/
7IpAIzqUFp9Ud7tAxUpqlKKt/ThsTtRKZ5KZOLbpYe0B6yHsHAqbdEpf5stD
+18IVi7AruT/tOP102FP7bt9F/+0wMfW0N0XS5kob63+KW62BdY4Pr0w/4eO
M2veLQq8J4LnXVfj2+nNuHnB4GF68XLvd5V/OmVPQAPd9x3mSg34eUH0yPQY
AS36CutRlwivgsr4YwpakGAgSP6mQIGi2KsBIScYqJYWqNov3oFBBRU9Jx4y
4LQBOjDNqtD9lnnStW4akOTDXctILAg5ftpSYtcQNj9e/8g8tBSd5ZQeWArQ
gKa2J3dg/wAGMtU7d39jgRZPbJRB7CCG7CsUkxJngfHnnocIy2BzW1vh9gk6
9J0WtN77mEt9e1y5taopAa6d6+JboUYHn6crWm3cyNiVZnm9c20pJEwqDv0Q
HoILL+Q3Pbg0gT9lj0hfsmKCzbGYNWXcHBD9esjTprgPr7zT+3s+jIq5TkO5
nD9UUM2ZoB89Tseg9WmRWy/RIVh6f36AHgdCbq/V5XnUi/lJ48939E+iOPfx
ywfes6E3Pz7CfAURPLTGrqilNGCc+6LuZ2muwtR9H2nW8k3Y9GbCcan7OqxI
HvcRPTEDk5u5M0tWLcEVXbX76Z/C4cNIyZOgz03gOqv1I/YXHf23/4cP5yfB
78DvwY2hTPwkuuGbqesQHmNv8vNr5AAp8dyHjxemsO2BfbpuIBsOvFTa/Lia
gsxnNwanMpb9dCxU1O7vKHxz5+GlvGXhG57g3asLpsDvVLLuuU1MlKKK1PxS
I+G4o6Ofbi8bVust2ertI8HsrtAIQgIL3UMtbrj20iHh8v2XYvvIuHMmS9xW
ZQra540aL02x8ZXxR0czbga+Snb6cdaEAoqjrQ9zejngc+8D7eiyT1kpq6zO
3d+JtfY7lBSbCzDmhFLlqptjMG5s+9SLi4UmxNG1dWeJ6Mv9SJsiwgHpm7tv
TJ1hgNXGNmkL9jRKiJ1UVrEYwvddzmlB51vggv7q54tSy7niostV109Dq/76
Gw0zJeD1MP4F328aBj7pnRUmEVF83ppTzKwGh7YplxC1Qjz0JjpwxX0GEIwT
GCHL+eP/p4rP2IOBXhKNl40qejCB/9Ev0vlZaIw5mxXtlY+exXZS1lF0+BUd
9zQinAN08hfu4/O9eHXfZef5WAKEpNF+ff7LxMZ/gkroQUJhx+jNvK9YQNfR
UXzL1wBfubtN7ntSUZv9Vvn5UjlMBq24J+A1DgWCiQvxXn1o18rlnqTLhANa
RMa+z7XglqTUdUubCFuuhnoO2naCQ1J0/ZY6AnxP6nKWKCFAqXRIg+yjIPwj
Pdz7WoBL3UPnwh7ORyKs2hBptjeZDfP3Z1W/lRMxn2Mt5kYaB8OuQ6G7VZi4
7+9TndmAIYjQjTt3JouFonOJapHOdnC+0Wb4b/QkkN83O3vFMkCyWHxFbecM
vqmJN84VIkMwPL4+dpGJJXUDLz9tHQTZ9vf3auV6UE7rZFcKTxj01QxkXm+Z
Bod7Tpw4dxpw9N8tMpfz6VNd2nr3kBY4+eN9ecZ8G2z8lXb1XDMD1Pqv5hrn
TKHGma6UcYtZnN3GfXFTCgHK3Vrhb+AMrKSVPbE8uewjH/2GuGY78RuvoizP
KAvIBvaU1XZETM+SjVZ3IYCMxOx3tm8SqlwNZMhlT8OTOIsxF086FB54qirR
M4PbgvN732fR4YXFydMLt8hYZ6lzvLt5CE88rxnwDu+FS6Zf5kfo3XAjVs+N
d3s2PLVJMshSH4aHisni5TeZWP/g1VtDRitKCyb2TPowQeyHmP3zT/3w3xAo
WJFZuLLnuZ7RfQJsUjPct9onBX9fHvmp82sSVF5Yum3tZaJC8zkXtmEW5tPs
ou4t+4rm3nFJ8UccjDUPsXir0AP3OyNz39v1QtAm6XRKFRN/3yhaX3ybgFW/
RLsyfJlAqHhom2NNANbhdZ+GQlm4+verxCqvfjD4MiZFKSrFE//4T56VmIP8
N67xziJdSDZjVZq/7oHw1d4nLbhZ2MulM+W1fQBCpVvXDVk3YMx8+5rxkRcY
Vugx33B3CqKuVE1JEWbQUu508JF9bKiNpuovLZJAk5aqQFrFwkjP40cLFThg
TWt2WyHYiz67hTa6rymGvfbnLtL3U9E9JV58xKEQb/NV8t9QpcD+Q4m/QxPn
oUfNQPDzyjDYHRBMNxJdQh5YtStzbwVWznaw7ZwGUSw5JEdvuUfjnkB4x0w2
PMt6prDnLhWDKnJSbgtR4OGT7LXyznS8l+KruMtwHhYCvafn2mrwRX1E5zVa
JiTxjf87JTwBiltO22S5DYOOVNDsle0ctBF13rkyrBPuVMibd19j4jmrFBW7
pXlgPu7tbNoRDY2/ndt/L3PVk62mg0tXu0BKn7LryJcySHYQ875/fQjIC+ca
l9q6ULf35sjL0WZ8rJKtt/RyCP7waUYEhy/P4xG7D3fnS4AwwBPgvZOOt9ek
Lz5bRwCeql/+F1+WYEuS/fmaFc0wcHHsz/eKbqAZfiksViPAKkZH8RuTJuRZ
eiuXSpmDsNwzd+XdanDrkkKc+E0CCMyHkCbl2dhN1rLtahuAwS2PX08VtiNl
wHR9LYerkN+d5O851InuAhLXoxmTKKa60jHYhQ1qe+Q0iVs4ECV/Wy35SD/u
j2bllSxNgMfrdRsURpmY+1u670pANVwRUtPRa56En47/OVctLiLe49GW2VWN
zjLUIw2bp7BB21fZRoANXxte/bQ0n4C4YN6arDEm/prX8jnlRUJO/zPBo9Yc
mFaixkd9yQaD7R4qpzxG4MU5upKu5iwO//NxkwodBEHJSIOrrRQ00guZDztL
B9mq1Ls6nDn4x6tbfU26GS9EsAsPn+ZSl8i4YegtR4Rsq9OXBpsG4Kbtli0q
3GwUsfioZ3awBeCOy0YfMQYWN16/TnFdxG2C7q3q1plgvz5Ce/K/MUjNeWZw
xJGBAnKC2TcODaLOn6kTKcxGmM7+9qt1Dwd8DY+KtXANomTeU9sHxvP48wht
dk1mA4jpXsfhTzToWaovexFDQ6U7Y5TjbWPASs77/JjMwFPfPKNKdtrCxvXh
sQMHKBAnrO4/pDWDW88Lp9f8ZEGm2MGAmqgWPJ+V9wwT6eDq6fi6aDcTDelq
S8/ukKGiv3Dtxx9MTFzy3m8bNw1pv+4Y5kQ1AsUoTrfLYQDeeireskI2bKVU
3NSpGcTCjK39pid/w+PwsfbkpGnYf/bU2l2aTdgVixNdyiz49BzSN3H6IeZA
2Zi2OQtfJByQ+cU9BG6F9w29q7vRXIv7YUVVPw6sZw5ckGHBq+/1Zx64zsNW
86WaUPdirL80bWXkQgZUP6jqrMJAvuvEBeVYNirE/krYdGAcvsY0xzxcGgfl
O8qV88YslD3xeyxsmQ/z/vuZ/IjYAQrRPL+yHhFBbvzSmgz7dlTs8dJrMKOh
MFfhiiYKDa57v796Y303nmiV+m26vhS/1Ya8dPzkik//Glr5XpgB2/zZC37G
JRj0n8FQ7nEKHExdt1BVUoWqX9c6xtEH8OvpSkvDkFLkvrb3mPT9UdzT8kw2
Q5KM+S50KY8AJnDduibl82eZb7vpT3kV2UjuE2AXBqcByfp8dVUZGRWdtP9z
L2rCgAejl9mXGHB3+5EdReva0GLfvhlCAhs4c09XVV2mgpaP7tl/RjR8pnCr
TsaADha3snfoyFHw5WrXFCX+NhwKLxMe+UtAbSFGwgl3Jmov3bdZwklQzn64
cEVjFPg2KwaKhDBxZebOgm87svCQnzL7M4UMtZ9ZLB72MLTtJDxssmZhTJ/H
Fb0jXTCqZn7H8BkL5bjEV5V7ZUDQpYRttIOT+I3M7WCZXAhnc47WuVRTMUbq
K1NkQwPEr+Fbd+XTAEgS05/vDy6GE/nmZrN/qPh/fc0aOQ==
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{491.9999999999861, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.292200989132774, 2.6839460302673532`}, {-1.590765091604971, 
   1.7016957002537711`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772814792463683*^9, 3.7728148042342153`*^9}, {
   3.772814844918444*^9, 3.7728148511936674`*^9}, {3.7728149082281837`*^9, 
   3.7728149350544634`*^9}, {3.7728150514921637`*^9, 3.772815078257606*^9}, 
   3.7728152023179274`*^9, 3.772815709510934*^9, {3.772815996042604*^9, 
   3.7728160026639013`*^9}},
 CellLabel->
  "Out[267]=",ExpressionUUID->"71a05f65-309c-4833-a601-3b4577176481"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"PDF", "[", 
      RowBox[{"ld", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7728157230128374`*^9, 3.7728157428009334`*^9}, 
   3.7728160243997917`*^9},
 CellLabel->
  "In[268]:=",ExpressionUUID->"6680d8c5-1215-4e66-a79b-aed9fc20309f"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.7728158267930965`*^9, 3.7728158992214584`*^9, 
  3.772816029820298*^9},
 CellLabel->
  "Out[268]=",ExpressionUUID->"c08b4f3b-583e-421b-8342-8f2eebe4b0a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "\"\<Model\>\""}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.772815866321417*^9, 3.7728158723124*^9}},
 CellLabel->
  "In[265]:=",ExpressionUUID->"2e867fff-85d9-4503-80e9-b7ff53759bdc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Sampler\"\>", "\[Rule]", 
    TagBox[
     TemplateBox[{RowBox[{
         StyleBox[
          TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
         StyleBox["[", "NonInterpretableSummary"], 
         DynamicModuleBox[{Typeset`open = False}, 
          PanelBox[
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["3", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"X_out\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["16", "SummaryItem"]}}, 
                  BaselinePosition -> {2, 1}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 3}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    LineBox[CompressedData["
1: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
8F8IhPH5
                    "]], 
                    LineBox[CompressedData["
1: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
btZs6g==
                    "]], 
                    LineBox[CompressedData["
1:eJwtlHk41HkcxweDDskV2VS/OcyMmTHzS0WE7zrGkVuUUlt0I4WpKXTZHCtK
2Rzl7pBqaysqxvb9oCRNqbaH3FdICDnKYtvaej/P+3k/7//ez/uPF81/j+c2
eQqF4vvV3/K7lsDjXFFKHLwyj7+VE9g0QoJdkC2n63kqSo5N/2lpNwk6+w8t
1XEpQAui3qtQ60hY0TZjcP/8QsTMTbZ2qyQhLX7QMcKxFF17+7tUq5AE7Y2m
3rKMcnTb+YPEK4eEAyaOcTvEj5FpfbZE9QQJYi+25alrMoTiC0qsxSQoNuyS
0mgv0cNNs62GfUlYyGPrWuu9RpUJRXf87EmwJv+9KDtYi5R6uSpJRiTUerbe
1U16g2LEgasiF5JQf6ba1WBTA7ISSoJZM0iwH8JBk92NKNwoY0ivSwjMQKyW
xG5G/VvbanYWCyFY4YlZD9GCmsZKwslEIbCKm95T/m5Bq7p4w2GbheCU8A/R
bNGKnsm+SQAiqX1jhF8rUvCaT92fLQCHxrvpTNtW5DPovV4SKoBy86u1i/pb
UHVWdM0LkQD+bKWdCVjXgtb452+J0hWA+sOFMuWEZkQ1k2onDBhCd2/m8fFf
m9Bz/bJ3A2WGQHrkSY2tGlGRfnF9foohDE1wQ6oq6lGJ6YXe4kBDYLw1uXRt
9psfe/igRrR3GO59gSjSfKpzNh/Kwm8ROSEy5HYieUNNCB8SOtep2lGqUJFF
0us1tnw4FC496ZJQgYxeZQZ1aPPB4Mh1m928B+ipQykztJcHBdu8TsmbFqHI
3L4pxVIejLo3U+5GXUGiJt5Y5kkelJo33CtkxCPOROQcMz8edI9oF14dT8Hf
93DBsbKv/97lMizRotO3ZnNhaAmjvs2iEusPR74ShnJBoBXgMTFcjRv8m5uF
Ii5Qd4O3XEUNTtplY7t1PhdWLNIMi/R5hZ0Ubyo+6zMAszIXuaHm11jFmKAH
YAOIW5zk3RhSh19OpqSvTDYAwrRhj6VWAz63RjPIaocBKKry3XUfNeHI8AWp
Xk85MKrOic3y7MR1As1CIosDN5QT7PLK3uL1UUqxnXs54OKStztS2I2p+8bm
Ztpw4EVHwBQ/owe/VmpzddHmwPKqro93lHvxM5NKm9F3bDg6reGhHvoe9ytf
+XBayoYbUR+1RY192EgS7cY6yYbytcdt3WwGcFb0L9tvbWbD/ciqeuHVDz/+
YQE507GjOH0Yp/h3Hg7JZoFlymjTIdePONcgSrQtlAXZOeyMfOURPEQrIK6I
WODB6Vhs8mgEH3byUTPT/doNmTv5saPY4/IprQUD+nDx5oA41mUMbzdyM3Qq
0wf7m5Z2DvPHcelgyvrqs/pgztdpCu4Zx94t2zPSAvThGEtiPFnyCWtQZ83z
K2dCY05EK2hM4v5mVZpqKhPk9SISIwYm8Y5lEteDgUwIWqJz8cLDKXxU2SYz
DzFBp92NYZo2jU3Xhs6J12SCHE9/tvnOf/FphmK2sIcB/LmpvteXfcEngiY9
kksYcC7xklb89BfMMPJmFSUygLGacz7AjwIbxBp6Zzcz4Dzfuc2unAL/3yOj
g+znunnWY3JQlHfbMTOHDiqjoZ9jfOSBwcV7tSR0OBKmOfH5kTzM2/LRysid
Dkx8XyfNQgF+c3H+a5xHh4laf6+tWAGO9so6/GbRQU6qfnOjExWmjcW3w/po
sDLwEft4OxWmllvz+TU0uNxz6EHdMUU40m3sfqKI9pUvK8N8+EoQ7eC56HQW
DdRF0yKldiVI7HO1fuJLg/O8mMNTC2dCqrePt3ARDa6JxXFRgtmQFxO8tqKL
ADuiakuaxhy4cfi0Q/RtArYLjqlZVquC1KKMs+84AXE1bo+LuWpQXTH96Ywv
AUSx+h69BjVoVLO/22JCwNTqmC92YeowwMzc4qNLgF7OHwdMx9XhO58JOJIZ
2zDirwH/ATy2yyg=
                    "]], 
                    LineBox[CompressedData["
1:eJwtlXk81Pkfx5WkWpF2ZQaTYRj3zHccibV9cm4r1lK5cmzOWiU8GNf2a/Gg
tsUQphztUI0QrZxF+r5DMUhyJDly5Rg3w6Bjf79+9Xw8Xo/3v8/H6/XHW8nr
vIPvVhERkXP/y+f7BQY05VmyL0OnyTLXUyNwBYOCNBMBp7YM6blkSEeNY9Bb
6ifjHtuIGoh5DyhdGFzPmi3oqupAtydj9wfgGJydqXHqlXqNuuqNzX8pxCBc
ldWqQB1GDnebqV0pGPzl9pfex8pxpJSnzVsJw2BVrnMssXoaodt+mmXOGFT8
6j3QqrmAiiuY1pJGGIyzOZKDl5bR0/wQykstDHw6Ghf9uCtovrTaPYyEwU2H
4r0ueQJE7bLc2NyNQTbJMbQ8ehV1yhnPNmzSwY5RL8PUX0NReFTB8V46PE5a
XMttXUMm6bZqBffpwNcdkdU3FSKFzLLTj/+kQwc5PYKeIURy7YVnr3nSIdRp
JzGtSYiet32GBoY/Rmx4vBaitPUJzI9Dg0BrS3NmpxBdj0nZfTCEBtkS0eRH
IET9/jwvM0saPEkipmK3hMj5bioWT6BB/3NyRlekEBFsppkiszow05aizbUQ
or3WHQYVuA4Irpxx4ooK0VGu1bncNB1YFr8r0121hurdbUhP/XVgyvyEP8Nj
7auPNvwdfopRMi1AXZVaS/YcbXCzv8UtixSgTOYtyclgbbCnq6dhOwRIXkpf
NdFCG8KlFzeoGSvI9eKgvqmsNnQKN/syyCvIuYnzw3a+Fvw6ekTvQtEy+m4y
CvU/0gLKyz6xQd1llDgUaAwsLZBrLLGvfLiEGkuiaZVeWmBZ27hvO1r66qMJ
gWsnbSmHFtDSXOceF44myNmP9rIPzSNJp8NJoiGaYEv86C5nPIdUd8iYtVlo
wna74rcl2CzS3WJPL5fVBKvlBTd75Rl00Exw/AFfA3aJNvdsk+Kjg62fyvrr
NMA5Rt+6eW0KYTlBP5FSNUDjnEFNdt8kUq78iXDBRwPinrWoXqyeQP/XaVMH
8WGbQvGGUTQk0ixyjKMOdTq0FPnUEdR88zvbmWB1eE86k5DpNowul5Xdz7BQ
h7hT72VFjw4hBewmzUFWHfa39Zre6e1Hl+XHGsh8NeBF+19R9OxDvNCw4C11
apAQVLQUMPIKDX/vYihgqcGxotzwRI9u9DwoWWbDSw0wDWuFmFcvv/ZDhT/y
S8SESfWo1wdvdeVQIdn8sLhTfg3i6i5H7AqhglrtDcmTkqXI6IBvd78FFVRe
tMdP2WWg5POEoXZZKhhaC0XoFDZeNPQNe4yvCgO9TPbapVL8Shz6QHysCopu
hqcSCmtxmkf5npBUVbj3D0qpYzbg7ED/rhkfVWgKUvuNr8HDv/ioQPLObyRv
xL3C5wKKrRw4KoAnLYwOXOzDRezyfaaCVeB3WccP6xcHcDFmDZVloQIN+Ydc
l+Le4pvDU4lWsirQcuP4p1HLEXyExbgmyafAOr8luLZ1FK+JTbecfESBWeNY
8dhj43j8Q+nrHSwKcJOi8AOD73Az/cLkFi8KqIyVZ/adnsS/7KUMdK2BTJWs
WXyXCXf6DEcZqn17YimMeTyU9eeiVYgyrI6T3t9rX8AlmiJHvC2VgdntGuP9
cBFvHw17BARlaHVub6tMXsLrRi/EuM8qwe8Xpz1/9l/G+56lYsagBJeOFBvr
mK/gZNZ9nmO6EsyX73N3UBbg6d8P2pSfVoLSJ+pNddtW8TdvX1vlNpHhkJFL
7n3PdXwiVSdAL5sMejvtpmRtNnBG1YF+biAZGFye5bsDm3idjYAtNCWD0W7e
AyL5PZ5wwu9vdRkyWJjamlaKf8DJecSx4A5FcDV1fFs99wEvj35BtmcqQsTu
8atKnR/xp8bzq/PyipDDXTu5XPEJdxwK8zr6ZD/wdiYba7L/xbMyP0OCf+Ol
/FINtsDErcJUmikJhKVaBRmFW4DRznqzPqcAhdl5Cy+oWyGcYBO6zlGAb62C
TQ6XbIWq2CEPHScF0C/NSp4wEQWBxI9Z175VAMk3pIn6HlHQro6nGvbIQ27D
pllP+DbwiskSlciRB/5ZBpdEEYOrAfGMfaflYb7niUROrxg8DrMqPWEkD4Wf
7kb+krEd7oVVylytkIMR8fD1O4M7gA3PTuw1lgOpFn2Xl+u7IMIxKugVjwiY
5bvstgkJ+Nmww3fImwjmkZch844kKHg3G2juIIKaHss7h7QHRvu8hh9WEYCa
0NXb3bEHcrM5vknnCcAxkP6BeU4ajhf85+ltXQKkmR5J+2NFGr78LwKIFEW8
WfHaC/8FNcGCVA==
                    "]], 
                    LineBox[CompressedData["
1:eJwBgQN+/CFib1JlAgAAADcAAAACAAAAAAAAAAAAMcDHoUWWiMDSPF5/745s
8zDAmgDvkE/8sr/lvtSnc+QwwDSlz89fy8S/lL6vShXTMMBINwQL1PPQv2x+
gHdRvzDAMO6QTYBp2L9q/kYuKKkwwKn7xldaY+C/kz4Db5mQMMBWqX2YuAXl
v+Q+tTmldTDAIoDs6Nob6r9d/1yOS1gwwAmAE0nBpe+//n/6bIw4MMCHVHnc
tdHyv+MBaYdqKzDAQADgemLw87+xTkDOJh0wwMUSyCRV7fS/ZmaAQcENMMAZ
jDHajcj1vwOSUsJz+i/ANmwcmwyC9r8I7XVaIdcvwCKziGfRGfe/3t1qS4ux
L8DYYHY/3I/3v4BkMZWxiS/AXHXlIi3k97/ygMk3lF8vwK3w1RHEFvi/zczM
zMzMLsAvo7kMoSf4v0SuQ6Omny7AE2HQEQ8y+L9bWAPXOXMuwLtvryBZUfi/
EssLaIZHLsAkz1Y5f4X4v2UGXVaMHC7AUH/GW4HO+L9bCvehS/ItwD+A/odf
LPm/7tbZSsTILcDw0f69GZ/5vyFsBVH2ny3AZHTH/a8m+r/zyXm04XctwJ1n
WEciw/q/MBO38768LMDz1dOu6Tv+vzndEquakizAcnyDfaQC/7/dQyLoEGgs
wAxP/aD2wv+/HEflqiE9LMDgpqAMcD4AwPLmW/PMESzARrwnczCYAMBmI4bB
EuYrwLjnE4S87gDAcvxjFfO5K8A2KWU/FEIBwBhy9e5tjSvAwoAbpTeSAcBZ
hDpOg2ArwFruNrUm3wHAzczMzMzMKsD+UgqzKssCwPK8QJukoCrAFi/+WhkZ
A8AUk/e2MXcqwAqmczOkcgPAMk/xH3RQKsDat2o8y9cDwEnxLdZrLCrAhWTj
dY5IBMBdea3ZGAsqwAys3d/txATAbudvKnvsKcBujll66UwFwHk7dciS0CnA
rAtXRYHgBcCAdb2zX7cpwMUj1kC1fwbAg5VI7OGgKcC61tZshSoHwI561aWd
XSnA9CtOepZcCcAUW4vxlR8pwNy4Tf/lYgvAFDdqz8rmKMBufdX7cz0NwIsO
cj88syjArXnlb0DsDsB84aJB6oQowMzWvq2lNxDA56/81dRbKMCYDE9fSuMQ
wMx5f/z7NyjAOV6jTA55EcApPyu1XxkowLHLu3Xx+BHAAAAAAAAAKMD/VJja
82ISwAGgyZE=
                    "]], 
                    LineBox[CompressedData["
1:eJwtlGs01HkAhmdGWClFo5ZSixnD3PzZOqWmw6rU1maxq7PlKFGy6SJWMnF2
x8qtVC472aToIqmtpLQu+b10YeQSoqLRZOwsytQ0NIOV3U77nPOc9/vz4bUN
3uu3nUGj0b7+z4/7CRfUFaySpqBNlHvPWtilpWDmG/X7xN0c0tkuYXFVFDyv
eczr9C8mNwSLlG86KTSlrtXVDt0kVNvCnbwHFOp2dtsmx94h3jW/lD8vpbAm
fuDB3B13idn4560G+RSyT+XYDEbXkz0/T1zPT6PgNWs8WzjQRCK8hRtLoyiU
RKRIf1K0Eouwy7JlART2GQy9O/LhMdH5LPVr86IQbXW22W7vE7LsWMoqO1cK
Ya4ZZ5ZLn5GXdtJzPBsK67wrtsujuslfpiG71MYU5u62sWV8JieZ2T3uHX3O
eHa0ovWyXw+xroqO8yh3RlJpRkzXdy9IyNHDR+enO+P4bl+TOkMFCTf9Yv/e
IGd0MGJ8lSIFaWr8iBCbzYKYnt8qyP6xrPi0M0IcWBCqkQcpCCt1pYcsUohu
+w0pJb8pSMeBHmaqlxC/zqWeVQ0pSJJs67jMWohIo2HlZNhL4nGwWXv4jQBF
fQVFYuNeMpbO+tB8TwBWmRtHIOslt+nbrLNOCtAvrtwy56qSxHYeWfM0QgCN
K8fPrayP3GfQDVvq+Hi63vjW6uoBcsX71cYfcvm4w5o9kjHrFSkfm7St3cNH
nH5LqXjba/LayD1wmicfFrK+N/SSIbIyqsh0sSUfEun5Ys6omtS6iwSe/Txs
u96iiZ7/loTuGqsRVPIwnLVzPaf6LaFGe2Wj6TxoRuz6LwZoyALVyMrCIB42
deprdO81//fhQqafOcZWaYleVFAsOcPFkdSCxxLJMBFkxQ5fiOSietJbm2w/
QsJb/IvdvLjYGmC1YUnjCLmqWdQosuYi8hRtIvPgezI2arXpmtoJ72qn9J9w
0RGffvr3GXed0NvMnrNarSNXqobKe3Oc4IGQtPwSPZkVIz98bo8TZpyo/ur8
wVEy2/9ipbTKEXLdoYU1jAnCHR9QijMdkbgic2BzxwRpeF+Ypd/hiGN/JKb9
U/CBDK/uaZix3BHjiwLnnAybJBfUx1Jh7ohg9fT6XCYNLwcrW6aqOND7BIkH
99FQJArOU5dzUF17wc6tkQadMuFdeDoHN1f0INmejkcKm5aEIA662k38O2Po
+NTHAQ8bTqfdimOgsCIm52y+A5J866/NaGNAmdp+2SnGAfITTEuJqwESlyqM
gn0c0JT3a4XJaQMkNeZdWsd3wIYQy/xLzCkYcp+WrZrqAHG/7H6QdArKsnkP
XF+zsURQwHO2N4SyYdydesTGcZfcVmalIaJ64+gvythIGLl923yzEUK7r051
z2fDLFYnZ08zhuTvbO28QDbCbtQ/6fI0Qfyg+Y9fLmAjtF21Nn69KQL62OEJ
KhaMnvsuns6fDquOR6MmpSx4NZrkpfWY4c8qC8uGRBaYfsbVYteZWJr7qqo2
gIVOF2qw8MVMnIwI0GgXsxB2aLJNtt8cclHwjUArFh5+E31AqTPHp/9hYTI5
o0sbbIF/AcMEc4Y=
                    "]], 
                    
                    LineBox[{{-17., 
                    1.0409497792752501`*^-15}, {-16., -3.509675075268432}}], 
                    LineBox[CompressedData["
1:eJwBYQKe/SFib1JlAgAAACUAAAACAAAAAAAAAAAAMcDHoUWWiMDSPLga06Ex
8zDAMS+LrtERwL9MLGPzh+MwwGWwqK2o3NG/vDSw9ALRMMBQSimDP3vdvwg0
uqWiuzDArrLjq1Zy5b8wKoEGZ6MwwMWAwRV5DO2/NBcFF1CIMMC1B5d/A8by
vxT7RdddajDAUa8UNIB497/Q1UNHkEkwwDO3Waiynfy/aKf+ZuclMMCvDzNu
zRoBwFbYT0CvHDDA7MKJY4W6AcDiCtFr3xEwwNodx/9yRwLABz+C6XcFMMB2
IOtClsECwIzpxnLx7i/Avcr1LO8oA8BDWOm2w88vwLYc5719fQPALsprn2at
L8BcFr/1Qb8DwE8/Tizahy/AsLd91DvuA8Cmt5BdHl8vwLMAI1prCgTAzczM
zMzMLsCYS62G0BMEwE+0SokHoC7A2kKXR/caBMCKcB9vvXQuwI2fVoprMATA
egFLfu5KLsC1YetOLVQEwB5nzbaaIi7ATIlVlTyGBMB8oaYYwvstwFcWlV2Z
xgTAjrDWo2TWLcDUCKqnQxUFwFeUXViCsi3Aw2CUcztyBcDXTDs2G5AtwCQe
VMGA3QXADdpvPS9vLcD4QOmQE1cGwORRUyhZNi3ACtta5Ws6B8Dxs3OBhQEt
wM3V2IC6DQjANADRSLTQLMA6MWNj/9AIwKg2a37loyzAVO35jDqECcBSV0Ii
GXsswBwKnf1rJwrALmJWNE9WLMCRh0y1k7oKwEBXp7SHNSzAs2UItLE9C8CG
NjWjwhgswIKk0PnFsAvAAAAAAAAALMD+Q6WG0BMMwFETHDM=
                    "]], 
                    
                    LineBox[{{-17., -3.509675075507629}, {-16., \
-3.509675075268432}}], 
                    
                    LineBox[{{-16., -3.509675075268432}, {-15., \
-3.509675081307818}}], 
                    LineBox[CompressedData["
1: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
                    "]], 
                    LineBox[CompressedData["
1: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

                    "]], 
                    LineBox[CompressedData["
1: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
xA9f+anhfw23Wxk=
                    "]], 
                    LineBox[CompressedData["
1:eJwtlAtUzAkUxntIihymmmY0M///TE0zzbMXemlLLwrlzVqikEJercnmUTu1
SaXHJOFksqksoRStMcvnFFmKVqGt9dhSHpNEU82KtWP1nXPPPfece+79ne/c
c9mRWxasMzIwMFihjy/5q5ywr/dwR86ILXRVqui2HimMVw2MUQczcDmEJnt+
S4ro8FRl3M8MzLxNk9iXSVFeN/fMqfFM5DmpMw/vlaKudg4/Vs7E6T1GCp8F
UlwV/UitNmPhQJXGl86WooDT9738OAuujbICnkaCkCM5QR1+BE42lSliKiV4
nBOzXzVA4PHFBPenWyUoS1EXTfqWROX9q6nlSyRYaV3q3LeHxF1N1jWBpwSm
6nEFiiISUsOe7g22EpQmvLhtcJnEI0qDbs0HMVxD/ZqnNpOoJ5111o/EqHGl
lrl0kRgW2D9PqRKD77J+zvA7Eludi9Xn0sU4GORcJ/+on+dWmqyIEOPFVpl5
mxEbTY1fJELmh6kc7Rg2Jn7MPhCjFOGqV0e0SF+nZbvFB24X4e6GJvcHhmy4
panSVweKcCV5wqG+TySsuth3VDQR5D8V7k7QkRCWxLov6hXCUbbt7Xb9fllD
/h8iCFGx8PCbxy/1fGHFBQH5QpgzzGWXn5A4652VdmyDEEHNv2eYtJCjPAJo
fd1855wgcXpZ7qZQpQBeayxmpOSR0Bp6fmzcJoC4kxtcLSdRcetm4vwAAW7U
7Vn1ZzyJxorpmjaqACZjreVD60gsP5cZEvXKEb2nNDXmS0ksarpxpP+KI3ZX
GGqtZ5FQmXW1JR10RM2kpb40DxKZUc9NrdY4Iv+B5shkgX7e/+Kj5/J0SfU7
AqK1kcORSj44PTeGdPcJfJbu5Qm382FsaVI7o5qAvxO5khvIR4bvYFxyHoHh
tbMK59P4+DWugFW/lQDr7lDbeQ0P6UUvb5jMI3Bpo5DwvcaDQZNmbZCAAGb0
xBopeGB8Uo6kmhDwDOCph9bz8ERscqD+KWvUHwdc2Fm/ecwSFoSOYXfClA6o
SMqmWYlZGPZ3lj3Z5oA+d4XFO2MWnJg7mhMCHLBDeW/OsXYmHtRYPWLZOOCb
moCHlComXplTM5pfcREue//L0jQmYghZb5aai7KXbQ0xK5lY8n76yJJsLnzH
6aSzXZmoki+rFUZywXkY1jk4jjnKYw8X+83PXicyMMXimwmblfYIr4o6vi6c
geqW/h8WbrdHmYe9R4cdA4VkJy0pUN//27nK0CFbNAxQet7T7DHoZWxS22AL
v7nyzjO9dui/yJ7GLLTFOLHrxDOwAyk0D9gbbQu6ghPTn2+H/cfUkvaptti5
b/5AYowd+KYeQ07GtlDPLP/rn5scvA6vfn3fZwpy46V9549yYEfncneaTcFV
XorUL46DeO9dJkdb6fD5rrT4rB8H7arzGT7FdEymKPwGrThYlH+rNmoTHV6z
51JoL9novlWXbuZBh8qwlUK9wkbmshOGTmPpOOjF83+bxUaQ/xriUQsNl4aC
SkpWs0FLN+769wRt1B8S+zxztS5GNDwLWzhRpyRh1N3ydss9GzQ+8ZPv09/t
2eDKDYuP2CBnV6EwKoTErkiHiK4IGwjJpaYlbBIbp05rodvZwLt0RLRXSyAZ
T+t1nVTcZ9MvxJ0ioDK2c0tSUkG9NPa4TQSBKZ8/k5XLqBgfWd+fQCNw/MLO
jP0TqTjPXXA6r5WFIFbaDrPr1uBv0rZq17IQ3a654+1tjdBBl37mJ6aeL/VN
JazAuG7x0aKICRufxW3r5lnh0L0UXX0AEye7l2eu6LaEiizsnqll4HSHwiwv
1RIZNcF1aWcYEJDG4WZSS5hmKHIVsQxwqssjrv9NgeRkYvh6ZwYO5Se7q4oo
+PqfGUiqz2kfiKTgP+zUwGA=
                    "]], 
                    LineBox[CompressedData["
1:eJwtVGlQUwcYhOo03mggyePlPZRcBHJREFArMhxBoFYRtMoMlcilTctRxDgF
kcODSkDFqRiPKTRSxVZEQOKBU9agpWigYBGNONIRgchl5fAAxWLtzuzsj93Z
H998s47RSWFxH1lZWQVP8b1+gCsyB452HJrg4mKpU0R1rwJ+815Aa0ehjGVa
HmpSoCPznU+1K4WHYYO/tJcrsMr34kZGKIXVkdpTgfkKHA6zm/19CgUrt9Oi
ki0KVFQv3OChozD8l/fiLh8F9LHty22uU+D7hZlsWAqo45ZcYw1SOLKza0jY
K8csg/JuEEUjcPfzE0KDHJlfTOaWraahz574O6ZAjvGIN/TYdhp1m7eOMWPl
SBD9Sep1NI7yl5jdlsnRXqvZVWGgIW1Q59fbyLGEHAmiW2hkrbKyuflEhkO+
AWn9T2gUVr9SeV2RofMTNZMcoxH1JjyHLJBB1B+74KyVA/pFzG2JKhliExbv
0DEc0GR6Dyl66l/7W2Y6QGUcH88oluLbL/Nv9k/5LWWdHkdTpDDcEoW8sHYA
Jys9gwiUonp2YyvjFQ3PoOZWa1KKuEXbIhf10XC1vu8WPiRBywxhn899GtN/
1ZXMqZdg9MajtHgjjUrlfK5cJ0HTupJ5P5TR8Gpdob+UIIHq8lc//5FHQ9Ly
/McVDS44T+bvq52kcEEk8es57oL4TRdq/M0U6IctDepEF+SS7oycixSS/nms
MPm6YMEau3TNIQqnYzanzWK5YPqb8AWOCRTqPVadEVqcoXIcbswOofB7/CkD
XesMQd1QqU481f8ivmy4wBmhd4P1cQwKmd1FO0tVzuiNmWa09HDx33lMYtgb
0+uSsrhQdypDdxeLUVqSfHi2iosJao72XIoYXTWINXhz8d3ehRlBgWLctf7G
M9mei24iS7SBFEOzJ4WxdISE/z1Z7v0hJ9zybrs3/zaJAxAXm+qd0CorPPOy
hERjW3Ki+zEn7F93VjOYSmLE9uOxOUlOGK2klMOBJGoCNG9TIULAPvZgVJo9
ZFWm0P1HROidqDUfCLKHJW968Rq1CG3+j356xrFHdzNtaVghwqxNGcocCwHe
LkI6zBQhL+TYjcCrBPS6UXVzjxChM90WehcQiHWoKo28KkT08ZXr4zYT2Gqz
1nyyQIhrb83xdZ4Ezn3dOuOgSgiV+9Pwz+YS//+PAFVXTnqatBxotKbR18UC
sIu6sz+N5kDQJKJzUwUQBktedizmoL2wQ5kaIsDDOwlF5dM4yDP3JV53FMDL
vTzqQjMbfqXrdInjfPion4Y9OcLG5HPCmN7Gx8AOXnJwBBu/Gb0GLBV8BERu
vNRJsJHNrmQb8vnw42jFZ9pYCBrc49ul5uNp2dX64nwWDnIbZ4y68TF/PKPj
jg0LGx9/zhqY5GF978rdtSfscMrXdsvtZh6qkonaCFc7JC21nyzU8yAuepZT
3mSLa41RD3zSeLi8oemBYZsttMM9E23reYipqTRu59mio/p89FqPqXzFyWV9
ZibK516aV0PwwFAe8LM7zsSH/eHhnWbfg5FoJv4F1GI+KQ==
                    "]], 
                    LineBox[CompressedData["
1:eJwlk39QkwUAhgd2qCkX7Pe+j5Fx8e33loSRUsZEJOgoECFZizjvhrsFJwME
4nZwSQVXONB0kzzniFJiiIFwx9Zwr53KxAFeyJWNimKodBgb81CHSpnP3XvP
/+/d88KefTs14TQaLem/PfFTXkL9vNnbukzCIy+ftN9SYMvlqAv3Z0is2bok
03kUeHAX/pIrJAZkzWujexQYqunU3bGRGH/0sranWYGGnGF57RckVD13MrZp
FXinnv86Q0ti1xv2Hk+KArHhtqODShKu702mLLYC/hv7XtVxSXwV/lnYpdty
uCNK4oXzBHyJjQsJg3J0NJ1ULzoJnF5tCYa3yGH1xk8VmgmornW7sjVyNJ8r
jUqqIhAynsuNSZZDE1X9oLaAQGNq31lNlBySRaVZrCQQ9k/nhHRWhundY3Np
MgI6o9mlt8vQsD0m4OETwIt1FYkHZWAOSM646ARW9aoXKotkONz1kB+7nsCo
5wlSrJSWp95eSyCjO3Px+EkpNkTilH41AX3284znKqQ4X/bjtUgaAaU9U0Gl
S/HzsY8uOIM8OG56dvxJSqH7dLam7i8e/vjl24KUgAS1r0Tc2+nh4UzL5N7U
YQkiur3JW3p5iF+n1v99QoLIm5r0xEM8pL+1uWrTfglafd/wlCU8rOkdW2xy
iOFushVOWLgwuq2V3lYxOi1kxWk9F8/Olx9wFIvxu3z/RusOLgxkWgz1mhi6
zYNtQ3wupvM522Kjxcg477OtLHGQbJkLfj0rgmEotLf4Jw4+D/ywsd8uwjNJ
odHAWQ7Gso3LOQdFmBbP/NbewkGEsyjHUCQCvW3AXKXn4P97PEIULz1WjXA5
MGQ0XgmzCnF1+LqrfpmNlEvRZacqhbD47xqabrDBSimBI1MIb9kHh319bITs
JsfWOCEa3mTSjjSyEUw4VJiwLICpmnHZ9C4bD7ve6z46KQDrsdo3H8cGN26p
Q9srAG3KrzLNsZB2rCjNZhQgP3pc9KWNhU8ij7e+XyoAx3Ive0bLQu6JmqS5
RAGq9d+1ZwWY6FOuH/2QJkBWnXuCf4CJ9lBezuw4hbaLu27lkkzEuvMu5nVQ
2L397akFJwOyrnXUUC2Flkf9fYFiBkas1VVkPoVkf5OugMfAfVvbQNkmCuqY
kVWC63T0X9XPOLkUgh/X1KnMdDzti8LKhiO/BvfQ8S9TiLRO
                    "]], 
                    LineBox[CompressedData["
1:eJwlkv0vlAEAxw+57pzdOPc87m0Vo+l57oXo5aRC/CDd0skoM7rlbdPYVSpN
1syWrLqa4dhOXdHS3GE2IuuLpMmtQodTW9Y46apb1wvKKvPZPvv8A58ATaE6
253BYAT/d63rhKLMUTuj+y3GCOHh/W5eAa6bdd/bNjEYNiXr13MFvD0j6xhp
YhgP3fuualbg/NKgfdUpgulU7OvZSwqoZ07LJi6KsHUv39ChVqC+NSG/fEkI
r15hOgIUSCqMb+DkCnHMrmZxHHKc3ZI7WDAsADHwpOlWuxysftNss1CAqMSs
8FStHOwjkp+PMvwRODxZ+ypVjjRrMjOP9IeLmR/G3SPH8nUjv2SShNmLz/CR
yLFYwgpw3iahHpvysK7IQNVX0CNaEu8zuqKyJmXocQgjWCoSqa3mFlO7DPXa
ocgWBYku9Kv6K2UYoa/sbxORcKv7HFyXKUOCQBMr4pKwjK4hRfZ04oEFNoly
WafS1SiFvaIou4xJIj1lKLTgjBSlgrkXcX8IHI5jdOw6KEXIzQfFuz8ROLFy
si8lQIr5r33Zx8cJVJ9zqZ8t0+iJCNS3dBKY632orRynYcy0+my7QeDo8DVJ
o4mGocg2+kZD4INen7SxioY5V25pUxDQhb/kDuTRGI8b8+35wYfT0B4bH0Yj
SH/fkaPj48v83XjjKoUptuWbeDsfVZxm/2kLBWdNbNC0zQ8D3t3dH+9QyIlm
XTZc9UP14nTIxAUK0cxN7IIYP2xo4uTVpVAoXSh/HPOXB98oVfHOHRTEdmXD
5qc89JoNySYBBYl7dJOnjof1fyiUKWtsLg0P/wD/ZBgj
                    "]], 
                    
                    LineBox[{{-16., -6.995669776103681}, {-15., \
-3.509675081307818}}], 
                    
                    LineBox[{{-15., -3.509675081307818}, {-14., \
-3.509675075453287}}], 
                    
                    LineBox[{{-14., -3.509675075453287}, {-13., \
-4.596633353632909}}], 
                    
                    LineBox[{{-13., -4.596633353632909}, {-12., \
-4.5966333537555775`}}], 
                    
                    LineBox[{{-12., -4.5966333537555775`}, {-11., \
-4.596633353510923}}], 
                    
                    LineBox[{{-11., -4.596633353510923}, {-10., \
-4.59663335335972}}], 
                    
                    LineBox[{{-10., -4.59663335335972}, {-9., \
-4.59663335271557}}], 
                    
                    LineBox[{{-9., -4.59663335271557}, {-8., \
-4.596633352782532}}], 
                    
                    LineBox[{{-8., -4.596633352782532}, {-7., \
-4.596633353315269}}], 
                    
                    LineBox[{{-7., -4.596633353315269}, {-6., \
-4.59663335191226}}], 
                    
                    LineBox[{{-6., -4.59663335191226}, {-5., \
-4.5966333517102385`}}], 
                    
                    LineBox[{{-5., -4.5966333517102385`}, {-4., \
-4.596633351789706}}], 
                    
                    LineBox[{{-4., -4.596633351789706}, \
{-3.0000000000000004`, -4.596633353828679}}], 
                    
                    LineBox[{{-3.0000000000000004`, -4.596633353828679}, \
{-2.0000000000000004`, -4.596633355211679}}], 
                    
                    LineBox[{{-2.0000000000000004`, -4.596633355211679}, \
{-1.0000000000000002`, -4.070744762183153}}], 
                    
                    LineBox[{{-1.0000000000000002`, -4.070744762183153}, \
{-2.4926122716790574`*^-16, -4.070744762350273}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.266849002507401`, 
                    2.079283430529795}, {-0.25, 0}, 
                    Offset[8], {0.08867008588000758, -0.024858466579425365`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.823778921606099`, 
                    3.2100458292197636`}, {-0.25, 0}, 
                    Offset[8], {0.08841272201852668, -0.015816350815419433`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.555201387965674`, 
                    0.3162795939006472}, {-0.25, 0}, 
                    Offset[8], {0.3104027759313457, -0.11886543253336973`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.9571397952037, 
                    1.1664366122916179`}, {-0.25, 0}, 
                    Offset[8], {
                    0.17655913189458872`, -0.058037594443174134`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.80784941629153, -1.4829146309918486`}, \
{-0.25, 0}, 
                    Offset[8], {0.07783288432682056, -0.02058495370263902}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.138256961847825`, -0.5311702306286505}, \
{-0.25, 0}, 
                    Offset[8], {0.17186942356039125`, -0.02579419988531384}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.523701904685602`, -1.6716515535227614`}, \
{-0.25, 0}, 
                    Offset[8], {1., -3.509675075268433}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.902679714531525`, -2.431687484333514}, \
{-0.25, 0}, 
                    Offset[8], {0.12801228034339474`, -0.07340008606247705}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.4, -3.509675075364111}, {-0.25, 0}, 
                    Offset[8], {1., 2.3919710656628013`*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.4, -3.5096750788920636`}, {-0.25, 0}, 
                    Offset[8], {1., -6.039385880285408*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.822222222222223`, -3.596633353315102}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.08888888888888857, -2.3661961279231036`*^-11}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.266812112029669`, -10.290659201810383`}, \
{-0.25, 0}, 
                    Offset[8], {0.08871435445328046, 0.015537846904745578`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.957072050604559`, -9.269959482794954}, \
{-0.25, 0}, 
                    Offset[8], {0.17661124312469845`, 0.04445264938979321}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.55215579795401, -8.3635932802029}, {-0.25, 
                    0}, 
                    Offset[8], {0.30431159590801826`, 0.09711681557351781}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.137302513114497`, -7.490277577945916}, \
{-0.25, 0}, 
                    Offset[8], {0.1730147620403848, 0.023277010050677838`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.54419607165569, -6.510754357531432}, {-0.25,
                     0}, 
                    Offset[8], {0.2883921433113805, 0.0021585604546485726`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.72788029439669, -5.519917502366761}, {-0.25,
                     0}, 
                    Offset[8], {0.08234524216491579, 0.012290912102685958`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.521994291196185`, -5.329344411131446}, \
{-0.25, 0}, 
                    Offset[8], {1., 3.4859946947958633`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.4, -3.5096750777950994`}, {-0.25, 0}, 
                    Offset[8], {1., 5.854531082150061*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.4, -4.16185004236106}, {-0.25, 0}, 
                    Offset[8], {1., -1.0869582781796225`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, -4.59663335370651}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.226680979016237*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.4, -4.596633353608785}, {-0.25, 0}, 
                    Offset[8], {1., 2.446540747769177*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.4, -4.596633353420201}, {-0.25, 0}, 
                    Offset[8], {1., 1.5120349416974932`*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, -4.59663335297323}, {-0.25, 
                    0}, 
                    Offset[8], {1., 6.441496225306764*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -4.596633352755747}, {-0.25, 0}, 
                    Offset[8], {1., -6.696154741803184*^-11}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -4.596633353102174}, {-0.25, 0}, 
                    Offset[8], {1., -5.327374097419124*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -4.5966333524734635`}, {-0.25, 0}, 
                    Offset[8], {1., 1.4030092643224634`*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -4.596633351791047}, {-0.25, 0}, 
                    Offset[8], {1., 2.0202151063131168`*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.4, -4.5966333517579185`}, {-0.25, 0}, 
                    Offset[8], {1., -7.94670995674096*^-11}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.4000000000000004`, -4.59663335301309}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.0389734345371835`*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -4.596633354658479}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.383000380883459*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4000000000000004`, -4.281100199394563}, \
{-0.25, 0}, 
                    Offset[8], {1.0000000000000002`, 0.525888593028526}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.4000000000000003, -4.070744762283425}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.6711965145077556`*^-10}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-17., 1.0409497792752501`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., -4.596633351789706}], 
                    Offset[{12, 12}, {-4., -4.596633351789706}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-4., -4.596633351789706}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-2.0000000000000004`, \
-4.596633355211679}], 
                    
                    Offset[{12, 
                    12}, {-2.0000000000000004`, -4.596633355211679}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-2.0000000000000004`, -4.596633355211679}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-8., -4.596633352782532}], 
                    Offset[{12, 12}, {-8., -4.596633352782532}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-8., -4.596633352782532}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -4.59663335191226}], 
                    Offset[{12, 12}, {-6., -4.59663335191226}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-6., -4.59663335191226}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., -4.5966333537555775`}], 
                    Offset[{12, 12}, {-12., -4.5966333537555775`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-12., -4.5966333537555775`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., -4.59663335335972}], 
                    Offset[{12, 12}, {-10., -4.59663335335972}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-10., -4.59663335335972}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-16., -3.509675075268432}], 
                    Offset[{12, 12}, {-16., -3.509675075268432}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-16., -3.509675075268432}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -3.509675075453287}], 
                    Offset[{12, 12}, {-14., -3.509675075453287}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-14., -3.509675075453287}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-17., -3.509675075507629}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., -3.509675081307818}], 
                    Offset[{12, 12}, {-15., -3.509675081307818}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-15., -3.509675081307818}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-16., -6.995669776103681}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-1.0000000000000002`, \
-4.070744762183153}], 
                    
                    Offset[{12, 
                    12}, {-1.0000000000000002`, -4.070744762183153}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-1.0000000000000002`, -4.070744762183153}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-3.0000000000000004`, \
-4.596633353828679}], 
                    
                    Offset[{12, 
                    12}, {-3.0000000000000004`, -4.596633353828679}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-3.0000000000000004`, -4.596633353828679}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., -4.5966333517102385`}], 
                    Offset[{12, 12}, {-5., -4.5966333517102385`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-5., -4.5966333517102385`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -4.596633353315269}], 
                    Offset[{12, 12}, {-7., -4.596633353315269}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 
                    1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-7., -4.596633353315269}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., -4.59663335271557}], 
                    Offset[{12, 12}, {-9., -4.59663335271557}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-9., -4.59663335271557}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., -4.596633353510923}], 
                    Offset[{12, 12}, {-11., -4.596633353510923}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-11., -4.596633353510923}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., -4.596633353632909}], 
                    Offset[{12, 12}, {-13., -4.596633353632909}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-13., -4.596633353632909}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.4926122716790574`*^-16, -4.070744762350273}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"X_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["X_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"checker_b\"", TraditionalForm], 
                    Offset[{0, -7}, {-17., 1.0409497792752501`*^-15}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-4., -4.596633351789706}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -15}, {-2.0000000000000004`, -4.596633355211679}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-8., -4.596633352782532}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-6., -4.59663335191226}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-12., -4.5966333537555775`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-10., -4.59663335335972}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-16., -3.509675075268432}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-14., -3.509675075453287}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-17., -3.509675075507629}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-15., -3.509675081307818}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"checker_w\"", TraditionalForm], 
                    Offset[{0, -7}, {-16., -6.995669776103681}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -15}, {-1.0000000000000002`, -4.070744762183153}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -15}, {-3.0000000000000004`, -4.596633353828679}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-5., -4.5966333517102385`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-7., -4.596633353315269}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-9., -4.59663335271557}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-11., -4.596633353510923}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-13., -4.596633353632909}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"X_out\"", TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-2.4926122716790574`*^-16, -4.070744762350273}], \
{0, 1.}, Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4846726653225846`, 
                    5.295823550387978}, {-13.266849002507401`, 
                    2.079283430529795}], {0., -0.17}, Automatic, {
                    0.9628770091614506, -0.2699404846041063}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0.9685317354845713, 
                    5.41405081961365}, {-12.823778921606099`, 
                    3.2100458292197636`}], {0., -0.17}, Automatic, {
                    0.984372876293391, -0.17609667917901295`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.9668835321657727`, 
                    5.136279701388457}, {-14.555201387965674`, 
                    0.3162795939006472}], {0., -0.17}, Automatic, {
                    0.9338690366160831, -0.35761518766650413`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.7175190497621067`, 
                    5.224952469994753}, {-13.9571397952037, 
                    1.1664366122916179`}], {0., -0.17}, Automatic, {
                    0.9499913581808642, -0.3122761908658376}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4062682811250309`, 
                    5.317180598917217}, {-15.80784941629153, \
-1.4829146309918486`}], {0., -0.17}, Automatic, {
                    0.9667601088940394, -0.2556851420227329}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0.8162991794478593, 
                    5.439085920412801}, {-15.138256961847825`, \
-0.5311702306286505}], {0., -0.17}, Automatic, {
                    0.9889247128023273, -0.14841803262688352`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{5.2894807955802055`, 
                    1.5071141009187714`}, {-16.523701904685602`, \
-1.6716515535227614`}], {0., -0.17}, Automatic, {
                    0.2740207456215948, -0.9617237810145828}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{2.735791547565353, 
                    4.771314767259646}, {-15.902679714531525`, \
-2.431687484333514}], {0., -0.17}, Automatic, {
                    0.8675117758653902, -0.4974166450118824}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3155840861145407`*^-9, 
                    5.5}, {-16.4, -3.509675075364111}], {0., -0.17}, 
                    Automatic, {1., 2.3919710656628013`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3216622341569746`*^-8, 
                    5.5}, {-15.4, -3.5096750788920636`}], {0., -0.17}, 
                    Automatic, {1., -6.039385880285408*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4640838541524257`*^-9, 
                    5.5}, {-11.822222222222223`, -3.596633353315102}], {
                    0., -0.17}, Automatic, {1., -2.6619706439135014`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.9488523145076093, 
                    5.41753442861728}, {-12.266812112029669`, \
-10.290659201810383`}], {0., -0.17}, Automatic, {0.9850062597485963, 
                    0.17251860263774715`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3424666865668047`, 
                    5.333646332056367}, {-12.957072050604559`, \
-9.269959482794954}], {0., -0.17}, Automatic, {0.9697538785557032, 
                    0.2440848521030554}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.672159910889413, 
                    5.239645143749175}, {-13.55215579795401, \
-8.3635932802029}], {0., -0.17}, Automatic, {0.9526627534089409, 
                    0.304029074707166}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.7333502100583538, 
                    5.450889603487432}, {-14.137302513114497`, \
-7.490277577945916}], {0., -0.17}, Automatic, {0.9910708369977148, 
                    0.13333640182879158`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.04116530300390593, 
                    5.499845944917785}, {-14.54419607165569, \
-6.510754357531432}], {0., -0.17}, Automatic, {0.9999719899850518, 
                    0.007484600546164714}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.8119394076200448, 
                    5.439738449443467}, {-14.72788029439669, \
-5.519917502366761}], {0., -0.17}, Automatic, {0.9890433544442667, 
                    0.14762534684000814`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-5.286775708708193, 
                    1.5165759479211662`}, {-15.521994291196185`, \
-5.329344411131446}], {0., -0.17}, Automatic, {0.27574108144021203`, 
                    0.9612319470378532}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.2199920951825334`*^-8, 
                    5.5}, {-14.4, -3.5096750777950994`}], {0., -0.17}, 
                    Automatic, {1., 5.854531082150061*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{4.047623562957408, 
                    3.7238076605259804`}, {-13.4, -4.16185004236106}], {
                    0., -0.17}, Automatic, {
                    0.677055938277451, -0.7359315569013469}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{6.746745384589303*^-10, 
                    5.5}, {-12.399999999999999`, -4.59663335370651}], {
                    0., -0.17}, Automatic, {1., -1.226680979016237*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3455974112730473`*^-9, 
                    5.5}, {-11.4, -4.596633353608785}], {0., -0.17}, 
                    Automatic, {1., 2.446540747769177*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-8.316192179336213*^-10, 
                    5.5}, {-10.4, -4.596633353420201}], {0., -0.17}, 
                    Automatic, {1., 1.5120349416974932`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.5428229239187203`*^-9, 
                    5.5}, {-9.399999999999999, -4.59663335297323}], {
                    0., -0.17}, Automatic, {1., 6.441496225306764*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.6828851079917513`*^-10, 
                    5.5}, {-8.4, -4.596633352755747}], {0., -0.17}, 
                    Automatic, {1., -6.696154741803184*^-11}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{2.9300557535805183`*^-9, 
                    5.5}, {-7.4, -4.596633353102174}], {0., -0.17}, 
                    Automatic, {1., -5.327374097419124*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-7.716550953773549*^-9, 
                    5.5}, {-6.4, -4.5966333524734635`}], {0., -0.17}, 
                    Automatic, {1., 1.4030092643224634`*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{-1.1111183084722143`*^-9, 
                    5.5}, {-5.4, -4.596633351791047}], {0., -0.17}, 
                    Automatic, {1., 2.0202151063131168`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{4.3706904762075283`*^-10, 
                    5.5}, {-4.4, -4.5966333517579185`}], {0., -0.17}, 
                    Automatic, {1., -7.94670995674096*^-11}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.1214353889954514`*^-8, 
                    5.5}, {-3.4000000000000004`, -4.59663335301309}], {
                    0., -0.17}, Automatic, {1., -2.0389734345371843`*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{7.606502094859025*^-9, 
                    5.5}, {-2.4000000000000004`, -4.596633354658479}], {
                    0., -0.17}, Automatic, {1., -1.383000380883459*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-2.559976780619099, 
                    4.867907033078084}, {-1.4000000000000004`, \
-4.281100199394563}], {0., -0.17}, Automatic, {0.8850740060141971, 
                    0.4654503237489271}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{9.191580829792656*^-10, 
                    5.5}, {-0.4000000000000003, -4.070744762283425}], {
                    0., -0.17}, Automatic, {1., -1.6711965145077556`*^-10}]}, 
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin", StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    Part[CompressedData["
1:eJxTTMoPSmViYGAQAWIQDQGGB44vdJ3WceCSDYQvcIChv+zW5yShA4wQgQMM
kRvBfAhX4UD93HYkvsQBhlUVSHyNA/9DZiDxVQ78b5+IxDc48O/lvLYLwjxQ
vs6Bf85LkfiGB/4pLkfi6x34l5PXjuAbHKh/M/32hN/SUPd92N9waH5AoYcA
lM9xoGHaTCT7RA40GJYi8WUONByZgMRXOvC/rA2Jr3bgv8IUJL7WgXrLaWD+
GeWou3zfNu5pWLgIbB8AQrVwfA==
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 24, 24, 24, 24, 24, 8, 24, 8, 24, 24,
                     24, 24, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {998.5000000000001, 788.5387767066582}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35.50000000000007, 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, True}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, 500}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_Bcore_net"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_WWcore_net"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_Wcore_net"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "X_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_4net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_4net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_4net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_4net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"]
                     -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"X_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}]}}, BaselinePosition -> 
                  Automatic, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
           Baseline, 
           BaseStyle -> {
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
         StyleBox["]", "NonInterpretableSummary"]}]},
      "CopyTag",
      DisplayFunction->(#& ),
      InterpretationFunction->("NetGraph[<>]"& )],
     False,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Processor\"\>", "\[Rule]", 
    TagBox[
     TooltipBox[
      FrameBox[
       StyleBox["\<\"Center\"\>",
        StripOnInput->False,
        FontFamily->"Helvetica Neue",
        FontWeight->"Light",
        FontColor->GrayLevel[0.]],
       Background->Opacity[1., 
         RGBColor[{0.98, 0.98, 0.9702}]],
       FrameMargins->{{3, 3}, {0.5, 0.5}},
       FrameStyle->{
         Thickness[0.5], 
         Opacity[1.], 
         GrayLevel[0.83]},
       RoundingRadius->2,
       StripOnInput->False],
      TagBox[
       GridBox[{{
          RowBox[{
            PanelBox[
             TagBox[
              
              GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]], "\[Rule]", 
            PanelBox[
             TagBox[
              
              GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]]}]}, {
          TagBox[
           GridBox[{{
              RowBox[{"\"Invertibility\"", "\[Rule]", 
                TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Missing\"", "\[Rule]", 
                TagBox["\"Allowed\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Mean\"", "\[Rule]", 
                TagBox[
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"-", "0.00011694978920109752`"}], ",", 
                    "0.00007700457070020814`"}], "}"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"Version\"", "\[Rule]", 
                TagBox[
                 RowBox[{"{", 
                   RowBox[{"12.`", ",", "0"}], "}"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"ID\"", "\[Rule]", 
                TagBox["5267004855378899174", Short[#, 5]& ]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
     Annotation[#, 
      Column[{Panel[
          Grid[{{"f1", "NumericalVector"}}]] -> Panel[
          Grid[{{"f1", "NumericalVector"}}]], 
        Column[{
         "Invertibility" -> Short["Perfect", 5], "Missing" -> 
          Short["Allowed", 5], "Mean" -> 
          Short[{-0.00011694978920109752`, 0.00007700457070020814}, 5], 
          "Version" -> Short[{12., 0}, 5], "ID" -> 
          Short[5267004855378899174, 5]}]}], "Tooltip"]& ]}], ",", 
   RowBox[{"\<\"PostProcessor\"\>", "\[Rule]", 
    TagBox[
     TooltipBox[
      FrameBox[
       StyleBox["\<\"FirstValues\"\>",
        StripOnInput->False,
        FontFamily->"Helvetica Neue",
        FontWeight->"Light",
        FontColor->GrayLevel[0.]],
       Background->Opacity[1., 
         RGBColor[{0.98, 0.98, 0.9702}]],
       FrameMargins->{{3, 3}, {0.5, 0.5}},
       FrameStyle->{
         Thickness[0.5], 
         Opacity[1.], 
         GrayLevel[0.83]},
       RoundingRadius->2,
       StripOnInput->False],
      TagBox[
       GridBox[{{""}, {
          TagBox[
           GridBox[{{
              RowBox[{"\"Info\"", "\[Rule]", 
                TagBox[
                 RowBox[{"\[LeftAssociation]", 
                   RowBox[{
                    RowBox[{"\"Type\"", "\[Rule]", "\"NumericalVector\""}], 
                    ",", 
                    RowBox[{"\"Weight\"", "\[Rule]", "1"}]}], 
                   "\[RightAssociation]"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"Key\"", "\[Rule]", 
                TagBox["\"f1\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Invertibility\"", "\[Rule]", 
                TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Missing\"", "\[Rule]", 
                TagBox["\"Allowed\"", Short[#, 5]& ]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
     Annotation[#, 
      Column[{Null, 
        Column[{"Info" -> Short[
            Association["Type" -> "NumericalVector", "Weight" -> 1], 5], 
          "Key" -> Short["f1", 5], "Invertibility" -> Short["Perfect", 5], 
          "Missing" -> Short["Allowed", 5]}]}], "Tooltip"]& ]}], ",", 
   RowBox[{"\<\"ProbabilityNet\"\>", "\[Rule]", 
    TagBox[
     TemplateBox[{RowBox[{
         StyleBox[
          TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
         StyleBox["[", "NonInterpretableSummary"], 
         DynamicModuleBox[{Typeset`open = False}, 
          PanelBox[
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["3", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["2", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["14", "SummaryItem"]}}, 
                  BaselinePosition -> {2, 1}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 3}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-13., 7.960204194457795*^-16}, {-12., 
                    5.000000000000001}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFaB7pFGYX/rT1jc8W47OOv55oHcrTPdPKxrrDX
DWKbl3dW84DEq2t/NnjstOeI3sAavUHzwHq7l5PtXh62T/Ir0TgwQfPA0fQ3
j76eP23voAPSoHlAo2KXqb3OJfv5XzyBSPOASs5BsZyD1+wbl0d/PqykeeA2
f/eUxuW37Z+5tDPx/NQ4sHRj93X7/Af2Z8BA44CVMQg8tl/Udvng+gUaB+au
Z7ppJPnM/uZOp8C4co0Dh08eOHJN6qV9bppU9Y0AjQMrG3O/yVm8sY/ribKX
09U4EHidI4+78L39Bm3mefo8GgfiUk+Knkv6aB/nIjKd5536gU9rW6e/kPps
n3OtV2vrJfUDma6WNlcffLG//jA/QnOX+oED2k+Yp2z5Zr8wbZdC5hL1Az8S
2t6pTPth/+RZu1d6gvqBtign5sBv/+zZvi0O3qGofmBneYBITDaTA/MUPpuY
F2oH7vMH6q+VZnW4c+A4c/AWtQMbvi66JN3D7jCp5vyqOa1qBww03f4t38Pp
oHxc1dAyRu1AwiqrTYFruR0mLDg1TcNC7YBNZcM7iTheh1sc+25nSaodODlV
fPPfc3wOkPhSO8AIpgUcAOALz3c=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFaB7pFGYX/rT1jc8W47OOv55oHDqjud62ffMZG
N4htXt5ZzQN/p16pNSs7Y8MRvYE1eoPmAfs0x93KYWdskvxKNA5M0DzQOo31
n5vxGRsHHZAGzQOX1BTdFvCesZn/xROINA+oiE+ZrP/0tE3j8ujPh5U0D9Sk
xz37svO0zTOXdiaenxoHbok32H3oPm1zBgw0Dthp/JytGH3a5uoWr072BRoH
sneuXMU8O8d+eZF8/l6glQFbQPweexs277p3XhoHnpX85zcSX2A/Lf/stllK
Gge4N4Pk19hvW7dM4tBv9QNHJofclYrcZj/r8LXFKdfUD0wFqz9g77IuNqJp
k/qBe29Wnlv37Kj9ljxrM+kJ6gd2bwLpP2N/FuwetQNWxiDw2L5TTei2+QK1
A1xqgmYSYs/s8yxtt9WVqh0oX/zLIofvpX0tq1/cQh+1Aw2r31vry7yx39zl
cnm+qtoBZbsPdon27+1FTiqIVjGoHdik+0+B0eaj/ZwDj5QN7qoemM/YpcT5
+JO9X2HX/4O7VQ/cniW95MSUL/aat8VX6M9RPZDyc9NS+8Bv9jr/umQr61QP
2MgGqOdJ/LA3e6A/K9dJ9UDPH8ZYtZu/7V9OWKBxlEv1QPHHb6Vrg//bOwrc
PVF/XeXAj1rxnYwujA4OcU+r5q5QOfCf96qGyG4mh2dVO+3k6lQOXNQw4eLj
Z3EwSosUYYpQOZB3ziT2vT2rg5rC0d8eZioHrvy7prjDl83hwIo/Xz5JqBxg
2yUVkWHB7gBJPyoHGME0hwMANC0OLw==
                    "]], 
                    LineBox[CompressedData["
1:eJxFkn0s1HEYwI9sqVbTdMJEfnfuxR/kCK1zP1m20x3RuUYpKS83aWZJFilD
ee+uMzrV5CXvpSzVcu37kPeXtGWJKMOO03G5bM5x6m7Mffb57nk+/z1/fO0v
x5+JMiYQCE66p5+bOEIe0ch848UAU9XTF+Y1SwfKXo+jle21qKI6hJPcR4eZ
l428sU8fkJmkrv9VHR0uSiXEQXEn8nz2cUKWSYfdqhIhu+szspUWpVuH0YGV
KhhsSh1GbQqndxxnOnyLwaxzLMaQPSM/7dYGDeYmmAdDLCcRK79xpLqXBkSm
R9bDqGlkufag/YuQBokBhJG/Khniijp6Z+JpECjmE/HROdQaVFFz258GPZl8
bvC9eSRg0sMe02kwjhFSXTW/0amg0FkvExpkX+NXjbstoFghwy9qggpDkfzO
0+6LqGP1Tfr+Fio0mxJ+5W8sotCCSaFPHhWcQ/lL4gIlonFaktThVGCf5a9H
TivR4IAeCqz+06NEy35lOimg3mqb7gSdFFjbat+Tegwd12ahkwKarS5iycUs
ucN2S1v1GHrGs3Das9DQe95e0mnozXvI261t5+SalJPBqp7hUDaqRCcaSNdf
J5MhpbavKDVaiUqygu9/5ZHh0Fp3wKPqRbQR9LMrlkEGbbkjTyVZQMlmbS43
D5DB7qmqPNdbgUza1rvVqyS4q7A7HlE6jyqviHKUUySwFzbbJtXMoWB1WtL5
IRKYZNdze2NkyOJOZyETkYAyvLPz3I9pFKEtFkhukIC7i5Wwz7UHsTJqmlUu
JNCILhhrcvrwerOVOPYyBv6TjaKrjCm86nlWSakUA5ulP8U7KhX4ER8eQ56L
QWK/C5ukUeFcWbiXWzgG3wXGuLX5Cq4WNbxPOYaBNHC+KfqJBnfzda9CVhgc
zpCXmhZr8c3/jIHR5uL9Hx7xncg=
                    "]], 
                    
                    LineBox[{{-13., 3.000000000000001}, {-12., 
                    5.000000000000001}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFaByBsDodPJ07F2D7XPGBx50oPVzKHw6JlEd4V
pzQPVKXOvSR3jcNBYObK0xtWah44PTvyok0kp4PFgr13n7VoHlCt5+xMecPp
ILdnSqNUjOaBbv61P6f2czkcfKO33Vtf88A/Hxfli07cDopGPXVV/zQO1Jmf
ZxVj43Gw61lzfdlJjQOc530XptzkcZD43X/owgSNAwuED3zds4fXwWfikZNP
8jUO3EgJPepvxuewO3DR8lpfjQNmiaLCUxfyOWTYaMbM1tQ4sIuD4X7PPz4H
r8DI57YsGgfSokU1zX35HbImGHmm3lU/YBYZ+nFyL7/DkZ9bGgW3qh8wYDpg
vng/v0Nk74MJTt3qBwLCQv+kPOZ30PDeWvYjXv3AtFBR+5s/+B2MwUD9ACM4
fAQcJHdX/P3MhuDXRyzhsbmrBucncm9L4N6G4B+4vPZn4kQEf/7G7uv2+Qj+
ryX+QITgXwEpN0Lwtc908rFKIPiQ+ELwATG9oyU=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFaByBsDocrxmUffz3XhPN1g9jm5Z3VPMAM5XNE
b2CN3qB5gAXKT/Ir0TgwAaHeQQekAcGf/8UTiBD8xuXRnw8rIfjPXNqZeH5q
wM0/AwYacPnPIO3zEXyZ44VAhFDvAgYacPdkHxTLOSiGUD/F7uVku5fqcP6e
3SCA4D+x6Hts0Yfgc29LACJ1uPlnwe5Rg8uDvTNfDc09anD1rmD3qMHdkwN2
jxqae1TR3KOK5h5VNPeows03BgOEvOTuir+f2VQPMEL5dRFLeGzuqsDlE8EG
IPgHLq/9mThRBa5+3sbu6/b5CP6vJf5AhOBfASk3QvC1z3TysUogzIOkH4Q8
ADX4mEw=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQDQFaByBsDodPJ07F2D7XPHBKWbv46xx2h0XLIrwr
Tmke6JyVpPtQk91BYObK0xtWah6wTlmmd3gZm4PFgr13n7VoHnjQ8K1stjCb
g9yeKY1SMZoHKj4EsWUVsDocfKO33Vtf8wDr5t139PayOCga9dRV/dM40HbC
4NfLn8wOdj1rri87qXHgt8GmuNlqzA4Sv/sPXZigcSD5jT2XszOTg8/EIyef
5Gsc0Jm9ymrDSUaH3YGLltf6ahw4P+/Vm6w4RocMG82Y2ZoaB7y+/1coZmR0
8AqMfG7LonFg/pJX105sYnDImmDkmXpX/cCZZav4cooYHI783NIouFX9wJW/
9idiHBgcInsfTHDqVj+wZeUq5tkyDA4a3lvLfsSrH8hf9eqAGjuDw9kzIKAG
DR8Ghy+e84EIwZc5XghECL6rCwgg+DkHxYAIwZ9i93Ky3UtVOH/PbhBA8J9Y
9D226EPwubclABGCD3GPygFGFPcg+LJg9yD4EPcg+BD3IPgQ9yjD+RD3IPgQ
9yD4PGD3IPjGYIDgS+6u+PuZDcGvj1jCY3NXCc5PBHsIwT9wee3PxIkI/ryN
3dft8xH8X0v8gQjBvwJSboTga5/p5GOVQPAhFIIPAO7v9j0=
                    "]], 
                    
                    LineBox[{{-13., 5.000000000000001}, {-12., 
                    5.000000000000001}}], 
                    
                    LineBox[{{-12., 5.000000000000001}, {-11., 
                    4.000000000000001}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQDQEaBxjBtIjDFeOyj7+eqx9ggPJ1g9jm5Z1VP8AE
5bNFb2CN3qAOV5/oV6JxYAKC76AD0oDgL/jiOf+LJ0J/0/Loz4eVEPLPXdqZ
eH6qwflnz4AAgg/WPl8N7h6Z44VApAY3z9UFBBDqcw6KARGCP8Xu5WS7l6pw
/p7dIKAK1//Eou+xRR9CnntbAhCporlHBc09KnD3yILdo4LmHhU096iguUcZ
zT3KaO5ByPOA3YPgg51zRgnOX9x2+eD6BUoHjs6xUKz6LexwY6dTYFy50gGJ
4kctL94KO+SmSVXfCFA68Lnpr5b3dWGH+J4oezldpQNRZzqFF20XdlivzTxP
n0fpgI9/u93bPmGHOBeR6TzvFA+c4v62WidW2CH7Wq/W1kuKBy4xXotOUBJ2
uPYwP0Jzl+KBVEN1v457Qg4L0nYpZC5RPNA862XTkolCDk+ftXulJygemDpb
Xmtuo6AD27fFwTsUFQ9I3uj3e9gm4MAyhc8m5oXCAZkFJQ8eOvE73DlwnDl4
i8KBx2x2cjMW8TpMqjm/ak6rwoGeJ9VhT3V4HJSOqxpaxigckLDU6zz5kMth
woJT0zQsFA60sIRucznI6XCLY9/tLEmFA5fdPtwNO83hAIkXBWj4cDgAAKUC
87U=
                    "]], 
                    
                    LineBox[{{-11., 4.000000000000001}, {-10., 
                    3.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFqBxjBtIDDFeOyj7+eq8L5OkFs8/LOIvjs0RtY
ozcg+El+JRoHJiD49mANCP6CL57zv3gi+E3Loz8fVkLwn7u0M/H8VIHzz54B
AQQfrH0+gi97vFDmeCGC7+oCAgh+zkExIELwp9i9nGz3UhnO37MbBBD8JxZ9
jy36EHyebQnc2xIQfLBzzijB+de2eHWyL1A6MDVU1P7mD36HZUXy+XtLlA4E
hIX+SXnM72DD5l33zkvpgAHTAfPF+/kdpuWf3TZLSemAeWTox8m9/A5b1y2T
OPRb8UBqtKimuS+/w6zD1xanXFM8sIuD4X7PPz4Hl3WxEU2bFA+YJYoKT13I
57Alz9pMeoLigZspoUf9zfgcXrAU2OrnKx5YKHzg6549vA6HioM1Is0UD3Cc
912YcpPH4f7Z4sZWRsUDtebnWcXYeBwchC96bLmgcOCfj4vyRSduh0fO2XVP
Fysc6OJf+3NqP5fDiXgnJclqhQPK9ZydKW84HT6lhZn4hykcODk78qJNJKdD
XOTyLe2mCgeqUudekrvG4cBnbrr4kITCAYs7V3q4kjkcIOlHARo+HA4AGn/G
Lg==
                    "]], 
                    
                    LineBox[{{-10., 3.0000000000000004`}, {-9., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEqBxjBNIfDVeOyj7+eK8P5OkFs8/LOKh9ggvLZ
ojewRm9AyCf6lWgcmIDg24M1IPjzv3gCEYLfuDz682ElBP+ZSzsTz08luPln
wEAJLv8ZpH0+gi9zvBCIEOpdXUAAIZ9zUAyIEPwpdi8n271UhPP37AYBBP+J
Rd9jiz4En2dbAve2BEW4+cZggJCX3F3x9zMbgl8XsYTH5q4CXH0iN8gABbj8
wctrfyZORPDnbey+bp+P4P9a4g9ECP4VkHIjBF/7TCcfqwTCfEh8IeQBi5xw
Mg==
                    "]], 
                    
                    LineBox[{{-9., 2.0000000000000004`}, {-8., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-9., 2.0000000000000004`}, {-8., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-9., 2.0000000000000004`}, {-8., 
                    3.0000000000000004`}}], 
                    
                    LineBox[{{-8., 2.0000000000000004`}, {-7., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-7., 2.0000000000000004`}, {-6., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-6., 2.0000000000000004`}, {-5., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-5., 2.0000000000000004`}, {-4., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEKBxjBNIfDivQ3j76el4fzI5bw2NydJX+ACcrn
2ZbAvS0BIX9ozouABkUEvw6sQQ7Ot3852e7lZASf2X/7s3ZXBP9sJx+rxCdZ
uPmzZoKALFz+BUi7HYJv2ffYou+xDFx9VwcIyMDlbzTpAhGCr1F7Sb32kjSc
X1EOAgj+iUKZ44UyCL5EzkGxnINSaO6RhMuDvWOH4FuA3SMBV98Jdo8EXP4m
2D0SaO4RR3MPgn8c7B4EXxzsHjG4+WlgIAaXNyr7+Os5L4L/d4OHZMUuUbh6
sO4cUbh84/Loz4eVEHzbZPH19fdE4PwvnvOBCMEHK09F8MNmCMtyGYjAzYek
H4Q8AJSllRg=
                    "]], 
                    
                    LineBox[{{-5., 3.0000000000000004`}, {-4., 
                    2.0000000000000004`}}], 
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 2.}}], 
                    LineBox[{{-3., 2.}, {-1.9999999999999998`, 2.}}], 
                    
                    LineBox[{{-1.9999999999999998`, 2.}, {-0.9999999999999999,
                     2.}}], 
                    
                    LineBox[{{-0.9999999999999999, 2.}, {
                    1.2246467991473532`*^-16, 2.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.632426463519458`, 
                    1.8378676824027063`}, {-0.25, 0}, 
                    Offset[8], {1., 5.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.235871269246914`, 
                    0.786213352753084}, {-0.25, 0}, 
                    Offset[8], {0.1559393025382665, 0.19127469773826666`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.920182958499248`, 
                    0.12919975755013535`}, {-0.25, 0}, 
                    Offset[8], {0.14306450739988819`, 0.08380524814062784}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    
                    False]], {-11.355555555555554`, -0.9999999999999991}, \
{-0.25, 0}, 
                    Offset[8], {0.08888888888889035, 
                    1.1102230246251565`*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.417705098312485`, 
                    4.164589803375033}, {-0.25, 0}, 
                    Offset[8], {1., 2.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.812820711494876`, 
                    3.9773027452952476`}, {-0.25, 0}, 
                    Offset[8], {0.08165695756016156, 0.017459426695964453`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.355555555555554`, 
                    3.000000000000001}, {-0.25, 0}, 
                    Offset[8], {0.08888888888889035, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.266666666666666`, 
                    2.000000000000001}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888857, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, 
                    5.000000000000001}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-11.4, 
                    4.4}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.355555555555554`, 5.}, {-0.25, 0}, 
                    Offset[8], {
                    0.08888888888889035, -8.881784197001252*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    3.400000000000001}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000004`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.500723193132872, 
                    3.9982540573304046`}, {-0.25, 0}, 
                    Offset[8], {
                    0.37633139151203565`, -0.0034918853391929794`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, 
                    2.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.777777777777779, 
                    3.000000000000001}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    2.6000000000000005`}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-7.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-6.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.355555555555556, 
                    3.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888946, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-2.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1.0000000000000002`, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999999, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 2.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13., 7.960204194457795*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., 5.000000000000001}], 
                    Offset[{12, 12}, {-12., 5.000000000000001}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-12., 5.000000000000001}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., 4.000000000000001}], 
                    Offset[{12, 12}, {-11., 4.000000000000001}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 
                    1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-11., 4.000000000000001}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 3.0000000000000004`}], 
                    Offset[{12, 12}, {-10., 3.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-10., 3.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 2.0000000000000004`}], 
                    Offset[{12, 12}, {-9., 2.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-9., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13., 3.000000000000001}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13., 5.000000000000001}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 3.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 3.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-8., 3.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Total_loss_jac\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2", ",", "2"}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_loss_jac", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {2, 2, 2, 2}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8., 1.0000000000000004`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Z_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Z_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWI01JX/AcCkFpqAB9qGAJyT27Olvsgt4HwxP7PDdQwl4FK7ps1
638ByF3VVefWw9xIDXMZqOA+5LDbsfV/QGHBnvMg9tpV/6MHg/s2bvwfCnIP
yI0g/vIl/xOoGIYUu6+i7PhukFtA7oKJZWasfY8uRiagyH3HDv93gYUdMJ4V
YOKwMISF6UC5r6z0yH5c4USlMCTbfaC8ALIf5A7ksIMBKqVDst0HS3egsgWX
GlgY4lNDAJDlPkT62noXW9ihq6MgDEl2H3p5R0g9rDzs6XnTQQ/3gewB2QfK
G8SoB4UvLAzxhTU13AcyHxSnxIYdDMDqPzLKG5LcB6tfGxtvzSfRHnhe6Wx/
1k+CNqLdR2yewAVOn/7vgBTPgtR038sn/w1IyRO4ACyeSWgjEnQfKKyKC/ed
ITde0QHMn6B8Tan7QH6EpTmQeeTEKzaQlbnuHZFlAE73IbsNlOZAcUwNt8EA
LL8QcCNW94HcVldzaRWsTKC222AAFo540iOG+5DTGy3CDZ8bQf0WNHfC3Qdy
F6hsgqVfaJtOiZZugwFYnQTDNdVnN0yb9r/c17tpCkgO1BaBpQdYGUpBXvAh
Bzs7VOT5+TRu93Av+w/DxkbB/5H5vj4N+0HqyLWDTP9gAFCfBhx+Po0bQXEO
KtupFZcA7/Dzsw==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-8., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"square\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}], "2"], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["square", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[#^2& , {4, 3}], "Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-7., 2.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"S\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_z\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_z", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-6., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWIO9uf9f///1+BgTrAh0rmwEFa6or/INzR9ngS0J0CFBpHdfeB
wg/mRhCe2P+5gQLjqO4+GKiuOrce2Z3Ll/xPIMMYmrkPBF4++W+Qm7PlPsyN
ebnbbp8+/d+BBCNo6j4YAIVdZsba9zB39na/6SQybdLFfTAwa9b/AvS0ScCd
dHUfDPT0vOlAdifI3TiUDoj7YAA9Dx07/N8FTcmAug8ENm78H4qch0qLDx5B
Kt8H3H0wgC0PqakFhQ+0u9DBtGn/y2Fu9HAv+w8q76lshQ81sI933XFjo2Cw
G0HY17tpChXMpSqwsspNQU6bIExi+U5rAPYzBeU7rQFKnKCX71RqI1ECsKYZ
9DbSokX/0+jtMCjAm6bRy/cdW/8H0MthUEAwz4HchJyHSooOnKBi+50QILpM
ANVDyHmotfnuTDqkTZLLLFCbiIrtd0KA7DIVFH5EtpEoARSV+aD2e2HBnvMw
N1LLUUiAKnUSLG1Swyw0QPU6EwBfZk3A
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-6., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_half\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "0.5`"}], " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_half", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[(-0.5) #& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHUgP+//+v0Np8d2Za6or/SGZSCzeSq1dNLSjcx6dpmZdn
1WMP97L/nh6VLyn1KxZAVvidPv3fobhw3xlQmIFwY+Ot+S+f/DegtuMYSHQf
KC7rai6tgrkrN2fLfRq5CwaIch/IXZ3tz/qzMte9g7hr693lS/4nAMUFaOg2
otw3a9b/AuS4BLmTxmGGDHC6D+SGwoI952Huqqw4uY2O7oIBDPeB4hKU3hFx
ueU+KC7p7C4YgLsPlJYWLfqfBnIPyF0g902b9r8c5N4BchvcfejlRVnpkf0D
EJcYwNIyKwkUlzB35eVuu71j6/+AgXYXKC4n9n9uAJX5sDS2a/t/vwGOSzAA
xSUsX4Lqpeqqc+sHQ1yCwgbkFuSy38oqN2UwuAtUpsLyJajsB5W50LKf4vYL
JQDkDuQydtKEL/VAdykhKRkQ94HCDNldeMoLuroPVvZnZqx9D0tjGzf+D8VT
j9PNfchxSULZT3P3IZcXsLhES2P4AM3cB4tL5PKCjLKf6u6Dlf2gcgLmLmh5
oUCGcVR3H5H5klhAdffBwoyENIYPUN190HqcWu1+qrsPAJ89jxE=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-5., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"gaussian_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.8378770664093453`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["gaussian_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.8378770664093453` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-4., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-4., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {"Real", "Real"}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 3.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 3.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"S\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., 3.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_jacobian", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 2.}], 
                    Offset[{10, 10}, {-3., 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzNlT1IQlEYhi/V0OjaZg3S2JhONaVhEYa0pviT4r35U5oV1UUimqwGIZdA
giKoENIkopaWMAqaopCWKFxqsP10v7ifXPxL7XivLxxBORwezvudx17rrMnR
wTBMoFv4MFlCw36/JTypEr6YuYDLydltBm7O7rT7B62dwo89wuoXVhdDPcb/
HkAIUa9HcrsO+yGhAVSSpvkELtV2tLDGsZknYGM9Z680wcQ0xZfNkqGA7+oO
uGDx/PNe/o0M0IZjGuSDLleWH4+QC+6sApeR4uLr2afVuq1jRj5p0IcK+pEg
MejDH8bRSFSjMU2V7KWdP8+Mx4lX2uXmxnu0RV1WSlU+YPB5Lx+QK7xwm5aR
C1PGBzMG8+52nXzijB3sk2mZuTBFPvBFIkEcwANcwBeLkRDwKsRW5Cv1RXD+
5lqBLssC7xK6RC6OTb9kUmRCaS50v+CJPM7YxTkZV7jL30CX+C7BZUuL96ft
0CXcDbBI3a/TsbZ24AKn4rtkPakcOBc6Zlrj/LoDHFLH7mx9rwpcfZItivDB
nUm5avhCVj50v2vm+AtnLJkkZrHLSpGNT9plA+5vOZ/UF9hlyYzVSsv4sEup
L5pwP3U+dD94ArlEX6ibOI46X53vst5Q58M7a2DGaoU6n/g/Xs0XjYY63w9V
CIu3
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-3., 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"density_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.3862943611198906`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["density_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.3862943611198906` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1.9999999999999998`, 2.}], 
                    Offset[{10, 10}, {-1.9999999999999998`, 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWI01JX/G9tvjvz////IPWUAh8qmIECQO6D4Z6eNx0UGkd194FA
Y+Ot+cjuPHb4vwuZRtHEfSAAjF+l3Jytd2FuLCs9sp+MOKeZ+2Bg+ZL/CZkZ
a9/D3Nnb/aaTBO00dx8MgNIicpzPmvW/gAhtdHMfDIDiGebGkqIDJ4BxroBH
Od3dBwLocY6nPBoQ98HAxP7PDchxvmjR/zQ0JQPqPhiorjq3HtmdO7b+D4BK
DQr3gQC2fK6mFhQ+0O5CB6A4hrnRw73sPygNUNkKH2pgH++648ZGwWA3grCX
e30NFcylKrCyyk3JzdlyHxaelRUnt1Gp3UEtAPYzetqkQZyTC1DihMw6iJYA
I82A6hvkOqiwYM95AnUQLQHONE1CHURLQDDPoddBdI5zossEPHUQLQFJZRa2
OojGcU5WmQqKY+SwpGF5RFGZX1dzaRWyO6nlKCRAcZ308sl/A1gdRA0HoQGq
1ZmgtAmiAQJrTNs=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-1.9999999999999998`, 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_prob\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_prob", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[Minus[#]& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 2.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGob8//9foaz0yH5qmIUGKHIfyF2NjbfmZ2asfZ+WuuI/
tRyFBMhyH8hdE/s/N+TmbLkPcldW5rp306b9L6e24xjIcN+sWf8LCgv2nAe5
C4RB8Qp0rxIN3AYCRLvv9On/DsjuAoXdyyf/DWjkLhgg6D5QXNbVXFqF7K4D
e/57AsUFaOw2vO4Duauz/Vk/LI3l5W67DYpbkDgd3IXTfaBwQU9jkyZ8qadh
GiPafehpDJT26ZDG8AGw+0BxVly47wxyGjt2+L/LALoLDCwts5KQy1ekNEaP
tI8TwMpXT4/KlyB3gdw3f87/XKC4IBWM96EE+/q0zPL2rL7r4V7239go+L+P
d91xZ4eKPErNZaCwrkRP+yC2lVVuCiVmUgOA4rK66tx6RNrfenf5kv8J0DRG
lfYLue4Cla+wtA/Kk2tX/Y9GS2N0dx8oXEBtCeS47Ol504GjHKOr+7CVrwTK
fbq4DxSXqG2LrXd3bP0fQIRWmroPvf1KRtuCJu5Db1vA2q9ktC2o7j5Q2YAc
l82Nt+dS0LaguvtA4QZyF6g+p0LbgibhB0pjVDJuwMpnIgHV3QcA3U2J6A==

                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999999999999, 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"perpixel\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"0.5`", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["perpixel", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[0.5 #& , {4, 3}], "Input" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.2246467991473532`*^-16, 2.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Total_Loss\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"checker_b\"", TraditionalForm], 
                    Offset[{0, -7}, {-13., 7.960204194457795*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_1\"", TraditionalForm], 
                    Offset[{0, -15}, {-12., 5.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_2\"", TraditionalForm], 
                    Offset[{0, -15}, {-11., 4.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_3\"", TraditionalForm], 
                    Offset[{0, -15}, {-10., 3.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_4\"", TraditionalForm], 
                    Offset[{0, -15}, {-9., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"checker_w\"", TraditionalForm], 
                    Offset[{0, -7}, {-13., 3.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-13., 5.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Total_los..\"", "\"Total_loss_jac\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Total_loss_jac", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-8., 3.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Z_out\"", TraditionalForm], 
                    Offset[{0, -7}, {-8., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"square\"", TraditionalForm], 
                    Offset[{0, -13}, {-8., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_z\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_z", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-7., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"minus_half\"", TraditionalForm], 
                    Offset[{0, -13}, {-6., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"gaussian_..\"", "\"gaussian_coef\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "gaussian_coef", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-5., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"plus\"", TraditionalForm], 
                    Offset[{0, -13}, {-4., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_jacobian\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_jacobian", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-5., 3.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"density_c..\"", "\"density_coef\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "density_coef", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-3., 2.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"minus_prob\"", TraditionalForm], 
                    Offset[{0, -13}, {-1.9999999999999998`, 2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"perpixel\"", TraditionalForm], 
                    Offset[{0, -13}, {-0.9999999999999999, 2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Total_Loss\"", TraditionalForm], 
                    Offset[{0, -7}, {1.2246467991473532`*^-16, 2.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-5.393193716300061, 
                    1.0786387432600122`}, {-12.632426463519458`, 
                    1.8378676824027063`}], {0., -0.17}, Automatic, {
                    0.19611613513818404`, 0.9805806756909202}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-4.262855384506947, 
                    3.47535091332949}, {-12.235871269246914`, 
                    0.786213352753084}], {0., -0.17}, Automatic, {
                    0.6318819842417255, 0.7750646153648996}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-2.7799720581843137`, 
                    4.7457091520356025`}, {-11.920182958499248`, 
                    0.12919975755013535`}], {0., -0.17}, Automatic, {
                    0.8628562094610186, 0.5054494651244207}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-6.869504964868043*^-15, 
                    5.5}, {-11.355555555555554`, -0.9999999999999991}], {
                    0., -0.17}, Automatic, {1., 1.2490009027032806`*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-4.919349550499537, 
                    2.4596747752497685`}, {-12.417705098312485`, 
                    4.164589803375033}], {0., -0.17}, Automatic, {
                    0.4472135954999579, 0.8944271909999159}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.1499858073915914`, 
                    5.378432173300869}, {-11.812820711494876`, 
                    3.9773027452952476`}], {0., -0.17}, Automatic, {
                    0.9778967587819761, 0.20908832861665297`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-11.355555555555554`, 
                    3.000000000000001}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-11.266666666666666`, 
                    2.000000000000001}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-12.399999999999999`, 
                    5.000000000000001}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-11.4, 
                    4.4}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{5.4956039718944346`*^-14, 
                    5.5}, {-10.355555555555554`, 5.}], {0., -0.17}, 
                    Automatic, {1., -9.992007221626245*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526012, 3.8890872965260104`}, {-10.4, 
                    3.400000000000001}], {0., -0.17}, Automatic, {
                    0.7071067811865474, -0.7071067811865477}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0.051030934720856874`, 
                    5.4997632534229615`}, {-9.500723193132872, 
                    3.9982540573304046`}], {0., -0.17}, Automatic, {
                    0.9999569551678111, -0.009278351767428522}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-9.399999999999999, 
                    2.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3739009929736363`*^-14, 
                    5.5}, {-8.777777777777779, 3.000000000000001}], {
                    0., -0.17}, Automatic, {1., 2.4980018054066113`*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-8.4, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-8.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.889087296526011}, {-8.4, 
                    2.6000000000000005`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-7.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-6.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-5.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-4.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-6.355555555555556, 
                    3.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-4.4, 
                    2.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-3.4, 2.}], {
                    0., -0.17}, Automatic, {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-2.4, 2.}], {0., -0.17}, Automatic, {
                    1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-1.4, 2.}], {0., -0.17}, Automatic, {
                    1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 2.}], {0., -0.17},
                     Automatic, {1., 0.}]}, FontColor -> GrayLevel[0.7], 
                    FontSize -> 8, FontWeight -> "Thin", StripOnInput -> 
                    False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    Part[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQFaB7pFGYX/rT1jA+FrHGAE0yIOEL4alC8A5atA
+RxQvhKUz+AAM48JRV4LzTwFNP0KUPUf7FHlYebJoPEl0PgiaHwBHPIw+zgO
QD3u8B8C9qPy38P57DEixmrLFtrA+AB7vCqY
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 24, 8, 8, 20, 8, 20, 20, 20, 20, 20, 
                    20, 20, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {789., 376.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35.49999999999998, 38.49999999999999}, {
                    28., 18.}}, ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_1"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_2"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_3"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_4"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total_loss_jac"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"], 
                    NeuralNetworks`NetPath["Nodes", "square"], 
                    NeuralNetworks`NetPath["Nodes", "summation_z"], 
                    NeuralNetworks`NetPath["Nodes", "minus_half"], 
                    NeuralNetworks`NetPath["Nodes", "gaussian_coef"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Nodes", "summation_jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "density_coef"], 
                    NeuralNetworks`NetPath["Nodes", "minus_prob"], 
                    NeuralNetworks`NetPath["Nodes", "perpixel"], 
                    NeuralNetworks`NetPath["Outputs", "Total_Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Total_Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], "Z_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["net_W" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], "square" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "summation_z" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "minus_half" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "gaussian_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.8378770664093453`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "Total_loss_jac" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "summation_jacobian" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "density_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.3862943611198906`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "minus_prob" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "perpixel" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Total_Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Z_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}]}}, BaselinePosition -> 
                  Automatic, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
           Baseline, 
           BaseStyle -> {
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
         StyleBox["]", "NonInterpretableSummary"]}]},
      "CopyTag",
      DisplayFunction->(#& ),
      InterpretationFunction->("NetGraph[<>]"& )],
     False,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Method\"\>", "\[Rule]", "\<\"RealNVP\"\>"}], ",", 
   RowBox[{"\<\"Options\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"MaxTrainingRounds", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "500"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"ActivationFunction\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "Ramp"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"NetworkDepth\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "8"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"CouplingLayersNumber\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "4"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"NetworkType\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"FullyConnected\"\>"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7728159282538395`*^9},
 CellLabel->
  "Out[265]=",ExpressionUUID->"fe4fa28a-dcdc-4939-86df-393e14b4a6ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PDF", "[", "ld", "]"}]], "Input",
 CellChangeTimes->{3.7728159137027445`*^9},
 CellLabel->
  "In[264]:=",ExpressionUUID->"c9f4a6be-4b46-4649-8845-2fc7b8ae4a10"],

Cell[BoxData[
 RowBox[{"PDF", "[", 
  TagBox[
   TemplateBox[{RowBox[{
       StyleBox[
        TagBox["LearnedDistribution", "SummaryHead"], 
        "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          TemplateBox[{
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                    "], {{{
                    EdgeForm[], 
                    GrayLevel[0.9], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.78], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.65], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.5], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                    Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]], 
                    
                    PointBox[{{4.905308194867242, 2.630836391598927}, {
                    0.20100883034436162`, 0.02382136569576569}, {
                    1.0719666600928879`, -1.250632626872198}, {
                    3.0527398070698992`, 
                    0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                    0.3149621009629985, 
                    1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                    2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}}, {{}, {}}}}, {
                   FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                    AxesLabel -> {None, None}, 
                    FrameLabel -> {{None, None}, {None, None}}, 
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    AxesLabel -> {None, None}, DisplayFunction :> Identity, 
                    Frame -> True, FrameLabel -> {{None, None}, {None, None}},
                     FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "GridLinesInFront" -> True}, 
                    PlotRange -> {{-3, 3}, {-3, 3}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RealNVP\"", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                    "], {{{
                    EdgeForm[], 
                    GrayLevel[0.9], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
wJ7xxnfGlomPTgN3Dvs7+IesdeKPJ4Fl1cY6MGJnEj6y03JvNo4wtsuxBie+
Phb9PYn8U2ecAC/KeAq+js3DF49nEfPELTG7Q7TJZ7CuOunAGzi4/FAa377t
+D7kc8t4yp3BTfAUHEWvnIXPl/X7jDGOWD7rex00Bu4wBxPBPzAR/J3l/LTL
9tlsOZekgXHIsN3r9jue0M8W6+NKEvm43us2+cwW2xJ9trp/yDah32gZuQ++
jV833KT3sh3e8H4Nvvdpn7PTd9p8kw0/Ev0tiVyxyd+RnTyBXoj/FcZ+dDnd
sd7k++F35JdHXbf0yTp0t9NztrtPvGxLIj+Bqcvtf1fT8EX8ska+PUH8dBb5
nDxBjuhvDh4OtP/wjXpkvP0ebOzvOeU17DHVuA5mEsPgCnXD+DTy54gk4hls
oJYYZN/kDOqFCvcbjbvsBR6vsA3OZIHXe7LAYTC4yr5ZZ/88qn59Gj57Q/1x
SdQkVcYwzq42rnxumZEL+cAf5EbeNvWHJlELTi5FbUNNOMl4f916GWA9bcjj
jOfzuM9A3w8ZkXmk9+ntfZfap+u9B3VVN6+hTurhPbq5P9hj1FrVPptzSnnE
Qotrt1nOzTXWZYV9EF8kLibL7ks1v9C6y2nEEjF2Td8uJVHTYc+ulgkbdHH/
Ht+bOpi6ABmqfM4gyzjBeh/isxm7IwmdodPb/K2X9YkfUGd3sg06+zzmOdX9
vy7Pko5avLBvdfIa/ABfpD55Lg87rc/jrsQDuWOd/QI/2ep7k68nFdEn3x7M
A7+eywK7FhjH0N9ct3/vvAGmVRbRH5WHPed4fIvzD3lhfBH9EXnYfabHNzrP
zLdNa43JtUXIeqvmv55GrucO97l+oI7A32f4LkUR9Ql1yiPOgeQUcg3xSg7a
q7HJacQD8YIeyDXUgrVut6WxnrVfLuId8qz23J1GHgRTFmcRL7/J4zv7UytO
KYXtse2iLHx8gg1Ffi/neWKL9eT2xeX8bvuNtA8wB9sSn3zHR6hjqGcWZuFf
lb5Lu/0Sv6BOWVjq8FN8Dj+iRtuWRh9sJ7+Aufgj9RKyPm0swX/2paHnCmPx
WK+jrmL+gixy32jnBWoT7APe0h/jdRNdSxOfvEmvOb7+7fYton+IPhNdTiJH
/CeJPIG8dztmrnkN8VmZxzi1XpNrVPClwThwwu8Dak5y8AHn/eYsdNHmeEJf
1x1n29PQZzlu4WAmdWWb/eGPWv8T8VVZ1Fvt9ltq7Ur7wCadNU3tl1xnktte
S6JOxYf/m3XY9XZTu2UhtxKP5PS3tP6HWvum+Lgi4uTOPN751C1dNTalCF+9
qj3/lUS+Vzf51DrlXf6JdfqBdcz4+SRyJXl4v9d97LUfeg5vjgv+9q5twj5v
ea+PvB67/NN2HGzb3mF+ye0PPLfZ+yErdUmr32vcZ6XfIWkR539qOd+zL+z3
mZ9YhvftL+eSeH/Sb7IsyHTVcnNOyXe67HlP+C1wxe8MagLqgdl5vKF4S+HX
y9MOX15xUxw85Vg4mkfueNE12hLb7lXvx15w6g1i5Yj7tKuLmMdbhzfpWuMP
75KlxuqvFZHHe+aBT2uMjYwd8Xww8qgxnXPwGWTvZKwBe8CSlcYT3hYb/L4g
1lcbc3hn8t5sE9+YhQzkSfat91n4WrOxtcL4gG83piEHOHxvEW+HNVnEx0bH
CLi43fEF3jMH/Cc/8E4hX5xLI0cwfjGNnMI4mLXNODChiPn1ftvtNQZed17I
/E494PuV3/m1lnu95fxKEe0Bmn8mj/8OZ8Xb88C+GudNcg+4hi6pjdAlcUw+
IBc8kAeWkxPwi33WTW0eOLpE4y9kkTuqfGajZXg7C71Qh47yvuwJLt/v/16/
zsJP8BfsM9F4wtt9mmvEqW4jR00paqyhaq/NQp/k3j2uG4kz6ljwCv/slYft
aq3Xi9Y5uud9ONe2Ome7POzYWaE9ZuSBh7/Kws68G2fahrw/sS01BTUW8bEu
i32pF1rzeC+3iM/MowYZI74+izXUI8dvwu/VPgMs7J6HXXvwrs/CL8FC/oXU
+O5d7AfUBcPzuAO+OTKPe+JHkz1/CPiVh58Tc09mUSecFR+Yh83wF+ZO8fxy
TUz9tsp5AX30sz3I4S3Oew3OCVNtL/6PTfT/h/8Bor+oIg==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.78], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.65], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.5], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                    Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]], 
                    
                    PointBox[{{4.905308194867242, 2.630836391598927}, {
                    0.20100883034436162`, 0.02382136569576569}, {
                    1.0719666600928879`, -1.250632626872198}, {
                    3.0527398070698992`, 
                    0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                    0.3149621009629985, 
                    1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                    2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}}, {{}, {}}}}, {
                   FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                    AxesLabel -> {None, None}, 
                    FrameLabel -> {{None, None}, {None, None}}, 
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    AxesLabel -> {None, None}, DisplayFunction :> Identity, 
                    Frame -> True, FrameLabel -> {{None, None}, {None, None}},
                     FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "GridLinesInFront" -> True}, 
                    PlotRange -> {{-3, 3}, {-3, 3}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RealNVP\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["10000", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
           "SummaryPanel"], 
          ButtonBox[
           DynamicBox[
            ToBoxes[
             If[
              
              Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
               "Local"], 
              Style["This object cannot be used as input.", "SummaryEmbed"], 
              BoxForm`EmbedSummaryLabel[LearnedDistribution, 4371048, 
               Dynamic[Typeset`embedState$$]]], StandardForm]], 
           ButtonFunction :> 
           BoxForm`EmbedSummaryInterpretation[
            LearnedDistribution, 
             8813937620921881760724967665765432050373222368601455234304, 
             EvaluationBox[], 
             Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
           "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
           Dynamic[
             
             And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
              "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
           Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
         "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("LearnedDistribution[\[Ellipsis]]"& )],
   False,
   BoxID -> 8813937620921881760724967665765432050373222368601455234304,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "]"}]], "Output",
 CellChangeTimes->{{3.77281590584874*^9, 3.7728159140697837`*^9}},
 CellLabel->
  "Out[264]=",ExpressionUUID->"9ca9ef6d-7a4a-4047-bd5d-70e1a5d9afea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{"PDF", "[", 
    RowBox[{"ld", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellLabel->
  "In[269]:=",ExpressionUUID->"7c3507ef-4f52-429c-be0c-f85529b99a53"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.7728163186022325`*^9},
 CellLabel->
  "Out[269]=",ExpressionUUID->"7e82f26f-2e59-4ee5-9279-794eb3b49289"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1038, 988},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
Magnification:>1.25 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 186, 3, 67, "Subsection",ExpressionUUID->"87337af6-f5dc-4bff-8981-81ba89099865"],
Cell[CellGroupData[{
Cell[791, 29, 828, 22, 56, "Input",ExpressionUUID->"82dfa91b-7333-4bfb-8cc5-f642e388cf04"],
Cell[1622, 53, 1827, 37, 149, "Output",ExpressionUUID->"b1b4dff8-3b3f-4c29-95c4-22dc579ec317"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3486, 95, 396, 9, 35, "Input",ExpressionUUID->"80295e3c-af49-42a2-89ee-bb33f8e0861f"],
Cell[3885, 106, 3542, 77, 299, "Output",ExpressionUUID->"cb27ec8e-7cbc-4935-a341-393451e89cab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7464, 188, 563, 12, 56, "Input",ExpressionUUID->"b9830594-90f4-4367-a6ae-0e9eb3bc2115"],
Cell[8030, 202, 383, 8, 46, "Output",ExpressionUUID->"f156bf38-9487-4067-a46f-0b0f518fb4cb"]
}, Open  ]],
Cell[8428, 213, 199, 5, 35, "Input",ExpressionUUID->"6cd38048-a909-42da-8264-0b92ad0ed2ad"],
Cell[8630, 220, 233, 6, 35, "Input",ExpressionUUID->"130c6805-872a-4ed3-90c1-0cbac929fba8"],
Cell[CellGroupData[{
Cell[8888, 230, 496, 12, 49, "Input",ExpressionUUID->"0ec16479-bf26-475d-907d-22272c67b717"],
Cell[9387, 244, 11649, 210, 297, "Output",ExpressionUUID->"565cd58f-21c6-4ba0-8806-7e5cda5aab3b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21073, 459, 454, 11, 49, "Input",ExpressionUUID->"44bdc431-a7bb-47cb-99b8-c5d824b68e3d"],
Cell[21530, 472, 17126, 300, 325, "Output",ExpressionUUID->"e3dd7b3f-9539-45f4-98e6-9790e25935d6"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[38705, 778, 211, 4, 46, "Subsection",ExpressionUUID->"5e309b92-9483-4458-b46a-7a906d394649"],
Cell[CellGroupData[{
Cell[38941, 786, 2469, 61, 212, "Input",ExpressionUUID->"99d2366b-03db-44d4-9dcb-abca59e5308c"],
Cell[41413, 849, 202966, 3347, 427, "Output",ExpressionUUID->"95292b8a-d0d2-4f34-85d8-652123babf13"]
}, Open  ]],
Cell[244394, 4199, 1455, 43, 92, "Input",ExpressionUUID->"d6ef9274-ddef-4c5d-80f4-c039dbdf6b8a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245886, 4247, 181, 3, 67, "Subsection",ExpressionUUID->"02859dcc-83f7-468f-bc02-b8061d7359b6"],
Cell[CellGroupData[{
Cell[246092, 4254, 1192, 22, 84, "Input",ExpressionUUID->"c31d5cb8-3edc-4b5b-8d0a-7575a5198536"],
Cell[247287, 4278, 1351313, 25543, 86, "Output",ExpressionUUID->"66865cd8-df89-4960-b728-8f0d351d30ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1598637, 29826, 349, 7, 35, "Input",ExpressionUUID->"e141c67f-00d0-4e4a-9123-6ea44749aedb"],
Cell[1598989, 29835, 105827, 1755, 402, "Output",ExpressionUUID->"71a05f65-309c-4833-a601-3b4577176481"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1704853, 31595, 788, 22, 60, "Input",ExpressionUUID->"6680d8c5-1215-4e66-a79b-aed9fc20309f"],
Cell[1705644, 31619, 211, 4, 40, "Output",ExpressionUUID->"c08b4f3b-583e-421b-8342-8f2eebe4b0a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1705892, 31628, 261, 6, 35, "Input",ExpressionUUID->"2e867fff-85d9-4503-80e9-b7ff53759bdc"],
Cell[1706156, 31636, 1364955, 23412, 351, "Output",ExpressionUUID->"fe4fa28a-dcdc-4939-86df-393e14b4a6ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3071148, 55053, 184, 4, 35, "Input",ExpressionUUID->"c9f4a6be-4b46-4649-8845-2fc7b8ae4a10"],
Cell[3071335, 55059, 77405, 1376, 122, "Output",ExpressionUUID->"9ca9ef6d-7a4a-4047-bd5d-70e1a5d9afea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3148777, 56440, 500, 15, 35, "Input",ExpressionUUID->"7c3507ef-4f52-429c-be0c-f85529b99a53"],
Cell[3149280, 56457, 162, 3, 40, "Output",ExpressionUUID->"7e82f26f-2e59-4ee5-9279-794eb3b49289"]
}, Open  ]]
}, Open  ]]
}
]
*)

