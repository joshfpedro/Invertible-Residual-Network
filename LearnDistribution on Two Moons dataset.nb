(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3070227,      55250]
NotebookOptionsPosition[   3065276,      55154]
NotebookOutlinePosition[   3065648,      55170]
CellTagsIndexPosition[   3065605,      55167]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Examples using change of variables", "Subsection",
 CellChangeTimes->{{3.7728146645008173`*^9, 
  3.7728146870834603`*^9}},ExpressionUUID->"87337af6-f5dc-4bff-8981-\
81ba89099865"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubsuperscriptBox["\[Integral]", "0", "t"], 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", "x"}]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], ",", 
     RowBox[{
      SubsuperscriptBox["\[Integral]", "0", "t"], 
      RowBox[{"2", "y", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "2"]}]], 
       RowBox[{"\[DifferentialD]", "y"}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.77276301030916*^9, 3.7727630317019353`*^9}, {
  3.7727638171526546`*^9, 3.7727638383815727`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"82dfa91b-7333-4bfb-8cc5-f642e388cf04"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`t$$ = 0., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`t$$], 0, 10}}, Typeset`size$$ = {86., {4., 13.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`t$18082$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`t$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$18082$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> {
        Integrate[E^(-$CellContext`x), {$CellContext`x, 0, $CellContext`t$$}], 
        Integrate[
        2 $CellContext`y 
         E^(-$CellContext`y^2), {$CellContext`y, 0, $CellContext`t$$}]}, 
      "Specifications" :> {{$CellContext`t$$, 0, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{379., {71., 80.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.7727630332172346`*^9, 3.7727638387605643`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"b1b4dff8-3b3f-4c29-95c4-22dc579ec317"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "x"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7727630377511063`*^9, 3.7727630941633277`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"80295e3c-af49-42a2-89ee-bb33f8e0861f"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwVy39cy3kcwPH1U2qq9aWLtFbnIU26kEc3D7w/Cpd+oR9X8nNLPyTRzi76
bpOuZFwMpZl+d3G49eux0K+hH5LaXJai5kq1YmRldlrSzv3xejz/ejkxjgRH
GxIIhMBv/W8+l2G68gC+wbnAq12vV0OLnBIQTtkJEny3P1OjBv0jyW8UykFY
Hk2qezuqhvwHWY4mlBPwizszbEyqhoT1rMOfHXmwrdE1yCFPDfIvcdkTjldh
4aY6IZOmhjn9Qy7jjjchKEJOr0n+AMVPCpPeOdZCRYjTIk/DcSiv4PUnuD+B
euYl7+vzVRALXVffM+XQqPdPp+WPQaLSdVhc/hJ6zW7RViYowdwp3WXgx0FI
V6fPBm8ZhvPWHdTi/cNALLqcQEh+DYz+0PtGnaOATlddexg1AEmt6YwjLirI
uRtHTPJRQNVRYojd1nGgBOSEfyh6CcX4IZVH+AT0CCZrooi9kFY4s+PT+0kY
jZRzlAPdQJAPooYUDSTZNXNCJ5/B0mMxx0OpWnjdhwXsInbBiDb3Z4vGf0Fi
SuuKHJOBnzKecylpCjrzY1fltHVA0Ah/OZk8DcmLAwucTNpB1cxIfSz6AhVr
8txFVY/AndTj4LPvK9j/Whu/Mb4FzEFLV2hmobzha2Iltwl+Go/87BxGQG9G
yQvsCh7Ai6YDBpFuBmiLxV/PT7xrhJozLXspWgPE/V4/34tSDzEmrEGZzBB9
8pOrZ6LuQRQTryEKjVD2yYjtdrZ34IfY5bIAujGi/nnb691cMTy1cbNg0UyQ
5+NakY1ZNdSXp11zMzJFvj0VKbbhlYAbULd3vjJFnvbEs4v2icBckeKbKJ6D
3l7Y3zfNvAXK607ZhWwzNEh96ndk5gZkL1toXBs2F1WV7B+RXyoDvjCmjU4x
R4Z5Sin7bClEZu+REcfMUbAguNWwoRimNpXpCiUWyMx6Z3f3+0IYVnofb8ok
otBe36zQiTwoWb/SXkqfh0Ty5985GwtBlMEixa6wRLzkQOGrrFzIDIvyN9Ja
opnmZNrInhxYoyi+mSm1QjWZ905SaJdB4HpNJPW3RtanGs5J4i/CyQdZAv9a
a9TIdfTwCLwAgfZhZU+WkJCwum5eqfvvsDGxbReJR0JrOXbMoiweFC5mLOnU
ktBRRejmkunTsKT5xpWgXTaIQuKtYT1NB/6KJuoziQ0iV3rn2Q6lQYzGuKud
iqHWVquhiNlUYFR9pPAuYGhVRIdLopQLCWkhM34XMUSef0Dz5j4XWCHiXuJl
DHHurys/WM2FM1rWef4VDK0u8Blj53KhnKb7kpuPIT9c76Cic0H3UN9z/TaG
guDm7lefOcB/RsxqacNQkf5M4IJlHBCWHo473Y6hOi+d+VZ7DpQek/n4dmDo
1Dk8Js2SA3ds+dMdMgyJ7/aNm2jZoIjE4uTPMWRCWK/b1sQGl+GFPkPDGLLv
Hh0Y38MGD3EK+Q8lhvh9ExEpO9iwNqNfFz327d+yaCtxMxsCXPIr36owdFix
OgO5sYF5iEKenMTQP5UCV9U0Dux1p3TVGgyRVovsSj7gkDFvqPuYFkNhKdJD
+4ZwEFSUnpuawtDHvfWeqnYcSlKNY+umMWQp+LvsbiMOt3dEe7NnMPSiMzXp
bBUOYudHDhtmMUSnM3MYZThINEt1ej2GOh4GWKGrOPwHSVJHUg==
       "]]},
     Annotation[#, "Charting`Private`Tag$4453#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772763052165996*^9, 3.772763094641073*^9}},
 CellLabel->"Out[6]=",ExpressionUUID->"cb27ec8e-7cbc-4935-a341-393451e89cab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "0", "t"], 
  RowBox[{"2", "y", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox["y", "2"]}]], 
   RowBox[{"\[DifferentialD]", "y"}]}]}]], "Input",
 CellChangeTimes->{{3.7727631775247774`*^9, 3.7727631807807417`*^9}, 
   3.7727634742368455`*^9, {3.772763555728012*^9, 3.77276355716121*^9}, {
   3.7727636171999474`*^9, 3.772763658529688*^9}, {3.772763694478862*^9, 
   3.772763697151827*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"b9830594-90f4-4367-a6ae-0e9eb3bc2115"],

Cell[BoxData[
 RowBox[{"1", "-", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    SuperscriptBox["t", "2"]}]]}]], "Output",
 CellChangeTimes->{
  3.772763181367882*^9, 3.7727634761745453`*^9, 3.7727635575411882`*^9, {
   3.7727636349619865`*^9, 3.7727636612031813`*^9}, 3.7727636977764144`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"f156bf38-9487-4067-a46f-0b0f518fb4cb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["y", "2"], "=", "x"}]], "Input",
 CellChangeTimes->{{3.772763351850397*^9, 
  3.772763353813275*^9}},ExpressionUUID->"6cd38048-a909-42da-8264-\
0b92ad0ed2ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "y", " ", 
   RowBox[{"dy", "/", "dx"}]}], "=", "1"}]], "Input",
 CellChangeTimes->{{3.7727633555835447`*^9, 
  3.7727633828547544`*^9}},ExpressionUUID->"130c6805-872a-4ed3-90c1-\
0cbac929fba8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"1", "-", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      SuperscriptBox["t", "2"]}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.772763439363134*^9, 3.772763462479261*^9}, {
  3.772763708989083*^9, 3.772763726427287*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"0ec16479-bf26-475d-907d-22272c67b717"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwd1nk0VV0UAPBn5vF41NcgoUimipLStLdGhCY0SZKpSSWikoSojKGIylhS
kmSIZM4YIaLQpGR8t8w8w3du75+7fuuse/c+e+9z1ltgdXq3DS+DwRjkYTDo
5313K0FN60sbGPTPQ2h9yQd5w73y+4HBWHcrMad4w3Rpnpe8/DHizeOGOe0b
xEMyU5nNjsDwGKg4pTm84X5BgJyA/AVisWyJHD5Qp6wDp+2uELfn364Xhzbx
B1MTTZ7AkL96UE5zFig+EtEe514jXs68oiULJ9c7nxqRuwEMywTdF9kK8LLh
W8LgJn8Sb8n9b8PKMH7CsPWvXRAwCpLzy+uWQgxP642RLbeAMeeJ3PKHy2Fz
9a1Fw00h5H39YDMNbeiM2FY4eCwMGBrsE8bMNeBvPWk+wL0NjBgv+VkrNsAH
rn3YH7m7wODPeeX5ahOcL5PVoF5EAsNkCqU2bQXp0Iaqvk33gLH6qRrPkB5Y
qSJfj100MNQ3sQZqjIGXe/H9oFsMMJJ7jVy5O6Hhm+n8wS2xwNg9z2JB/G5w
TRbN7m+KA4aFgsrJJWZgENIh2B8TD4w7iQ+Y7H0g41po8vdYAjCYx+sNBQ9A
wSaXPxT3ITCECxZmLLEAoZYfi/vkkoBhqi9NvTwKzQVvnHs7iQ8fGXwxYA1P
HkUU97x4Agz/kjMb1tuCsaPx4e5NycCQfuLzvM8e7ojk3Plt9xwYHWuf1hQ7
QLqLgeO5OanAcPd51qZ8Bu51r5o74JYKHkUzIl4OngGHWim7/i0vgLG/QIMb
6QhS98p5/zalke8JlLcvOA9c8cykM+teAqOTqV4o4QI/r8bv/BNDXLqg1IXX
FTLt3B9Qx9LBY37N3FPDF+DACq01HG4GeFiEpVvMcYfYyuizPXLZgKfVXQtj
vWAwIkP1q382eAw5M+4ZesNWu6r2+rFsKMixc9o67g29fCOmOR9yAN+cWips
4QOr1xuvueGbCwW5oikq225A7fMJ3sVUPhRwqlZpRgeBFIhYsJYWACPBnWW2
NhjWKoWt8bUuAMuFtr+dHgdD4GDSwMW6AvgWeHaywecWaN1qtLF6WgiWwoWe
kiahcKVS3UDzcDFYxtfnszTC4fGLLKWnt4lNjcMSX4RDfcRGvkXviqHARbc2
UisCFO325c7RKQGPjHZDvw13oZLPeyljxlso4Mt+7m0VBbPWt0i9Ly0FS9tQ
o73d0ZDy/EbLyaWVEBPH2Bk6ngDdUt3+BkcqwWOZ26xnBg9h8XmDDcphlZAq
5pViEvUQYtaJxraPVcK3/4pUDDc8gpAKf9sDb6vA8p01u+FmIpxvD/q7zbwa
CqTLlvFveALRolVekltqIcZHb+F+gVTYsP6SuYdFLeDxtszhlanQ6qC2knKp
BfmrX2U/2qbCnHq/jndPakG4qSVrf0Uq3Iow1L/OroOd9qPKp2+9AK9FNeLT
LXXAfqay6umSl2AHdXd7HT9AwZkbanK3M4ERN5zT4vcBPEL+wtV3mRDBL9Na
mUDWY626ZfizoLzCVjbp4wdQvmy0ieGUBcomE3E2axqgednPirNmr6DTfnHy
F55GYDdceNe4KAeOh1zOqw3+CPJr93dt7XsDDr9U2tNTPkF5W/fnIpFiYC7w
Xvx19TdwdZNuEeKthkB2lWqsZTskrx2NPv3wA1i1mOTzveuA1FcZbLELn+Ds
W2+r04u7oX+OHp/tsq/w4ozYnjn6fdAqVOHxSukHxF460a2x9w+Yc1XnYvZP
8Iye2DXY+xe0BN2pWd87gPHhG+ZeHAALT7W+Pa87wbsrL/bi1QFgXRfsLy3q
BBHGfV6d6wPwcfXin1qVnSC1ZH9Jxu0BuHRpOojnUycs8q3b9jx1AO6sfChg
MdwJBmuLjOM6BsCuTsNFQaMLQuPjza/vHoScU9vHvkd3gZKTrauJ6hBkX7jW
qX+mG5as+bonWmMIRO1nzZU83w1ajH3LurWH4POZxMkPl7pho79+x5VNQ6Cn
fq7D0LcbLBLUTZ6aD4GkEXen6INuuNPQv4w3aAhUd9XZvK7sBoGVV34/HxgC
jV92/H/ke+DnULiZ6JthCAg3OksV9ECc7opzbcXD8Ou61Eap0h44HFAT9Lxy
GHLDqaMaVT3wWVGgYk/zMLDdq+IsGnugbo/j2nsDwySv0M1eXT2Q98JQfonq
COTXardx2L0Qfoqn2zh8BHpl25kW5r1gkn1PcMGDEbiW/o3LsewFKYHVCgMJ
I3D+kcvVSza9EHjPwTw8bQTOJZzf4+vQC95VLTVfq0cgi0d/93GPXjijkvny
DP8onA1of3M4vhcMfh2/HHJ2FBK+ab6Z09ELWy8rJG92HQUDW51eVncvbPyv
9fOwO1mf9l8w3dcLa7YYrT7oPwqBO2weNw71gurDZQMKiaOgyqttv0egD0Rt
Bu0zWkdhu1tzXqhCH7z7edmkedsYvLF0P7P6UB+Uu2l73TQeg/YB+ak0yz4o
mUm9WGc6BivKD39Rse6D3M2WErFWYzCvwDFG7EQfJCdsrDx2eQxGnu85/ci1
DwKshZCbNgYF5YxDS0L7wPhnsJqs7DgIB3/LuvuWxFP72WCuOA7dnZT46fI+
2H5ulXuU6jjoCqW66Fb1gR7vl9o5q8ZBef9un7baPtgor3Z+xs5xcH8SUtvf
0gcrzd8WCHuOwx7fd62hf/tApmHMdODXOHh9Nu5/I82ByHlG05q94/ABw+10
5nNg7tGYx2f6x6HWX3xZmhwHZvVv5fZNjUNdX0hulCIH2OywmM7ZXNjRrMTc
sZQDfIZLe9r0uZBsZKaxWpcD3cVWHuXPuNCvkx6z0IYDcreajwemc2H+V/Wh
i3YcMLEwNjV5zYWcSXGH2mMcyBvVUf1WzoVfb6SbHB04ELJEsmGknQu91y6+
u+3CgbXh+YsXS0/A2gL3c2Y3OOB/XOb9NZ8JWJl9T6DhCQcKV4Vkbw+YgJxb
l7MakzkwzC+cIBk2AWbaBa0NKRywjB5wvR87AeMdUn5VaRzQaqhcmJE7ARHS
u3MiczjQtv7C+Z/95H3pNZeKKjiwVPLj/E2HJ2Ew3kJKr4MDHQEdnrdtJmG5
eE7J198cuM8c+f37BPEuUQ/nLg6I8c9J83edBOWdU3Oiesn+h/dv/XhrEu4K
Twm97+fAw9Y2h2Mlk2A2uf58yxQHZB7/yg9SmYJpHsam0P8oaFAcVvyxbAp2
pvfdo2ZR4BcreFNLewo+XA3SMZhDwXjkYpNPG6cgZHGn7rg0Bc0BxzoXmk+B
/Wev/C3yFISe62NnBk7BLKVPlJ8qBUwYOtI6MAVNp4a439ZT4KqrLJw5PgXD
f3gfLgAKOjYdTAnimYYDvLGelkhBkV7h+EaJaeD3Lmtv3kjBxd0BoUmq0+A0
PnY+fRsFPTaL3p4/Mg0HZ7IfzdlFwTt/U2XJ99PQJjjIG29FwZqg6zXdjdNw
TWhifspRCh7feu1U0joNp/mCk7OsKfC+s6DQpXsaMtSb1UptKZCtHVaneBm4
aR+3o/Y4BR8/Fb01lWVghtDKngeOFGzrOzCy0JSBM3xEc1SuUvBgpteHK/sY
+FtWrozXk4LBtU+ftx5k4Lpnk/6fiWNucu3uWDHw5ZdL+j7epF6L7zWLnGHg
93W1L2p8KUi2asv+c5OBDzZ33VcMpIDdfNgtr4CBU3KNftRdCmynfffNK2Gg
/bzclLhICnKVUrVcyxiYG1ydYxJFwTFnRp9mDQN3iMiHZdwj9ZKKPfSwhYHX
tYXPHY+mwMnoxwb/YQY2D0TPjUsg/Smy5jmgzoN80+eu7k6h4I/uZ+nLy3iQ
5TvzfguxUOEOrZjlPDjj7d6eo88p0M5fY9exmgfzJFoUHFMpCHvNrnbcwoPt
L5YuuJZGwY703Ag/Cx5cGvxQ3SeTgtKHMzXeBPOgkJPALu4bCr4o3tT/FsqD
J9+nPD6ZR8FQ/LQVXzgP9ppU7GojVozrvq1/nwczN/dG5eZT4PmggNuYxIOP
SznK5wop2BB+soxTxINd30R7CkooyLheYiE/xIO1uvoivypJPw2q5viO8qB/
mKSEQRUFkWL19X1cHnQcumOXQuwR/HXra15efNHVNtP5HQWGEeNLzdi8uO3U
erfxagp+JGpM+6nx4hY5h/0dtRSIl92LHjnCi3+3G3brfaSA50b8fgsbXuzN
XKQYSTxo8GTGW3tefH8utaab+FNNlm/IaV5cd8jows0mChI+1p9ecpkX1RqC
1xU3k/nrEMajEbxoJiezal4L6aeA87eaGl50L12TcPwrBdJyFU3cOl78qh+t
m0hcs3r+e+VGsh542LWdWPvk2zeeLbzYGbc3/cA3CgQ//Bel3cmLwUk55zd/
p+BhTKbpAx4+LLUKSBRop+Dn2tHKU1p8qKI1/HBjBwURpoZFkav4cCSw9MY5
YsPTMdlla/jw5vZXcxKI0+P0Hi/Q5cMSD+Ya/t/kPIjcvdZoxIeds4MiCogV
m3RwvR0f5gnLa6l2UXDU8VKGWCQf3puhta6kh+S3/EuGyn0+TDdMSu0mZvZj
5tYYPpRdK/WD3UtB6lnBLI9HfGh01fKyOfHEmVuvBtP4MD5AJ/YP8Z3Tia9b
q/hwXq3zsBiHgoqTHwqTJ/lQLz3SY84fCu6paxdVMPgxgff1nlXEZ3ojijr4
+NGxqYUyJZ510qJYnsmPxfuueIcQW53oKgmbxY8v5jUqi/wl8Y5Nl7kt48ey
JIfHvcTL7NRqDI/wo4f1zMLAATKfx+ROP7Pmx0h/2eNJxP4nZ7DF7fmxRdPm
SzFx11nurvcO/MgolVcdJY53q2rc5caPN3vd91kMUjA75ESbWTg/quQ5WC4Y
IvMfdtg9K5Ifb3M2dK4mdgrfIzfnAT9KCXBwJ3HdvbVHPiXwo+apDbbuxH6J
or8OpvHjypPfbzQTT+c+7bWs5kfOwNbL3sMUpORHBxTWkv18HdG5S2xeFLp0
YQM/nuiKffeMOLvs0pn2z/z4ffss54/E5+q3D9p08uOhuqbPi0Yo+P27h3uc
TwADqM41b4jfS6mLOusIYPZysw21o+R8nTrVFbVOAPeala/8SpxSllJWBAI4
LqrL5hAHuml6s7cKYEys1GnRMTI/HdqTT3cLYOCa3E+biSuzdakfJwSwcrNZ
YBrxmple1SKnBXDWYe/qfOInDiVPNRwFMO1SWf874hsK2+zdXQVwydCWPx3E
egGG3+deE0A4q5g7d5yCt5Z7P+x8IICj66/kXSTWeh3xwiVWAKv2yjj5ECf8
9znoQYIATpaHSIUQe1eaG/Y+EcB1Oi+ZScQbtaze+mYJoL2BXm8jcYHQqay8
WgF8lDg3Qo1LwesUzyh1PkG0juuKLiMWNDSVDhcURJO3+VfqiHd1Lb7LwxRE
iYVT+i3EvxWq73xkC2It75EHHOIZd2eHeMgK4vekk9tnTlBwwiv5eoOOIC4Y
ZbYcJM6UvyIE6wXRizvX2ZqYJ2+XTxIKYt89xYmTxOGjw17u2wQxzL2s7jJx
8SndK8qmgtjx+HT0A+J5+z46u50RxGcxb3+2EtsOPR7sOCeISmcXWP4kfhFy
6dwuF0EUSi6p7CHeVi1/VsldEP1WnHAYJz638cTJWj9BXLmD6p81SUGVOuOo
YqIgNu7OZRkRX+JR3fmujcQXM7FJIe7YLNqs9F0Qg9ZF970k3nm99/DVn4Ko
ye99LJtYUeL5ae0eko/O1XUlxO9ktIJiRgXRtExi9ydi2dUbapxmCOGli+K7
eKYouH5Jzuz9LCEUb3kgK0jcn8f4oiIthAeHjL8zicu2FPd9kRfCqEfHts4k
PrNHj6W/VAh74qduKREXOew2nK8vhJW+5br6xOppKxpcDIVwQuP5CSPiO0Mz
zet3COHTCAn/XcQn3JpO+JoJYapfYOp+4pk3zf3+HhXCGe/Sbh4jtn1oW/nW
XQgFva+F+RIzWy/qOaQL4SaHPe5viLVdklhBWUJ4gHHWtoD4iFRz/fMcIVzu
s0avmPiV3spDfwuEcDyff6yc/l4GddapWgi1uU3sBuLCQOuoix1CyB+2XrGL
uFcl1DKqSwj17/Yl9xDPeVu4KLdXCCX2i2lwiB24sqmT/UK4O6l40QCxjP2n
Eo9pUo8tJrUTU/T/IWOOzxxhdD4aqCYxTea91e1l4jxh1Ny511KS+L3LU9dy
WWFcLrAueAaxUoowH3ORMH7Xv/p9NvEH6eLZAZrCyLgttV2eeOngKt1QA2EM
mlW9UYP416MFYdFuwjhbpIHfiLjX+/sYn4cwRnpofjAm7reKPWzvJYz5dxXu
7yRmyC1Q07wpjBlLOAomxNLh8kVF4cJ48+6KqQPEO33l/vxKE8b9E3/67Ij3
2nw1NcgURuN8tYvHiC02Rb9OyRbGipRQ3hPEJ6ZlfV0KhHGlm7iwA7GPi6ys
SI0wGvnFd5wjzrWbb6jeJYw6Wclj7sTFW9peBPeSeszOMfQgrlS4P3uIEsYb
AxfuXSVu+irT/mZYGO+KaCz3pvPfK3NxB78IrjhlsOoGsbLevMeOciI43+dx
SghxmPJc/mxTEYyYfcgzntjcQimxfZ8IrotXOZZArBi2wkDcXAQ1kuuNHhKn
TxsFH7USwe1G1exE4oaPnjLip0XwzpbOy0+IZ1zr1Tp6XQR3q78YTSX+nDPW
FOAngrJLHPJfEMf9Ebz0KlAEw5/t8E4jXm6+oJB1WwSFe4KF04l3rzAzehUr
gsZRV7iZxCHf821Yr0Uw8ZNfYC7xgdnVwqvzRDBvlbPOG+KFRp+fWhWKoM2y
oh+0014N/s0qE8Go0Nsa+cT1QSruVg0iWDnLN7uQWHJD6J2sPhE8eSzeq5Q4
ONK27Ig8E3+syJZ4T+xy3vOcmwITq6vV/Ghb7H4gF67ExOdOzgK1xOrMjy7v
1Jmo5hQxTLviwhblVTpMfP/OpqqemHe/4g2x3UwMvr1T9yNxlxauXGzKxDe/
rZ/SrmWbf9fdx0SnCZeZTcTR5aE6LhZMjEiIb6e9bjVf9/fjTGw033n+E7Hz
7B8GWV5M1BHpcWil+zMwOVznw8SWP0MVtDe/nxvfe4OJ9tsXKrYRS/nu4i4I
ZqKr9e9G2inDBU/97zFx49UDy74SdzZGi1llMFHX+Nbr73Q9ww7ViP1m4l3d
hi0dxDIvmfNOdDOxOckwkPbXuiy7ij4mWn7m+UjbWkKKx2eQidOHVI/+Jna4
WbpimkcUzR2SnDqJPT2W3f0rI4rtlRPO3XR+0a2/dsiLYvPvBS9pC+XdWJ6i
IIofO2Mo2v7c9qrjqqK4e9tL2x7iO+cjptpXiaKZ7V6jXuKkkzzWH3eLourb
6ck+4pN+KalaZqI4HemlyaHP85ODkyH7RTFw50Vr2mm/M+7ssBTFFbNLy2nn
Wh2vKD8lio1OUzcpuv77Pix9fV0Uj5kuHPlDPLr54Vh0niiOR4q5DBC7vY72
KikUxSd9QndpM5ZHsrpKRPFs95Mc2kJyQQuWV4ni6PaeCdqzxlz1S5pE8bzC
qcuDxCueGd7t/COKn0+rnh4izlTYpsAaFMVvebz+tNdE6j7THBHF4CtBj2lv
9NUuvDgpip7bKr7R3nlEvkuMKYb1avVGw3R9/xtcrakghvNvNUqP0OfZj1Nk
qiSGn8r0V9B25u0yvKgihkZOl7fTdqPaLIuXieHJrEWXaPtVlF03XSeGhbv8
mmg/vhzVfMFUDB8c1bw2Stz+a6Nrka8YfoxryBqj84muiVP1E8Mn6dWVtGP2
HagOCRTDkLSgNtoWVWcXHr0thtENZ3jH6fOdGvOOL14MLwu/0qddf2lKfkue
GF6jmmpoa668uf1ZIYk3O+EL7WDOf+f/eyuGFwU2cmgbH1lS9atKDLnaQ2Jc
+j7bau7s80kMa99u1aNdJJlTUTZI1scZWbQXVG0ZXDYqhvF7FEpoe3jXyUZw
xXCEI1tHe8NI5zl7Xhaujovvpp3TOltWhM3CE0858ybo+Uh0djRQYyFzyS8X
2pJHeO6nLWVht/87T9pnpAPKpJezMMEzNID20oAEmZ7VLJwVUxhH+4njh1K/
rSx8eeVxFe249Zrzqo+wUCW+d/Ykna8x04trzcJwDQt52j8Ot3er2LMwVeaV
Mm0Fz9s5Pg4s/MNS0qGdUDq2Hy+x8LfM3320H+4oingZxsLkpa5htEstoxg/
wlmoKOIfRbvjrJM9O4qFOn/84mgrhSmtPhXLwsDXO1NpP2q+2aSUwkKW2GAl
7cdH9syKLGOhvWDNBO1yR3X38koWXn2fwztF3wdeAh3D1SzE0jvCtJUfZWXs
aWDhowGZmbSTuueZsr6zUGKlnSrtJ+d+hnqMs7BYcq4J7UrvN9yUSRZuWsXa
T7v79p2jbQxxTFw+cIi22iu9FWuExNF862072skTyfUDM8RRk6l9kfaza86S
dkvEEYWY92n3rjvkeU1DHJ9unxNLW31w80D8CnEMl5n38F98q5mN33TEsf/r
VDLtx/Ay4sBWcbSBjbm0E8b+yBkfFkeF0bpm2j9Tm4NPWonjhR7tVtoK9gU8
fjbi6Lo65CvtuI9B7WUnxPGNnnoH7eiXSxN1XcXx2My//bQjT51cuvKWOMpI
fGBO0/OuaBK9J0wcdx1LYtGe27qW7Rguji4JLmzaEQai/Sn3xbFx1sR/tG8v
fpKh/EQc/+xIlKcd/P33OplicYSLd7Vo10a8f7amlNSjfUSbtsTOLNn9FeIY
5bpDh3Zgng/jzntxPOPUvZ62f9SiEolWcVyXWbeVtq/p0e18Q+L4ZdBpL+24
Ha3mNqPiuEf97n7aufqmDmVccbRIzDxIu3/9tlt+vBKYmN12mLa5klrTDLYE
qrp9saO9fKTfSlFNAs2UX5+nbd/z81qnpgR+j1t9kfb9rx8fJ6+WwD3yMZdp
C5fncLS2SuCRVcu8aX+J8Ly45YgEuX8OBtOeGeB0X8ReAlNwVSht/au2BdUO
Eqj+mHGHdvoxA0EzNwl0rLKIon1zjVSIbbgEXu7e85B2wVL+DNUHEhg4nZRI
e2jhcBMnQQJzlf4m0bYU/TzfJU0CK+eapNBe2Rqb5FstgcsXns+knaDw+qfy
Zwk8FMXN/pfPiQa5yg4JlNbe+4b2uBvfdkEGG79jRDHtNPngTjNBNgpqXy2l
fbxExidRjI0J+7ZV0P4kql2oN5eN6kfO1vzr5/Mii7tybDTTaa6lrbdnx0TX
IjZ2Ky78QPtVpP0qv+VsFD5p3URb+cdVR3VgY6LkxpZ/86IS9ax6OxtPzy75
QtvZbez45f1sdDNd8YP27vd7lZfYsTF/scEv2ssWZv5qdWJj5DLJTtpizjPj
/T3ZWLM+uJt2qXTd/N77bDRm1XNoXykIiNiezcY4V+z/19/w/INqDWwM6BwZ
pN1x6q+sKEX2y1IZoR25WeFHt4gkTmv0jdI2mmf6sFJREicm9o3TLtscyOCY
SWLB+u0TtHUdyg5K3pDEjN/kuqLvz7czCxzyJXG+vdsU7WgZK8V3Q5KYmC4+
TfsH5X0oQFkKXUts/lmxOPGO8UEp1Ou4/88HRtMt2QFSuGFf4T8HLylSrc+T
wk615n++FNw+WT0ohd4lv//ZdoC/rkJ1Bt4z+/vP1vVcV5VDM1D96/A/W73o
l78RNAMV6PTp79WLBZSUzcC96RP/nDegNDY9PQPNZ0/98/95b+aq
       "]]},
     Annotation[#, "Charting`Private`Tag$17747#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7727634577707753`*^9, 3.7727634630936117`*^9}, {
  3.772763712378781*^9, 3.772763726921926*^9}},
 CellLabel->"Out[18]=",ExpressionUUID->"565cd58f-21c6-4ba0-8806-7e5cda5aab3b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"2", "y", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      SuperscriptBox["y", "2"]}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.772763524470544*^9, 3.7727635392300835`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"44bdc431-a7bb-47cb-99b8-c5d824b68e3d"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwdlnc81t/7x+097tEyQpEdKiXJuY7QMEMkSREZUWRH8kGUlajILFGokJKM
rGQTsrO3+6Ykm/jev98/7+vxfJzzPu/rvK7Xud5nj9VNQxsGOjq6Xtrj/2KS
nxXLAWsfpPv/MQxV/RDROS9yAabWchyNROxhq7o0UIQW17SsWYgi3pBUHiHM
TIsXvkjI1Ag/AEdVd6dlWuyjY32xJfQMfqzbPZ4TfgaijiIpRMFMYP05IjEr
nAm3/Cpm3AiF8KI+xYUqXAgM4m7P1UdqITvnwU9HuXpQib5q2yjQAxQSJVzL
sh58Oo0Y3U73gISHFpJ8XA+6DfKmTO498Pw454vR1XpQOKYRM9DUA9F14dfM
vjXA64oVMXe/XvAYffjnlHkT7LIUHmL/+RNSOBsCiZotkNDK2dLmPwC20Pps
5tYPKD6fxfC5eBjoUpeKfob9ALt+5xDl5mGIYxLsq0/7AWVvJbreDA1Dbd01
oczOHxAR25ZqxTwCkuc2Um2OtcOybMfdnXojMGUn8XaAvgNiq8RRTN8IOETf
KW2J6oQ/yK/Gb3YUGBZTB8syO+F6Q9oP+s1RiD9fS5dT2QnOd5wV3HjGoF6Q
rB6x0AnkxeQ8cfkxkHmdUXPGtAsO0tF/qbg5BjPFP1oqhbthUDPJqGZ2DG6M
S41+zO6B/UMMGS194zBk0cNWUdcD/937vtdqZhyMuu/LNY31QIixStbA+jgc
bZj0HufvBY5c/cI4/glgfJ9O2BHSC8F9Z7p5z09AnO8e5Hn5J0htpt5jaJyA
CjLfM2VCP4QdNOj4mj4JihG1pZoy/ZCccED4dd4kvGLxGjM42Q+9pvL33com
IXy1U97Btx+C3kakNnVPgsng4+r4qX74M2rv5MUxBZQswsJ6+QCQzXSd3tpP
AceeIInBo0NwzdHG0X3nNNQefyTvpzkEP/Z3p0+JTEOwabLSbsMhKJxadT8t
PQ0MUZ9PXbw+BMajjzubjk/D2uaMbVfSELgnRQb9vjIN1D7jjO8Mw8Cg8wVF
pk9D1opV7g3eYbhpav2q/t002G1z/swtOAzSP2af/82fhjHt0Frtw8Pw4RiD
AWf1NPQVlU7V2A6DSe5QnsH4NDTGSUiVNw7DwR3NXioiFAj9qHjgcs8wHFq5
FKwmQYHTLWrKm+O0+S8XjynKUaCK1fzM8a1hWOG7/WJQhQIlHlH2nw+MgPrp
J6l6JhR4d241M/fpCPSwKn96GEIBR2eWPP2XIxD5k+uiZQQFpMPJRb9yRuDv
YdQmHEOBV1/318vWjYCfZrrm1WQKJB+0omSsj8Br3tZXTB8pEElokH5xZRTW
7AWaPv6kQKHS7ny9G6NwT+jJ54IhCoxZ3IQNn1EQW3S/njZOAZV35HPnY0ch
qFQYq/ymwNQZ8zvczaOgN3LO9DI9Fba5ZLMW/6T5sun2gffMVIA4umi76VGg
W7FgmWWnwtOJtFdfmcbg4a/ssr0kKqgHzn73VhkDtaz84yF7qHAjC8wkzoxB
Z5lumdQ+KsS3PhprNxkDdQ4+70+SVJgTPrIqf2sMnPW25UXKUyG5xG/vRMYY
VFiJC6kcp0LdaMvbmE9jsJMgjBSACgscokpqVWPgHZnWxXuCCtoXarQTB8eg
tv6/+MhTVFhZ5HU33DEO64J+F8MMqCC622prS3QcXnbxq3cYUUFP4+ODdwfG
oTPr5Cy7CRXSo02T2XTHwdK8MOeQGRVaCrMkP5mNg1mbx09JcypsDG3kXbUb
hwL93Dk2CyoYyr+oKQ0cBw+5+K0HllTwM/lr4PhoHJ7ah3LLXKVC5h3NPr6U
cWAW8thfYE2F9rTYazVvx6FwZ7G93DUq0DVOz7kVjcP3V98bo2ypIPNXxWdv
7Tho+J2wHLCjggl/JHNLxzikRBcd2OlAhXd2B/ll/oyDVWXzey1HKnQ/DErr
3hwHriEFT00nKjAVdMoFc02A47pomswNKsgPSBYeop3jQ+er1f/R2IzZR31Y
YgJC3upaFt2kQrBsU1Pk4QkoZ2Nlu+pMhfdGwqbH1SdgM8tEfZnGfbddRqbP
TkDWcIGQpwsV2FK/OsZaTEDjZEn6CI0P1W1f1nCcgPOVPGPKt6hgMWf737z3
BKjsdhr3pXHoziLO5yET4CeZnf+GxvmI66nukwkguZdeqabxkI2FyHrqBOS2
Pp9vpDFXRG5WRu4EhEnc8CyjsdJHhsMmpRPQbWK8nkRjq5/nyhhpfeciOSHU
jsYcCcNOLj0ToOobmy9C4zyzG4KDExMgPKNW8o2Wnxn/er3OwgSw/7uVdZ7G
jL0h3kX0k4C5doZ30vb39tk2SUneSXDlk3M6QeNzF150PhGchPr0hgsJNH02
dsndY5SehNHoHRbDNP3SuosOuShNwhf6M8HbaKwTd2pkQGMSIg7kDijS9F84
3x6lYzgJXhZvXU/Q6pO40xKKLk+C5vNcA9XrVNDsmp2VcJqE37Un7u2j1fPX
09uJT25PwkH1df51Wr2fmrBqM96fhNW5IOFSmh8mOkQyBlInoXGFlMFlQ4XI
J+9MdHInIUmlVjOO5q8jxseYi75MwhTk3iNaUSGk3cjqCa2vPpECkSaaPxUe
DxEYJybhnMO+J7yXaH4xcipz/jsJooMlQ3CRCpI/ggV1eKZAikf1gMN5mt+j
yQ2FAlMQfe73WWtjKngZPveWkJqCntRxXx3aealrLexk0JiCD34U+Uk9Kji0
zEQVek/BnnCmgFOaVCBFeYNEyBTs1iEEfqCdxyJ9ll+PH0+BR8jzTW5MBc7v
wtrOOVOw9CEpKfIYTf8mQ2aJ8Sl4rB3DVi5H0z9i8MPj+Sk4W9bn8EKGpr+O
oxUD3TRsE+kodKH1B93Ge2X9/NNw5RiD6SCtn/yq/+z9+Ow0jPIVy8+RafqF
akoyWEzDokHAIy0CFZBWW+fN69MQylVj/JiLCg/rqIe0g6fhc1u+2hITTZ9a
oV/0JdPg0hSku7hAAZdvQVY3aX2b6WHyo9lWCgiNnWRZOkQBUSli35MmCjQw
sGf5Ygq81pUNVqijwD4c8efBBQoYP/WUVS2nQE/RE/+0MAr0Oi1I5r+jgFru
q+QeWh/1fuVwVCaYAr+a7U5c2aCARsGlsC1/CiTMSk9MsNH66m4GnhofCixK
5+xfoO3r4C2bLnkXCmSmF5TwnKPCqhX8tr9IAWJCba/6ZyrULJXOhu2nQGlh
qF99Fc1337b5P6Plfb1bZ69BK5X2nxPkS9hDgW/bW+0tKDRdZNue3N5OyyOq
Z8VLcAaYT/YefbsxDcP3KDuy/Wcgj691/0TtNLx35jLadWYWqg4+Wdt+gfZ/
iyd7vzOZBdJeBwURg2mYqOJPOWE9C+qFhhZCZ6aBn0+K6nh3FkxdrShLR6ch
qEIzsCJ/FsTTcQn/rmkwId394LD3FwQxfNmu2j4Fax/+kL+s/4I5qWtu12k+
euFznaJwfg7+exskcY1tEhTK2VdCLs2By2E4mr1J60tMGcyDV+cgMle0+Dft
HA9FjIlEOM+BzbK2weXhCRB6fun89AMay3gazRdOQHyVftWLkjkQ4zunuWA/
AdHcismkvX8gHIazGr6NQ0DKhsHCzB8YT/mc1UG7L9H9GMIlt/+Ct8KTxfi8
YRB3u+Z1TnoRbO48tDZx6oexxVgTzi9LYOUQPBUq2g1a4w53ol1WIME8c8rr
bxucvCP6VsNrBW4d62p2HWqDE9v7epf8VkC+QKPJu6kNjmnqHr0YvgIj8a+k
Xr9uA+l0+b+ir1egVpNxPcS8DThtFuzy+1bAdUwk9FptKzSO3TnXfWoVqKsj
YgUZLaA3FiUjJLQGYl8vaJTtaoJGmbF2c7E1CH7UbPJmrRG0XZX8EqTX4HaA
GOFtXyOcZhho2aW0Bo61z3yozxvhhIiMB/nsGpBH53SspBvhsPm3craANfih
5IIU1BpAsH3V+O/4GvBbul3S9qsDylcr/9p363Bg8P3RPUeqQfhRt0Pkx3VQ
btpxe5tANZyz0DM+V7wOlpJ+3sJ01VC6oiw9VEubf3su3rf+G0TvJ7Yvj66D
VaJ4meGVb6ASWyYhwb8Ba5cU5+2iqiDcQfD7veANCE8cu8TJ8BUqlKILtSM2
IOhwoeb0dCUsMbGlER9vgNfxF4wDrZVwJeWvV9KLDRhPZhvkTK0Exfb6vfkl
G2AoFbDbS70S+lW9PcbmN+BvV+W30NAKkCN27la//A/k3ZSCjKXKYSJiIuCJ
zT+wIUoE2W4vhySO5cnJ6//ARbzWLJy+HLiYduWFe/0DLXbUJvixDChLF052
PvoHK7cS9k3sLIP0vv4b9lX/AI83+DhNfAHBjPGyh1KbwPGt+GBTcjG0iy2J
jchvQv92V/9An2IIe8ESqnhkE+RaxsQvmRbDWrzEuZ4Tm9C7uCB3m1QM3RH2
U3vNNyE6JXrL9H4RxLjOEj5FbsKH76Lb4m4XAgcsWvb93YQMMwbWCK8C8FKT
ZPu0tglpvSXzcyYFMKF+Mfsh/RZ0dsSa+RwugMrTFWsneLdgb0LvQca/n+C2
YURMpvQWhB3TIfTd/ARUm33fPCy3QMbHIy/eOR8aw40lid+3wPEbq2VYxAc4
9vB+M6WD9r6639AD5w+Q8ajYrapvCy7iW45vjD5A0NM9FZ6ULVDWVz52nv8D
CLUsyf5moMMv4g1S9DLzoLOn8puxEB3ew7VvZ1rTezg1a7a815gOm5az5+yT
z4XkbYE/7prS4f3J6Uxfd+TCgsqbnL6LdDg42vT+v40ceB66bvvUig4/ir8q
l5qYA2sSid3sznSYg/WuYclANry16i+cC6XDV/JC2phvvANC92Xf0nI6PKfs
IOdXkAXXtkJMBarocDvvTfvZiCwoEc9V9Kqhw5FJ1dRo6yywd6ebPdBMh9Vd
h5fvkrKgkvTiUvpPOuy/Uy6szzkT3HRHUPgSHRZTzCu5pZQB3ZXW9Gay9Ni/
+k9FDiUd5tR6+e/I02OeCt3Ewbp0YK3QV3x+kB4rbU4rKmemw5GyY7YTR+mx
RFIUnb1dOjwuJjTd0qTHCiJ/Uj9NpYH+x5K4MAt6LBt21WRy7iVUp29T+BJF
j/PdsmXChVJhQCz0zFAMPRaOl3Z6zZAKiy+3rBhj6bHZ4O+wyYkXIJZKeXIm
iR5TG8TqO3JeQEBy+XpHJj0W5dOUuab+AlCsY82vSnr8oSvyx2GX55B/v8pC
ZJEeM6sePSbclAQZWg27Qlbo8d6np6PZ4pMgnqutbXadHssrarao2iaBf9Tg
yWIGBiz8uT02lCGJdp9ZkzMhMODl6CexL48nwshrha0wGQac+W/6aHBpPPDU
JKYsWzLg88+EN94vxQL9g5cXLGwYcEfpgNLNxlhY0Moif7NjwK3Sn587pcZC
T3NBSPRNBpyyfO+DrH4spHW23dx/hwHrcgbSvXnzFI5NsOGrcQxYQ4RD0sr5
CVxjdh9qbmbAh69XfI0VjwF+4bqu9VYGHENh0NjPEgPNR3d/l+xgwMGHA8X+
jkfDEcdvXwJ+MuCDt9/s5H0VDSw/ticcmWLAHrrPtf+TjIb055+Mk+kZ8Vv6
oM8CRx7BmMpKvZMiI/6p8GXu4HgkxBnrVMYrMWL7J82mT3MiQefm88KaY4x4
OKfBVOd2JHxMPZ2xR40Rd5TVuWcTIiGI/dm9Dl1GnE1/PRLUIkCsSxmr2jJi
fzvpDuX3YXD1lk8+Vzxt/XssrTV19+HIwYF8qSRGHPjb7G1M8n3gmMefTj5n
xNbaXc2prvch14WlwP8VI65XM733QOg+bDg/+ryQx4gn+rQINz1D4OnN18V9
DYw4+rn9Hb3DwVDn+KPi7T9GzFi59ZB3MBASZY9U1tEx4dPONRbJxYHgPBNX
OcHIhD+o2KzbxAXCDkeLryIcTDi87YJNsmEgWF2frnq8gwn3fp3yf1MXABv2
WzW+8kz4clIp10LFfyBvK9OsY8mEFVod+lzy7sKAvfDNd9ZMWChl1r/E9S6E
O5IJPHZM2CMxV9nz8F2Ydlk3+H6DCe+t6lA4VuQHL30bOgx8mfBrpWdWo7V3
YGf09X6TWCbM2cS8KLfmA1slb2auNDHhsmbO10cyvCC7LCWiooUJx+ZuvDrh
4QXmlTFye9uZ8G7KtqgsDS8orPFxHu1lwjNfVJrCRjzBtU17wWaKCcfp21EC
93rC5CR13YGRGUtVnxlszHOH7yRZTndlZryswVO9SnAF5OQ0nXCcGX/WZs8i
z9yC7Jrsmkpgxr312Z9v1NyCSN8DQYSTzDjul0bZhN8t0Jk48u+NITNWeu1z
88ecC9QXqv0euc6MXTaIS6eHnOHblfM/ziYz4/13xbh2djqBYnHce88XzPim
xw9foQQnSNve+zA5jRmfHTvxJeqKEwTVm+vMZDHjmDMNG3kzjnBC0epbSAEz
Nkzy6/jJ7gjlrE4FpS3MWAH19sqed4Di7IAEWUYWfJP+1A97ZVtg0THmj2Vh
wbl/Ynals9iCwbTEM3oOFmxiKeh9sv0aTIo2Pe0ksOBfL+Xffna+BuRnO6P9
hVhwivfNtZPZNnA98O39dmUWTMi8XH9TxRo+idxlBVUW/O1v7/fPPNZAX2oQ
nIlZcAx/+W/zkasQu7IU6HeKBX+sTh39EHoVvjqp3ZU0ZsEtf6RjQwetQMC0
093XmQXzl+wz1XtmCdcWMxYmXFnwV3Lrrw0XS3gf7eNq4MmCu8a5Mja0LOFU
k4iLuB8LVmiIEp/9dwVcT1x3bAljwSoyZqwBtlegQZbuqthrFqyVIc628sgC
fOilzzb2s2CGBAhpCDCDCQ3ObvFhFvwg3qnH+pQZnL0/c/m/MRa869yuCG8u
MxDjzbl5hMqCe43CPYlxF6BRUPHh8xXaet4y6iMfTUHoKGp2I7Picf7v3epM
5+G+j7DJ9x2sOECey06qxQTmS+kGpPhZMavCkTu+iSZQo/l1dkCEFY9VH1uw
PWICzkanuc/IseJdz5T9VG8aQ+UNQ53dZ1jxBfJGwcEFI5DNO9TuqcOK1b2G
zR5VG8HTxW3mbfo01lPkNHhmBNd9u66HmLDiweF3L+fACLaFmof9ucqKndoF
bBMfGcK19Gv13/xY8fvCgX7WkwbA0Xf79I2PrHhkyD1poU8Xjnhmcj8sYMWZ
s8xHFhN0wZLU3ZZTxIpP80zUeV/Uhc+nD1/6U86KxW3oeTj7dOBa/m8XtyZW
LHDf+MGhUW2oiLROuD1By3f4skcTmxbMSMVcSZhmxUHsQatJ38/Arm8V+0pm
WPF6zaeO0adn4Ma6UO6/eVYsVu25r1H8DAja9VT5b7FiV5g7vax9mnYf0fsV
vIsNs+h/8v+XdRLS+nw/vBZgw0YsxSulXifhu+cbr1ohNtwfj1KmTp4E8Ww2
Ro59bLjs8rlLLmOa8IP/686IA2y4gGFMTl1ME+QWlNRitNhwb770Iv6kDuOv
9jxO8WXDSt4MZu+E1GAmaHiV0Z8NNxhkBDYuYJi3enHZLpANSxzmqtRuwEAn
vEfmQCgb9ly00bf1xsAfK1JZGcuGjT0NAlc/AJwNEZ4bz2PDwv+JC8yeV4Xz
NoPGWp/YcHvRKX93XlWwUE8pzi5kw21eWSvpNcfh+pZQiGc5G74t/uS/VeXj
EOwpJMTezIa/yTnt0RBXgRLb3Tqy02x4a2RfrbKgMnzV7H8fNcOGvfc/30rp
Pwr1okk7F3+zYcujLitxKUeha1Bw9MsSG6YOOh9C+47C/HnB2/pM7NjXKvTO
ISUlkDwtkHFLmB0bT9Lnl7odhseSfEyFxux4/16hudt6B8HcQvz1qCk7DnWI
8yCIHgSxx4e0eMzZcY8NIyfrygH4uKUbddWKHZu/3ziy7eUBaO8MEOS5yY5d
ek4Mxf1TAPK9GcWr99kxw5OeNo0QeegtWu2KCGPHkTP2L3pV5CF1jsXncyQ7
/s61+Jr/jxwcNN9Twf2EHe8g61XHXJIDw0Mmup9fsOPKp3fL1NF+iB4us+Eu
ZscWLSkbN3bLgNnOJrajpew43lSMj6VPGvbq9r6xqmDHJj2HThxMkIa8zwt/
CmrYMSnnQo2GgDS0PZTys2pnx7+qzwQo7JUCIop5WjDLjiOmQuL4tCQgKv5a
jaUIB94kLmddXhMFT48AV19RDry9BQzP1YuChWGycKw4B3a/lW38KV4UZDk6
PRtlOTC3GWdz6XFRqPPWlFRS5sAif2pca+/tBYYLYg+4DDnw47yDFevSe2Ba
ER+WMObAiY/q3pvT74EWgvmwmikH/plbqbK7WwRSamOUPS04cMrUs/HCYBE4
fpSRMuzAgUUpOn1PW4TBfeeIVkEgB95Zi3JOeu0G87//llqDOXBp6b67agq7
QeM738uZBxy4lX2X0uiUIJBCDNb3RHFgsX0dH7ebC0L2Uvmb8EQO/G3o8wCv
lgBMdaRwWeXT8n/HVS6lzgdmjy81c01y4KJjipXML7aD4AcOgesUDmxesEO/
+tp2GGwtsK2b5cAWA7IjAvu3gzUviT54gQMfF98X4F+8DW6EVh/aoufEK+rs
0uyDZAjwl3/2R5ATX8nfu+MXkEAjpW9cX4QTXzwLLpd4SMBa+uBgtignpv7u
aNLpJ0L4+miDgzQnVn0ZnfPKlwhPPeI2R5U4cUtJ4Jt9FQTIdKS37jTkxIOB
tb8TynnAMSw7V9GEE8vIVTtYOfKAXNbFf9EXOPH+0TQXJj4eyJvMf6p/hRNb
e4sXtLlxQ4mVQ12tEyd+lyWgYnGEC1pMf8gV3+fERqcy9F0G2WFFI301pZQT
n7Q2uHCrhBl8i1MCqyo4cUHQR4bFQGagOxjPPV3FiccYy1IZdZiBVfjhnoMN
nJgnQjuzrJ8Jdqx6nanq4sThpM2kh6xMcOidzrOpOU78vp/Z38+VAT6JnhLl
XuDEbKFn62TVGeBYvNq7A8ucuPgrNBmRGeBEyJGK2/84cUB8RxRrPj2ctRSZ
5uLgwnvj+60m/9HBje0LRw+IcuGJkwXdh89sofmwX5XG4lw4ky/CJ2NpE7kz
TOvcluLCknPu/NS0TeT7u//KV3kuPDk0GNHNuInC6mruGx/nwq8+abMIN2yg
jDsJ3d7GXPipZMTIlztraHT8hFdlCBcuCbEyOWi7hE6kNKdKh3Hh7wckbPeL
L6HnpmZN0ZFceJelGaVvfBFZNLjsvfqECzvhv/0GtouoN/d5I+NLLuzIty3m
yq0F1OazKaJZyoUFXsVF3n89jw4cDtV+V8GFj5e5xi06z6OoX9s9tn/jwvd2
uDmuH5tHepb7G8YbuPCKBYtgQ8sfVH/S3D24hzafLWSHPuMfVEksqqtZ4MKu
BvS/DzH/RnsaNBfkV7iwTvAxSlHmL+Qf1CoUt86FE4O/K2no/0JoecrVjoEb
yzQ0LhsmzaKivp1C7ARu3Pnfcu0OzRmU99r9lpYMN0580npuvXwaES3pk/Lk
uPFnTtdkZ7dp5MwfUcN/kBvPMH+cKZOcRnIRaYLUo9x4IabKYjRmCmXd+lEd
dpIb3xh6dn7TdRKlqh4QaLLkxqa/1HDShXFUqccRuG7NjS/mMScO7R5HI5dH
KVJ23FipMvJE1cgYEg14UhR8gxsvxtzhvHZjDKVVr17APtz4k2tn2mT4KErX
r4z78Jg2/vbM8sPxYVR9JYFuJJYb+3WaMIp8GEYTLm52hARubPLxoufR/4aR
+GPxo04vuLG0axz/P6Fh9Ko7tEs8m/Z9d7eUnCtDKMPSaEd8DS3/Q8KJ+5f7
Ue0tWb/aem78S7N7WSi1H00FMk8sNXFjLukSyRXdfiT5qiDfqJ0ba9pvSzXN
6EOZFAFj7mFuPMWsbvHI9ifKch2L8V/jxik8Yp9+c/egd/fcibb7efCuHUqv
RqntaOb4pYB7CjxYfsK+vj23HckuaPx9eYg2nnZP8ZpHO8qy2tYxpMyDwy7f
srjK2I4y4EOc2UkeTFkzDowX+4HSVueE9S7z4PrHfaFpAa1oLLc7ytGKB09u
tj0cPNuKRO3K6cNseLDT8aTXqcKtKLXz4WjNdR6cEF0bUFzaglI+yL1W8+LB
0Yunm4iMLSjeyVHu8CMevJM6kmR8sgn1ip1LMXrMg/8OeA5Fzjcivj4Vwq1Y
HiygzjCSndKI4rQ457OTeHBgNV36s40G9EQiK18yiwfLuUlx9pTXo6jhyeOC
X3nw2eAdiuwutagl7vu7Y9U82MeeUpQkXYt4zxYIXajjwf1aRi8Xx2pQZGkw
3dPvPFjtfOHdyYs1KDxhXxVvH00Pa8qPBMNqFGJ8VZtxkQfvvzQXGm9ZhVL1
+8xtVmj6VWnqBeypQiVnjG/UrNPyIWeclh35iuZVTz0KY+DFfOTuHaU2X5G5
uEwXmcCLp+U8ehLdK9HB5XkrMRlebFAQpeD1qRzp/rnuFizHiwOyx4tD/itH
dtSxe1MHePGpZNn5o7rlKGmwM+PtUV7swe+x9qexDLHVFv1SPMmL7Q1YV7xx
KRqIC7itacmLT2epvX1uUYxWo9fDXlvz4quZQTV6rMVoW4RbErsdLz7bq5DE
/r4InfnvWnnTDV4c1iW68xlrEfpor8Vi4kt73/hxcH35ZxR6jBR9LZYXh76I
G5y58gmlK4a9rI3nxblVUt+Z+D6hcjmmfOlkXqx88diX9dZ8tLh3qetXGi9W
43io7HsyH13h7N3tmceLl9/9bfJX/ogO973IDGnixT8DGT28NPMQQc5uJaeF
Fydz1pM0ePLQzF25U90/eHEOQ3lpbtd7lCZaPCbZy4vTzxkoX3N8j7Zdbxeu
n+DF/UdvuBKTctGaL6M2Cx0Bzz165Uw9lI2m0q/diqcn4OnN1RVC9zvU2Vz3
TI6RgF+8fnRF4847lCcSNWXCQsBa9SHTtfVvkUOVYPBrLgI2u1dms+zyBvVw
Hqk4zUfA/BfMAjx/ZaBqxWdTffwETJXydRBPzUAfL23wuggS8La6ot0FJhko
KqfS4pkwAZ+y9xh0rXyNThvpb0zvI+DxCq89O9Jeoc/xdkphBwn4Gavwl9mI
NPTqa4OFsCIBf5TMOB+vl4Yez8gFfzhMwCqs3+IZCWnIGS22/zxKwFevPMti
fPISSY78d0sWCLjln+de/9epKE4q4V2TNgEvctzSzZ55jhb+nkwP1CXgY+0z
gl0fniP90vlEZX0Cdi0ZSvjs8xyxGGmFpxsSsKH57vRE7ufI3XfV4c4FAnaY
ao00cU1Ght/PS+63JWB7bV2NHVYJKPsZo8ioHQHbZiZK+zInIHbrnJ3PHAiY
sjtKlpgVj8pXWFiZbxBwbEtjfOHSMyS/99N4nxsBl+/efjQ5KQ5xuW97GR5A
wJxEn4wsoafIDsrjTwQRsAU+mHDhxxP0ld0xeuUeAed9ejlG9+AJup389T/r
BwSsX0SSlV1+jKZrbl05HkXAj9zMHF4MxKBq/tbdM0kEPKW7sC2w6xHaO+67
PTWFgDs7kimm8Y/QnRxJbtMXBJyfrjO+eukRUtTw3/iaRsAblz1EYyajUKqT
/M+ENwQsXEWx72eMQnfLI+K0Cwm4IJO74s6XcETpL3+8WkTAunwk2V3m4chk
/W/U6xIC7j199L/59TAke8TsAWM5AQ8+Z+Q7D2Go+4347eJqAi5a7phwbX+A
DsaWXZRpp/lN0lioQjEEJX2cP9/TQcBCQ9rNsePBiK1t37mQLgLO+TRn4hYb
jAa5wnVGewk4mmw0eWDzHgoPMFVNGCZg1UTjcZuuIDTh9EeI8zetPmN7ulk/
BSCDMDGBwjkC3v6Zp7PWPQCVZJzfaTtPwH+4tNouHwlAMaNfeL8uEvCkZCQb
c9F/CF8IpfPZIOBLdRK8o/X+KF5DdITCTsSl1mxu3nv8ELOVyUAcJxE3bbOX
Ni28g5zvPug9yU3ECneyhB4b3kGnin63pRKIeEJycxfpgS9akC/5araTiNml
f5e8Y/ZBugLG6fViRGyqYn6qXtkLxY3JlV8UJ+JrbKcyxameaOwd288ZCSKu
E6kfuJ3kiXxxCYFXhoj1HVY2Npk80VsbUV+jA0S8WLDhsm/QHXHk/jHsUyVi
qUPXev774opMvBucnICIx6SfWXPecUWpJ9Lvb2IizlZBlpaqrki5w7RURIOI
g6lqE3blt5DdWpmUjRYRvwjMOPzyuwuq0Yik+2VCxIcTYq9WEZwRicdO4K4p
Ef+X28G0UXATWXSpHSGYEfGR+yIi5fo30ZL94vWDl4h4a2buo3TgDST+0LzL
4yoR/1q5f4l/1REF9Uhnb90kYqOoz2NEIQfUkspUF+VCxD3LQYZVNfZI0HFg
dI8rEVMekqhht+zRh81HfBoeRMzHfUhGt8EOjYiuBt33JeLvVQp0xx/YIrUb
NReJD4h47ZKhD6eiDVrrnj5ZFUrExW1Lm1mT1uijOtdBz3AiTldY2jJOtEbi
fAZs/Q+J+DlrjlE5mzXiqur9mPGUiHVuKxTdm7VC3Xy/uHEaERMb0x79Hb2C
ooMIq/PpRLx6aC6i8NUVpP374Fj6ayIu8jG2O+9wBZVWeRZxviHiMv/MG0JT
l1HaTXrbrvdEfFQ4Nl5trwVy/rat/EYZEe9Qu7RtZsAMSSsovdlTQcSfzPiz
Jn3N0Gj8haftlURcf1d7DwiaIRPnZMdj1US8z2iV/bfFBXRcQJKPpYm2fpTo
nR9/zyM2F5VbSb1EHHi4TH38vDGq/Hnp0tk+Io6A8eUIdmPkc9L/NOMAEc9+
J0fqlZxDvwS+CdkPE3G4rI8a275zqL1ar0Fxiuan7jtvlhiMUIqglVjjIhG3
4QHb7Nmz6NghGTmrZSIWuBGYc/rDWdR+ZkFpZYWmt+JNgdfeZxGbZ7C22AYR
N9sp2r1iO4ucW7Nu+TKQsGbVl+AOCz2Eg/+Wy/KS8HVlPgXm49qoN7GkvpJA
wmvxr2JD+rWQ24d77aYkEl4BqvYZfy2UMbRzKmg7CTtfTdS8XXcGEVWO8/YL
kHC+2uj6XofTaOR30KUISRI+kGhLOD6siXxZ9GxFpUlYd3+t4uhjTbRj906X
QhkSXqZzH484o4m0tDKDxuVIeHTZ+uFQvgbKS2t6o3qYhKtPebcKx6ujwAs7
1mbVSDh7ZXBKN1INCTkPMgapk7BWhaRx3lk19Dk4g5tfk4TD9w+5TpPV0MyH
Y3tOnibh58kuA1WJGJ3juXw6WY+EYy+z/Wi4CUjs6+unehdJWDtGqV1B9Dhq
ll1J6zMn4S9BRYntFSrI6+npDw4WJGxz8HJzuaUKarCf/h5sScJsUo0vLdOP
oVsEGfYyWxJebdnpa6iijMouZfvIu5FwS9bl3nvJR5BdzeaDL+4kTDp09MQP
/SOIdEA/TtuThNN8+bJkGI6ga0xzH21vk3BKUG/pb/vDiOvNgV8p/iQ813NI
zVZTEZmtfLxCiCBhqS0uldNSBxGTFfPN5EgS3s7B87Js+gDKbjC+IxtF0+9t
ayfvmwOIPmXp2ekYEi4c43OQVziAMjSP/vB/RsJ3p1nfC2kooMXoYs0/6SQ8
0+YmTRXZj5I3OM/dfU3CF4UabnsUyaLT18ytuDNp+ry/aWdpLIsSlf/5Sb0l
0e5P6s3qD2XQiSH02TKPNl7SO/CFJI2i9ldKt5WSMFxvNms+J4Eyjl5kDygn
4ZzEKqrJujgqU1+YPFBJwqqp0oZyL8XRrwvi6Y++kTBxSz3p09I+pB0cKmzQ
SMJ22ipVb96KIZZBw20tPSRs1anubXB2L9pNoc7f/UnCS7sMorLZ9yLFxaBW
+X7afix5X26v2oOuchZEPhwi4Rf/jj2YV9mDypUE2PUnSfiB9I7Ju0oiyCdq
9F/TAgnfb+HZnpMviKITfPvuLJFwgk3/B72Tgijr1fbi/SskXGGko/m4WwB1
l5zyilgn4RuvRjdW6AXQkek38zoMZNwq0/I80JYP6S5otG4wkvGeATO+d0x8
yHqrP+ctMxkLvzIS13u5C8VsJzhxsZMx+3Vzo+GxnWhOzW2ygZeMFSWSwz97
7UBsutzVPkQyPrGWms2xZwcSNn2VJkMm46D3Z7ey6rcjvRvdlmE7yDg6T6Sz
cs929Cb+eJ/WbjIeNBX61jBARtf+MrXWSZOxtWWZhXkUEVlkaTSby5JxBs/y
U8azRGRiGdTwez8Zl1RO7XtEIKKT3xmrtx8g49P5aRWGjwlI/A1DsaUSGef8
nBI7rMOLxq3o0lfVydiAW+uDzRAn6uPDqeGaZDy8zPa90JsTtbfcTRE+Rcah
85/87m7jRFVo65mmFhk39R26qq3HgdL4NyMfnSVjvvJg/4ttbMi6bd1L6hIZ
sy6fm9HYxYLMH6h4lFiQMSdzrZJHNTM6h31c9a+QcYTmn+Tv7sxII3vNyf0q
Gc916nlQupiQWOiqVYU9LZ+3pdoGmYxoVG1Z54IHGeu1LBnE3qFHvStHtGY8
ybg7tv2/O8fpUVuOx6m73mRMLTR6cXaDDlXuXlJL9yXj4i/SMbl+dCh1deHI
nwAyVtM0n1gX2FK1ej8v8uAhGW8W/ebUz1hXdQww2tB6RMbJfOIvRxXXVd2N
PnZxxZBxmd6xC/pf11TvL7pHRj0l4/+mUicix1dVs5VX12OTyHgfoYdzCq2o
fuYw67qQQsap/nsMb/Qsq1b8LMoTeEHj9FCex+7Lqu13fO1T0sj4Ws897rS8
JdXViq3OV2/I+OtMUrQ4LKoyxFzJs3tHxprzh06sjC+ocllXREjnkHGBWJ7s
0cgFVSGWQI3sPDKWEJRvp478VdXQYsnLLyRjj8tqCiGJ86pRbVwRVTW0+v5V
tV/VnlONf+lkF1xHxvJl7DOyrHOqL92a1U830Py0b6/xavBv1U87otYammn1
yTf+98Xvl2qfGdnuRwcZ14k5xl4PmVGdkHFTf9JFxnlK1dRUnhnV3xvtQud7
yNhPorSsOZaqypDytKO3j4yT2EzMxnIoqhKjfOojo2Rs+Nv5xIGlKVWFj7eF
0sbJ2H/+dfzh8CnVY/d+rtpMknE792OnedEpVR2JpNxpChnHWWVkeptOqt66
LiL05w8Z79+1fIe+Y1zV9/h/q3l/yfhfuv0kp9e46j3ukXa3RTJGa8qtzwTH
VeNyXoatrJCxXf6uaAmHMdVUfybbojUyzvwjZy5AHlN9Y2BzwneDjNv+Lobd
/jKq+nFv9W60ScZVrGomYD+qWvpXfHVri4yLupZZrHeMqv4PSFgnWA==
       "]]},
     Annotation[#, "Charting`Private`Tag$7758#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.772763539733735*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"e3dd7b3f-9539-45f4-98e6-9790e25935d6"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[OpenCurlyDoubleQuote]Two Moons\[CloseCurlyDoubleQuote] data", \
"Subsection",
 CellChangeTimes->{{3.772813761600793*^9, 
  3.772813768406598*^9}},ExpressionUUID->"5e309b92-9483-4458-b46a-\
7a906d394649"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"points", "=", "5000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"noise", "=", "0.1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"k", "=", 
   FractionBox["4", 
    RowBox[{"points", "-", "2"}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "+", "0.5"}], ")"}], "2"]}], "+", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "1.5"}], ",", "0.5", ",", "k"}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{"2", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "0.5"}], ")"}], "2"]}], "-", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "0.5"}], ",", "1.5", ",", "k"}], "}"}]}], "]"}]}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", "data"}]}], "Input",
 CellChangeTimes->{{3.7728128440597258`*^9, 3.772812970704172*^9}, {
   3.7728130170382147`*^9, 3.7728130549168234`*^9}, {3.7728132996095257`*^9, 
   3.7728135234012156`*^9}, {3.7728136415869465`*^9, 
   3.7728136902498274`*^9}, {3.7728137729584284`*^9, 
   3.7728138803906045`*^9}, {3.77281393058981*^9, 3.7728139395767803`*^9}, {
   3.7728139940481973`*^9, 3.772813996525557*^9}, {3.772814048601939*^9, 
   3.772814071832833*^9}, {3.772814191640459*^9, 3.772814192814328*^9}, {
   3.7728142647333236`*^9, 3.7728142652140713`*^9}, {3.7728143202267427`*^9, 
   3.772814363337674*^9}, {3.7728143986644783`*^9, 3.772814398951719*^9}, {
   3.772814435666066*^9, 3.77281446577341*^9}, {3.7728150202576747`*^9, 
   3.772815041626583*^9}, 3.7729804348532553`*^9},
 CellLabel->"In[53]:=",ExpressionUUID->"99d2366b-03db-44d4-9dcb-abca59e5308c"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJwUlnc81u8XxkWKFkVlpGUUIUKSdChlRFISSSUhlYiSUGRkZVYolZYVpURf
FY6VkL333uPx7GH+Pr+/vD4v93Ofc1/X9b7PveOK82k7bi4urmAhLq7///18
IbYg33EJrbOyKs769WOgxoC5m90SGhw5r17xrRsvbVKc2W2zhIKPJwNeOPSg
Ou1+UM+FJQxwevhi9Hg7rq/7s+2ZxRKqsr7p9ooM4HjG+lwDsyUskutPXOzo
xeIQ61NLJkuoZi2efmNnJ76yTxvLPrGEvZ7Lb5Ymt+Odowzf63pL2P/u055z
B/vw5HYd0e1Hl/COG/Z90+5AmYUn35oPL2HDqbcH9J36kaujzSDs4BIGng+v
aD7fjW0/pAa09y/hhS+HRm0duvDbUxdPpvIS1spmr11W1oehLnkbMhSW8MkX
Iw+Vb51oa8yXbiNLnOeGZEJpfRcekjM7ull6CZ+ekTPwvNSBG1e+7azaTtQr
NvrhEdyC04OTbn5bllCj91NsG70d/xaqrzkgsoTaD/KK/Px7MfG1/8dpoSVs
D5WNPLyiDe971h76ILCEju9OJL+Ma0bTc+LNFquXcC/FQFTpfAfuUXVwWrdy
CXUOGzxrsW/F5eu/85ZyL+Gcccuefq8m7JpefH1/cRGfZL6JEyf0+1FpuH/v
7CK2vZKX013RghEpsTVDjEUsErWY6UtsxWsBA/YvKYv44mDy5PMf3ahto7hk
Mr2I2rJGPGvMm1D0sGcc7/gidlTI7XEIakKqWNne30OLyH+z5Lh4STP+Y60v
d+lbRG7RjmrxGz34scn6skzXIt7YtepLiEILPviWxu5sXcS/NevdbZSb8FwE
Iyq6cRFbGqJuqBS14t4bOrJ6tcT++r793LmNuFI/vGi+chF7tS67qMW1Yb9U
u2VW2SIe91Seqg7rwJ/LpKkOxYt4mFYS2SDXhE97XEIlChbRYPHR1vLENrz5
O29n489FZKjZP+tta0XdeL7fwTmLKBIvnWPi1Yxb75qdOfxtEevN92VvbmlC
punbSVrGIuoJ86nrZdRjneKUf1oq8X1JpS4/pgVTVx/YcunjIoY3nl2jIVqP
fmP+2cJvF3FHEdk8cU8znv9Ta1SZsIhhGkVNee+aUOW9+LBPHFH/9+3e5ysa
cY2PwwO1p4voP3Yvw6qhEYetvm+cjCD0WJ/Tf+RMG+KBpc9vQxeRfMP+fM3a
DozbeOK4+eNFzPCLHwjtr0NnamzPaj/CjwDRrpBPTWhQO+Be9GARn0kal4z9
qMcdGYoC9+4vYuLUN88A8XqcC/ZMkb+7iAetk/aO6dVjk10ZDLgsooZMXun6
jgb8fGRDW9zNRTwi27PK5kkjPt520cX42iKm+uzbE1LVjhfn0/h4ri5iZrWH
Z05KAx5oZ7zNvbSIOdliJmlfq1Dwh47GLatFtBHxYXFvbMeJmPB6yXOLWH44
jnPQtQmLndsd208v4qdt92O3GDdhgpE0d+TJRdxeW+Zt9K0N78jefqlrSORv
RuVn6e0mNF6Rv2/22CLa7SLNOFtV4K5Bvn+ZOosYLG/268GlBlxCM1s7rUUU
TuHJKtFowtZXb+fENBYxwe6Mh1tjC367P/W0TnUR85YnJrHflGOI+QH5x0qL
2Bpn/8JHvR5tVQJKNeUXEfNrnoS+KcNDgnUXKLsWsTNX31tosA43ToszkiUX
cX4bc8B2dwuSKhzCL2xbxJOh7Cbpk9VYlvxdeoP4It6NybvQJdCCb/2X8v9u
WkQ+7bbHvlZN6HH5hPmDDYsYO9hms4/UiKe14kj71i2iwF/ThDP8jSgnNvh4
jH8R4yWmekLuNuNyluK2N7yLaJh+MnLPhyrsavT878yyRXRnvu+TO9iAOV/L
TPgXFrAJR32+mTRgZPiGsQL2Aq479WHv5z1N6HD9ou8d+gLm7ntUKplciTp6
n0TkyAvIc8i38s/oHxSVYn7tnVzA5JvKEgdvViGF64jB89EFLJBzNnfKqcN/
3eH9hoML+HJrRe0Owz/48Vf7fa7eBdQRDRRuP1CHD+KkN/zoWMDM2P8S+VKq
0fzO7U83WhYw8BjX7dvZf1DRNP/IjoYF5OocSbnQVod8ivydLdULuGXyb5ro
3VLsW3XW7UkFUb+ZnRrSUI2/Rt+uPvKHqC8TdnmVSjHGlE59YBUu4Nu7MhWh
1cV4892BQ5/zFjBA9FahqngZ6j4MaLqSu4ClCYJXfQXqUcKq7qZI9gI6R41f
coovRZb6Ft6azAV8XfI8+ld0CdYKX3vtn76APW4V/LFh9ZhG+a6mkbKAY5Cr
vu93FT6qWaomvV/AweaG8W2zf9Ey/YT9xzfE+cTMy4wt61AlOG7R8uUCNpIF
8WlaDa6xG4wViF3ArE6J4VfZNTiss3fvn+gFpFcb7203LMOCrV5/PcMXMNIk
32z33W8YN1d2SSlkAdmmPrGp67+gS9sG9nDAAv5oyFcsqKpG/ZyLUQm+C3gy
21VXc89f3Bnzabep9wLGKTQnDZGqcPYWs3CFxwLm6M/YzGgjNp04YpnnRvw/
7rMr+0E2ZuyOoNx2XkBf+ZjS28a/MZC3I2TXjQVMfSiXx2NViJcGpHd22y8g
b/iO7ZoC5aiOt3/FXFnAOzWfF3WG/uH6V/mn9S8u4PLTb5f0NmfguAf/5ILl
AjZ8kDD/vS0LS86e9f9+dgGn+hU39a8qw4R978QdTReQEtvFG/yvAO8ITH/f
aryAlVVdOYVaSWg8dcCoSZ/Q43FwM39zOspUBAyF6BL+3igybfItw6WkOm/Q
XsDHTlzGP/qysc1vy0aG5gKemlhEldhy/Hrp2udP6gsYJOdmPKz+F0MPZR+7
rLKAl5a+/zZw+I1XRLl6Nu5dQPKh9WZr+N7hIeYJ939yRF7Pc0WKqJeicGPc
ukcyC1hnOCYp0liG05mDyft3EvVOZ7sKRP3Gv0/2wpTEAuoy/bhaa2Mw0dGr
9Z3oAo6nOv+9EV6C94//dT63cQElVgauXOFXgqaSQnxr1xP9lPQ4jU78xD1c
l94Wr1lA7cSorTIZ2cjT/emAB98CesgqCXOvzcCun8w6heUL2L8+/lBoXhHm
xB5xHFyax19Orbw/up5DhFvEshdz88ibqiKc6pwIDqc6XpxkzWNRYtRETlIc
aivI7FtOm0eF5yaJt4+Gg9gq18qfpHmc599b4Rj9Hakj+VecJ+bR1p7twLa4
gpUl/HNSI/MoJS+rJf3FFz++Pfu0o38e82wuZZ3R+IDeD97tieqex5H5w3Hy
s2/A/Px0ybF2op7W0JqT7t9wr7rGhbmmeTylmBGeWfsMVgoH0r/WEfsJS5UG
b3gB/eS6J/ZV8zizNi21USsLf1Zvkd5SPo//ouju0R9+4tNP1/LrS4h6B8t4
dQ8lwY2g7LNBOI8/2YXhe0uyUfcqF+nQ73m8Tzf4IH0tHSV0jB5Tf8xjCbd8
zraQH8iUiN+amjWPyhK9U9smP0Ht7OAP6y/zCGbhlyM+fYLU1r0mQp/m8Uzu
43lppSzwy/YaLU+ax0bj4ZIzTr/wfPRfn4fv5vEPo/yVW9M32HdLSET19TwO
mfXF3mNH4poTl76Ox89jYLmdpva3JBjala6f+GwerWb1Cl8pZGDBclafWdQ8
Nt3l/T109T3E9R+5v+rJPMZt7xTqln0MLgUR6wuD5vFFj1dX8dUEMEjoSLvr
P49XJmWb7Avf4w4PmSN7fObx0P6cXeYi72DOzLWjz3MenZbdwpazcdCoXOAa
6z6P/N4Si/cs/oOMdatWG7kS5zF4Phvk+BgCJ89+WHZrHqdevTObcv4KF8vf
af7nOI+0uNwI6lAqqidNN960m8dvFYVaH/1+gaCfxs2dNoReL57aNe75DyYu
Bi5vuzCP+7DFZ+3RSCzWrH8VbjGPSmy9lTc0suCliITaUbN5vDYj4LLB8Dvc
YVyrZpvMY07t+6I9176DUUO23ZcT82iz3fzthFY4yGRyLdrqzWOM86GlZ1Ef
YCnMKFb06DyaKgV7F9pkQ9u1eMXaw/Mo//zr3MTTYvh2bKgs4OA8Cm2y0P1l
nQ8hO5UuHdw/jwfOV82+GfoJtkterBnlefyU31ymulAIml1/I5MU5pFPd9BE
4gzCxp9Cu61k53Gzy4e8p0e/wvTzS4WC0kTeJ5NbJJLT4K9rukXZ9nmclUmK
8gsshUQTFtlryzweKRp+WC5RCh7yR0OUReax01S975HyUzjNH7ljVIjwe+zt
+J1lWSA30vHzlcA8qmsKRj48mgXcJTKnT6+ex1qdiiI/4W/Qleg6sXLlPH7N
0bhXN14I2d4Ffvnc8+i1rWRV0OZyiLBcJe62OIcJB0YK/90uAof95t93z85h
3IEFEV+hMtAWen+ihzGHzaLOIxFpf0CUPD34lDKH3eLrGOGtvkCp0vA2mCbW
+wRwTgSkw7+0QOGlsTncINx/rn4sFz48rs/IHprDzlcnPkcOl8IDW4lj1/vm
MG/zi05pvTw4q+3Yva1rDjsqm9zN1nyEvRI5d5tb5zBYSl373pNSWDnLtS6s
cQ5zZEel58Jyoa/FKFm7dg5PnOiVpPYh/Poef5hZOYe+gndcr6cUQUzUUEt6
2Rz+fKnR1WP3C246KTnbFM/ho2u3MuPH/oKuoffKzQVEPd9TWTVCBbBlV3li
1c85LPEpjlJ4gcDkET7glzOH8T5/ptovVUBt36U69W9z6BxUp6D49hek5qdf
m86Yw5tf73BW/PcPHr1kcX1IncOYkyoL/WK/wfLe0RcWH+cQu6yFX+p/BxWz
SOV1b+ewfFODBM/RGlit3FlRkjCHrN56h9TAIhheu+vK/bg5rDAITjJ+mQP5
E66zik/ncPeDvKOdVVUQ97cgZihiDk2t33nKSVeB88dVe16GzmH0xEtly7W1
oP/IvMTkMbHfgSbWgU/lsPPieytevzk8The24Rwsh9mDJNqvB3PoZmd+8M72
EmjafPCJy/05XNmRyytxuwoy6IFSMnfnsIu/y7M8rwge19fndbrMYYRvmMcq
1Ty4+EXibPTNOZRSbeT1tS4H9TDH6ePX5vBy8+6t387UgOC1nMB52znkaoxy
WVeIMK67bGvWpTkcmdE1av5ZAUU7jH84WM3h8qLL3qIVhZCwGH9S4twcXk/z
2d32qRLcOodGGk7P4VX5Ep8x+k8wzlXyCT5J5HFx2v7azVKQfu69+bDhHPaU
x3W++l4NS7fLM2nH5nD16qEAifB/0HpSWD9NZw5ljwZ0et1phK97Lvdd1JrD
gM4ZeXvHegjly/AQ1iD0cheJ3KteBVeGWYKVqnMYosjToBVXD4eKj6b5KM2h
feDyFPe1NSCcGKmjJj+H+SULf9dV/wGSV2f7xC5C/ynryXNGpVBmscv1reQc
7jxL3uB0sw4S1dxWmW+bQ9u/91fkfSoBjw34frX4HLZwlHe/Ff0LpjOrNIs2
zaH0DVuXoaQmkKsyb3TfMIfnVf+s07OuA5609zfk183hFLPpQfbaYugOJPEM
8M+h0ivTgwOdlZBz5eCrON45rHWeDi6VqIVweKxqvIyo9yAieZLVBA5bGqq4
F2Zx0/TknWtdTQAcCbtc9iy+yH1Y0ttYCyItjgtO9FlsuS2+YnZXM1Czcp5L
kmfxvoSu8x/1cqiMXKbYPjmLHWk0wb5VtfDxpnFZxOgs1qWsr9epqwdvgxcX
dQdn8X3TOpkPQw1gLjPM5PTMovcy1fj9DytBkUc5MrNjFgNHE5Y9l22ClX3e
u+xaZrHc7STwpFRAX145ijXM4vzMjqLIDZXw84WwRV01Ud/QmovZVAkx7pfJ
gRWzuDY/bWlxugFunMkI1vwzixmrmos7RBvhmBJ7O6VwFrv2a2oqa9eAxFrd
n8l5s7gq+1rWiqVmYIxHml7IncUJE21x+1utUFvWOb4+exbfReyQdMtshZQP
u/z+Zs6i4ypal7pyKzzydRN7kD6Lif/89l9KaoTz1pi1L2UWZQRFoj2v1sO+
g6tPjL2fRcWfQl+FK2phzeZzg6/fzOLH69bqJTkNMER773Xm5SwGvVHRSVP7
BwV1JCH+2FnUHpWtsJmrhdjPBzMKomcR9wp1H9WqB+fQx7p3wmdx2JLtV328
DvQdGrpkQ2axJm/xVD2pDXbobr3bGzCL1TXBG4ePtcLs9utrn/vOItddlYG1
UfXQuJCTZOg9i38rJ064GbfA545lh7k8ZtHS1FhTdm0LBP5n3JLjNotZ51pM
zKWbwfrZi1s3nGcxtdgn8cXLZlC/Pbxix41ZFBmrOSjR2QICJ5UTW+xn8XJK
7p/O7FoYl3ug/uTKLIbezTRe3t0IxSsranUuzmLtJ0naW75WSBgSvsaynEWh
Ec/X0jOtcKfoMtfns7M40rHguOp2Bxi9yYi/YjqL0gO/g+03dYKMF1tJxHgW
456Oylg6t8PiOd2Kav1ZNFW5fp3/bgO0qUbZ+OvOYnIcd/eRyx3wdX0X54D2
LP4RvsVz4WsbhJB2xZA0Z1Gr4prm0K1GuPLPTe6jOqHPtVcOVyRaQTMViy1V
iN9Pfxte8b4DNgauthLYO4t5npeMT59sg2mbc7RSuVksTKh4cyuwFf4c/hDm
KTOL66iQMGLXConiM5JKO2cx/ManlS9fd8I99sG8YQkiHy87KTyjjWDa/Ngs
QZTQs7DBxXGsHuSyGqZObZzF+FeCzl/lm4AncmvgivWz2OccOOAx0gRdN65L
5K2ZxSM6Hb1KJd2Qrf8j5zbfLLoqiFOsxTohQpr75K7lszjKuWgZz98C9twn
R7qWOHhXap13a2ozaPe+eBgzx0HLm1/HNqt0gEje8CZ9Fge3nhaQvfCqFajx
ypkLVA5q25LU7St7oPLuA73vJA6Kl1nVFTv3wofTFb3XJjiokhK9xvpaKzzY
u9Fj6wgHzcXYN53VOuHsGhvBpn4OykQvj5M/3AkK4xmpId0cjD5q1VJV2wEr
y9ja0M7BeEZp5i1aE/S+122nN3Hw6KG8CzDbDD99om5/quNgj6Jqu/X9Doi5
0MV/uYqDCtUBYnryXXBDY/f7jeUc3OurfNijoQV0N905+K+Eg6HBGW5CB5ph
Cw0bfJGDI7fCX//1bQdm7eob+39z8LVCjk1MTxfUZJzjmfrBwSGv3JTGgW5I
DfmQ8C6Lg41pSh7n2zvB135G5dwXDp5+vd12+HYLnD+qWbXmEwfrUl3171j3
wb7tQVeLkzioH/1b2/1BL6xeaJi/946D+dPSlEjBHhhu3/pc4TVxvs0bDHY1
tUD+j+sKg/EcvChieEMgqReeP/3xJ/4ZB/PuXZLX0+gAZxfuiyejOMjz/IvH
nEQfGBifZPI84eBZA79RUb9u2CH3MuJnEAf77RQnb+h1w+yKERlnfw7KOgvK
hezvgsZBZZTy4eBA2NVr57b0QUbhg3MdnhyEkvlZRfF2CHhdMRPpzsFTkv2T
MbadcNFzY/AxVw6GPxRRiT3ZDfvP2Wyfc+Lgb7W+2/WObSCo+jn3qyMHTcJE
/lqe7IAxQc4pezsOMjWG9N//bYPiad1xcRuiX5EYncm1/fCyMupR/QUiX2S1
mJ3n28AtpUs0yIKDHhrntkWeagPjgN1Zh8w4KLjr8er3P/pA2uaOIdWEg+0O
/1KvG/bBklbhQMoJDnomqw99dOuHVrE1XtZ6HPSePda+o6gTvrHOCQkd5eB4
6HJJWWYfhDR9SC8/zMFid6dSiapuuPJt5ujDgxycXN6zVXR3L2hGaHap7Odg
zv07tan/BkD4RtCdcWVi/z1PLB786oMpvcY1iQocfC6Tv3R58wCUSW1LMpPl
oDTrzrfHpgPwdtkNrVXSHHyj+fdBjFIXePT8aMbtHNygTLrjrd0Lp35z37q7
hYPPVv1Vv/5fN8jFn1yxR4SDIaoL72wf9gD33Zdv+oQ4WP7saftqahd0mo7s
jxUgeJDZLK1P+JujuK/2xGoOThyMmuv43Qvhqx86LFvJQQu+I3KS2A8OYxVL
P7g5eC6KtsPIoh/gz8b4m4tspN5NEQjM7gHR9zbEdcJG0dGoWwKafUB5+Lm8
lcHGG1r+/z6H90GlFedyOIWN5KNy67xnBuDDgWOcI9NsrDGaEdFr6QfvjdHR
7DE2Cu71K5P+2QdnqV2yX4bYWO5vzH1Fvw8Ua3cX2/axsdF2InbuwBDwZdw5
L9rFRvdJiqS94BD0BRdSa1rZ2KKZPnmkvQ9y7daEBTSykdJX6vp8sh9ijlhI
Hqxl46eL3xMPfuyG69s+/p6pZGPKD81NDHIfHJ2fOZNUxsYFecMNux8MgkS7
5tT5Yjbu8vvt+JV7CJg5QQGCBWx8uwvXPtHog9qYxi1lP9n4w7siUYS/H1Kc
t+V45bBxBdOoVyp/AB4Z3TBW/sbGoNdVHyqZvWAp+9/wSAYbb1Wr2dmoDsK+
FTwPX6US6+VKea9fGoDVgyc3nf7IRtWSFKVL8f0whC+/rHzLxsm7+hMXi/sh
/9XI8fwENvqs/sNYEhuC2Pv7el3j2NitoPGh5sMguJg/vLf7KRvNj55eSF3f
D/oqlQI9EWw86iaupKLYD9sFN6U+DWXjJc6sYtP7XpidstE2eEz4YbU6r5eo
31DxuW3xERv52APxOpeHIT2Z45L9gNCfJ+HM4sYhCPQ/xn/9Phs3eWim7Goa
gIuXo99tu0v4bfJ65077PlDX6tZodmHjuzmTqjiRQRAQk20IvclGvWfBTnvu
DsE488517WtsPPU09HjjtgEoaizkZtqyMX2ne3XUtQF4+XVNQvolNh601T19
6sgAuIVbqNhYsTHEfufXz9eHwOj6x3+bzrFxFW9t7YbyYZDWI9tWnWaj8luS
2h27fliUPDT/6CQbA74KDfO4DkIbV/AzdUM26oQ+J9u+GIav3Y3y08cIfT4+
Ht63dxiCf237816HjbIBXyONDgzAlbgb1hZabHQ8w6t65mU/aN75j7FWg41j
tY+uvt49CMKmPBElqmzUPH18Nsl/AKYVTGTuK7Hxi12YhWvwEJStSihQlGdj
W6iY2QcYhsTREfOhXWy0tn66s+/fINwr3TfzQpKNJszyrcZXR8D03cMgk21s
LOh/VH/eZRBkH1Zu4xVnY5X5r1jRg6PAbbUp99cmNtb1yEhxrRmETvUrp1w2
sDFP779IiS0DkCP8ZUx6HRtDPUYMyH5DEE7h+HbyszHLf5k5V9go2NccE43m
JfiMdue76TwE2unR344vY6OXwsVEwV/9IBLcbTA/z8Lal0fnxUeGgHxVduAb
m4UHH9XoHxcYhkqdu54OdBa69p7QSz4xCB+2Fm2QILPwsYHBfSfiPN5za9Ib
Jll4sSFBb5fWCJxtszgaPMrCOMXj/p9Eh0Ax52On1iALzwandhSrjsLKGLIb
rYeFM8m6/20/OgK9tw6tSetg4WFZxlje2mH4eSL448UWFnY+sInR3jEC0bub
Dgk3sLDIa3KiQGAQbvBub66oZqG6q9hX35fDcHTghpNPBQstfd5ENVOGQQL/
41X7w8KbodVWzj8GgJHA82aikIUtxgf+pf43CDUeJvvf5rHQKvatlwvfKKSe
Tag5m8vCwcNFm7XWjIDvvlH71dkspC4Y6NyeGgYLAZWlwkwWmti2PEzmDMO+
qYdx7uks3Cz1aLePygisqajcK5/Cwr53x2lNxqMwlLSpvP89C3dvW1qfETkI
+X5XLse9YeH36KCq+5vHIPbSF7bRSxbabNx6WqZmCJwPzUZxx7LQMLo6/A/x
fz3R47K50SzUihPOPV8xBjuY0UVO4Sx0/5xTPHFuBDgN3ZaSISy8umXHm+ih
UWjMlKW2BbCw7kVloXrWKKQ/uRsa4Uv0yxS/P9M4CIGORTt1vVl4YaPPTJHY
OFgfX/ubc4+Fv/NT04t+DcJ+ScszmW4stOg+HaqUPwKCXEmTV51ZOK3qQBk4
NQJjXWR/sRssTNBLqArJHofCn4e21Nmz0L/9/GabgSF4GRucHXiFhcXGnWF2
P4bhjluTkeZFFtJfNh84qzMCRqe2D5MtWajJv2tyW9YYSCvcfJB8loUhXr8+
joSNwyJ/7sYLpiw0GrS79Mh5FFpHeL6sN2ahrS/cl1Qdh8wSk+N/9Yn9kpW/
LHiNQMjbhB5vXRbuzEm/nTkwBjYPRt33abNQTFvMZ/f1CdA8ryIwpsnCAv87
JJ7gURBS90l5rU7s/8fh8L/sIZgW+gdnVFjoG1WXlEUbgj/kTW18e4k83XXx
bLUbhjfVV1wK5FhY+XCl8afTE+Dx6QvfHRkWvvbcl/M8dAROBc2+ld3JQp2N
YkeKrMZA7upxjV4JQh9b4DE3HANunZj6Z6Is9L5qmmtA8N0l0eNouJHIn/Sj
3WepY5A9K8vNtZ6FN5zNN9FlxiC89e7LnDWE/3oL0Q83joF9dtG+G3xEfku3
ZnY6jwNEr/23fTkLLyd/XOjcPA6bb1natiwxsd/Az+K3yzBQDJPmwuaY+Kxe
7grZfgz+7aI81WEx0ZqqynNyyyR8WK4lz6IyUdwiKdGMdwS8+oNLM0hMrD1V
MTjVOQFnC5ouXJlg4nTa7VOVSaOgkLCdsXmEifpPTBQOxY3ACo+b4dX9TDQl
J9Ce3BuDPrNcaf9uJl5K1jj8UWwMcpWXFxxoZyIv38t4Rf0xiFl3ypzUxMSt
fk/i99mOwPXJBNKHOibG30qUcCH21y0ffWxZxUTlIeXmR/wTsCVJZZtAORNp
j5kmTtRJYDzy+a+0hImSDgXv/V+OQ83FfyaeyMRTp4V4tX9MQorm5rG9v5n4
suv5l5TVo+ArYus7/IOJF+a/vLYQngJLxheRhCwmFqbksERmR0GlYfbrqS9M
pGfP7a9onIDVmccNVnxi4jr/ZYk3OsdhMCym/3cSE5uc3ERvG05B/rWe+7ff
MfGV3Ja58b8TEHtMbsOu10wUO6p46L8rE3Brp/unrngm/nI0mlwePAH6S0VH
Yp4x8V3u4bFXGyZhR9faTr0oJt7YU3xLMHoCZnMt3RbCmHh4IsLa+8Q4NDxP
Wv09iImRydezPYNGIcOV8uGaPxNXT+6Wi/syCgEmWoe2+jDRpeEK46zmFFjL
hzQ1ejJxj0ltTQ1Own7+5psh7ky0dZRcflx6EgRGtvOCKxOVrnWcPEyegLHi
m6/pTky8Z3HB7lvaGBQl5qp9cmSiwIXSovCz05Dgvbzmkh2xXldyzU3eKXCz
PGW/0YaJDyTVH+CvcTix/9Vi5QUmCom3Mn8tjoO00FisrwUTj5+8rvAkfQwW
Z1T27jdjImmUSuLtnoDWKp+/kyZM5DnNqA57Pg1f0/5deneCibIeb5WSTach
5PFmtrkeEyUi/New/5uEK7a2UWuOEv4U3Cb53B+Hg9qZu4sPM/HDeaaNicsE
CEvMFd47yMRvp9xWP1SZhinOcUuF/UQ+nLOCDrZOw5+WGMqAMhOXhX0Vdbec
hjffe0LiFZjIcW75E7Z8Cu5Fye08KcvEv+ungoOtxuGUk/svHmkmbkrpiGB5
ToOsYfHpn9sJP19ox2SLTADPrnWTt7Yw0YZ/c/pyngno5DnvLyVC5EMk8uMZ
1Un43pck3iHERM2G1JH0XZMQnk/5HilAnM+BYnWkdhLsX2oZHVvNRPv7JrOv
3ScB7oUMza5gYuqXW5evnSeBiFmz91duJjGvruQ+VBsHitKOjfaLDDSiSN33
cCNB5Vqnz+KzDHzwKGM8oGsa3k/kHqtnMNDtq7V8WdMEeP9d3vOYwsAj2+VE
R3ZPgNnHU+6Hphm4x+CJV3rcBCg8erWOOsbAV8KMqqcHp2HFxbHklCEGPrMg
B5H3TkLfQVWw7mOgZkW5B+/MFORu9m3d0MXAi/scnX9enoZo+j9n4oGOd6gf
s/L8JuBG/Wa+h40M/CxTrPOEfxKOfrF9q1LLwNUZRw21H06BeFjmgfFKBtY7
WzHTeiaA4TBX96aMgXq/GmPickhQo6vnaFbMwKrQOkrCymlI2fF02aoCBvql
We6vOU4C38WeF/iTgQcgX83XbRosO+X23c1hYKV5EM/5qxOwL9e9Uu4bA6Wz
S+Q+fSXBqufFV/oyGDguFJVhQfA7dHvd3PNUBqZ9nM7x+UWCvJPnn574yECh
lmvuh3lmIHZP8p5lbxl48oDGi3OuU3CLj1ryI4GBls25ZVq2U6A/rHXhZhwD
a2MPel8tmoDtxSH0HU8ZeP35d+bnDTPAedP8pDWCgUHtpqMadtPQ6LVDOjyU
gQHnV38zfE6CdAun/COPGahbMC78SHoK/NV+nmU/YqAVM87/zudpsN7AS/r8
gPCrOM9oirg/1GdOPba9z8C7YVmnD/+ZAIGqV1tF7xJ+Z6e9nfKbhLHUsR81
LgykOP/t9ciagqJAVZOAmwwsKL/SIWBJgpdXfEc1rjHQ519mytx5MrhClc+M
LQPVfI3XFAAJjLaIiCRdYuCPV+63LtZMgRTH9ut5q//nyd/8vydTsNicqS94
joHXShKGz/uQoCVrru/PaUL/O23afz3J8DVS777XSQaGaqa9SQyehJCbT9cr
GzLwqPelTwFPyGBj0Js2coyBf7UVQ6RDSaAps+fIKx0GqoQL8YydnAIhnnsd
plpEPmxjfcJlp2C6t9h1pQYDBS1juz8HzMCfvHWr81UZmO/loxjnRIbEF+c/
uCoxcIF/f+yNn2S4556suVuegeekjghLbybBqTPUxu5dDHzSo/RUaP0MyCod
vvlUkoG3uU+wAq5MA/fa0OUG2xi4L+Lk1FogQ8d486tFMQaOTSqSfn8mQ3bZ
DrXsTQwUbxlUats+BREfnKodNzBQYlhD2OgvwavvT7tt6xg4mZ39cLqEDIet
eReb+Ak9dgqE5PNNgchB09hQXgZeuDt66vNpMlA2vVbUXsZA1ksBTyDyVkEb
K2PM09Hwb+qh8SwyfKhTvZTOpuMden1P3wQZvD77si7T6ej1JFm6pWQGzoRW
RW4i05FyzW7tPVESyDuI7K6apGPzfoGgfJiBFbpXCx+N0lGZ4XyyeDMZerd/
tVAfJL7f59Z0b6VA7sIceaqHjtx5kWVeU2SI7tALed9Bx8Of9Qz8DkyD439P
d1i00NHp/oYRKYKXI896f65toOM/9RPrP4mTQPz2ntMl1XTc4PDCvjtxBujG
9yY8KuhIOhsYo7mZAtVyJX6Kf+gY0PxPV34DGZJXCogPFdLxU86Kr4a7yeAz
dP77izw6qiWTvG1cyGBRlHzCJJeOvk84CZp8JFB+Qx1cnk3HGvZa/by2KVjl
ddj7VyYdQ4T2qf1amIHBc6HCLul0fBroKRq+jgJ5qi0Z0il0bHlama96mgLP
1u881vmejhbN/4XIppDhFsmpO+oNHV12ZWs37iWD3r+fd4+/pGMyV8dwy68Z
2J7Ku27+OR1tLzyQdEykACfANPlbNB339l16fXgtGRpsXh92CCf6FSy5UryR
DJ8Oj7dsCaGjjJ1P2cpqMviLqzk3BNARl5f8658lwwW278pgXzoq3HI8p0We
BrXmqkQtb0LP608up/tRYF2WyAHaPTrunDLkfJqchtGIq3WpbnSM4PTXimiS
ofDG12sXnemYMtm6lKtEhhf681zCN+hos3xD3Fkvgldp/RcV9nQ8isEl/Y/I
cIL7mbLPFWI9taDR8gUZpHp7K1QvEv4oDRwKb5mB+d97rkxYEvoHxPFwXyJD
S/y92cSzdMyZCa8rf0+CzLslMWdN6cj8wU7SJfIQfFpgz2pj4jy83csFu0lg
s9eqpFCfjsLSlddjkQQH16RYuevS0Xupw3P9HRJsGKfS9mjT0UF4kyNtaAYm
/xx+0q9JR7HqU/9dV6dA6ftQqTh1OhrvWDZyUooCr31a8oxU6JiW/Vx/zSAF
3C/sPMu9l45x/W/iP3+lgInGren/5OjY8ApGzDZQYfemX4FOMnQMrNwlZkqi
wDIa71bJnXRcZ6h0RIrwv6PW9EebBB3Fg+pW3ZahwveM1ycjROm4qfWSymZe
CjwJGR85upGO1gmPxVzHKWBnr+bDEaTjyszSQ4ZiFDh89NHmzDX/92fPmqKu
Gdi8vTrzKh8d+VymfAV3UIA8L6IvtpzIw+ti60NvKVDRfrWvdomGx00tkVRH
hvc/vnoEztFwvWZUUA7hv9fTeUFNFg2XPpi1u8tT4IyLfhqZSsPL1I8kxT0U
kDd+ppNMoqHAmYiP5XMzwCvX1241QcNvqiPpalJk6Fkh77p+hIbuvFtXelhS
4L/Be6v+9tPwLffqcboGBaILS957d9NwRFCvYayXAo6vBTT3tdPQl3RMSXs7
FY54WjWONtEwjiQwUORLBfFzKTde1xH9JtJmB2QJXlVoPGeqaBgcEihYbU6F
akF4xVdOw/BF0UO2shRIng5VLSihoQpNe2qryQz4VLZUuSENc2W21q/ImgGL
lJ12sr9p+KCnMWg4kgLKAbcWen7QcNzO82mfCRlW2fx6/iyLhmrKX9p2ilFh
UGuFouEXGjZEpa/uv0+FPLHTZUtpNNwn4Ct/J4IKz1ivL+Yk0TB9u2X/0eMU
cGoaZ15/R8Ob6XelDRQocPybWuT21zTswv9O1xRRYVvEo10t8TQs6tH4LGtK
Bs71agx7RkPri9662g5UaNATtdCJouEzvyNlafFU+CRlR2aG0dDSP9lwQwTB
67JvwRlBNOTsG+ET1iF47ZnffsWfhju6z3jO/iKD2m/9n5t9aGjSD9/erKDC
uvhnptWeRH1ptQ8Pgqkweqdv3M+dhi35kkMmMxQoNJX3O+BKQ02+9P6PxRR4
oeghRnKi4eTeqSDeYILX1aVZHxxpKL5XrP7ZJBVOjAmcsLSjoXO26tjBLTSQ
+mM1uM6GhkoXMvO7vlFg4V2KV+kFGkak+vnVsMnQ/JAm5GlBw+kS86d1K6nw
xQoy9prR8PFT27uSVhQIOhCmO2xCw3iFTYF32RSw2dja9fIEDQPfL3v9zpgC
B6k7757SI/qt40uPuEABodpba1ccpeHElksBUEuFyfRfSb8PE+e/Y+Spe54G
pcErDt8+SEOry6eOPfYleLU73SKzn4YFblZdvGEEr0fe3OpSJvRe2WXBvZfg
ddvEihgFGmZo1nS036PA7nm1RD1ZGjZ+3RNqdJEGy9ofqS9I0dDuIrXkTDPB
a051bdZ2Ggoq3mqbWCTD9xjRa9e20BA33vFe30Xw6mzHtVWEhqB2+V3NKYJX
o2/xjUI0bJ/0DVXdRwUt2QWlEAEaCv2OcX3wlgqbVhhUHF5Nw92MvtIPdykw
M/DMhr6ChjHWPIdu3id4xT5OGjcNc44VWA31UOH9K/mYS4tUHMMPSgFJBK/3
PeQ2zlLxfFtws6gKFc6YlxZXMqhI/bqMsewSFeRVBK18KVRc9/OA7S0bCvAK
XqCpTVOxT7Xc7rQnFXqmUsImx6hosnuHpok1Df6roEm+G6Ji3OJ1WUYRBaKS
Ic+8j4obb+YMrk2lgqN/mNmaLioq2D25G9ZE8Hq5daqolYolTs+Lx4dpIK4l
GXivkaj/6p7ZOysa0EWdJRRqqfh97rPrimAaVDN/5QxUUnE0lzQaS+iT3Lji
ZHwZFQcW9S5KHqTBw6+nR4yLqaj2R+mQMfF7i/A3D3kKqKgh33u5KZ/g9frE
pp8/qbjs2Lyw3AsKrNLbn3krh4rc7dzBpkM0GJT005P6Rux/TvvL6nwa5HHV
9LZnULHjZ6FjCRcNnnWLekSmUrGHb5VAshENnH7ZCR77SCX8PiH5eD3Ba9y3
1NlEKsokc85FNlBg250F7a8JVGx+Oriim4sK7FMG7XZxhN6x3a9rCP/qFZ7f
Fn9KRdOiIr27OhT4tKqfvz6Cildf1cyJitDBf1T+/eNQKlY7psmczKDBhVKP
g4ceU/F2p1e7FrFe7V1pA+URFb+lOp92PUDM14eCN1IeULFoSXF/4UWC1/MX
eKzvU9EypynwgQEdCtVTEzbcJfz3MFsSX6LCC2G6SrkLFb2vbMnd+h8FXClQ
9eAmFa3WNKyq0yJ4rQm7qnKNil4OL8/U81JBKr11fsyW0DPMqnhtFMFrkOTz
N5eoSDGhdBw4TIXmq84KZlbEea5v3buYSfCq8/sP/zkqBgXtki54QIWgrSsv
4mkqktdPZLu5UODy3GnmnZNUYt5IuIXcp4NG25sIOUMqHlJ4eOLzKTpsyJmQ
6TtGxevOWVsdttJhMno/Ptch9OBLKWffpkPpLb9zJ7SoyNTaX9vqQIPXJ2pm
uDSoOLuuxvt5Lw3cd4sF/1ClYmSNyxmNY3Qw4bXfflOJ2N/cnNqqSszXgW+5
O+SpxPvg77oJYn4uw4VTrbuoCOaPuQw+ELwmGIw/kaTirvGz0d806fDd4/mj
I9uoaDu9TJbwAZ6c7Rdli1Fx0GeZppY9Dez2KWR93kTkQedh9w0aMV8F7hva
bqCi9T0rRQ1+gtep0gGRdVSMfm9slSZIhZlyQa8afioOLzM7272LCuVJF4QC
eKlonv364u5cOrzzS03XWEZFofGxJVt3Onheoh+dmafgoa9f3D4k0cHskHbX
RzYFj/mfPNHVQQN50Sd3ztMp2PS7OvHAejrwMlvXCJIpGNIqoRrYSIOeBsmk
P5MU5CRlX7aQpMJ/mc5aXqMUzLB4wfzaSYWoJ7+blQYpeOBYQaYchQ6Ojitv
jfRQsPKFWIJyG8Hr8TMrXnVQcPw/u6Qk4j0hLpn4xrSFgsm65fmtbXSgL03s
X9lAQY/3T+5dqKNDddf+2rxqCnZYp01VFFAh+aefg2sF0Q/u9myJoMPD2Jql
XX8o+P6fy8IxPgaccxOL7y6kYHRTU6dtBhWUTtkrPc2joGvxGv5wYQbwK2SV
6+dSULtva77dIToM8C9eXvxOwfidfZN4ieB1xIDzPZOCCr0LqBdHh2clz6Md
0ylokP35hkcgFZze9stuS6GgvI2j48wtKhx/oFDc9J7o98P2rD3E/bLt/P3z
oW8oaNjgJV6TSQP2/j9UeEnBzMrJU++SaVAvtD6M8ZyCQZsHZGVX0eET+YJk
ejQFF+SmDDc0ELxWp/6+HE5BX0ZJkbkCAy58op/ZFEJB5yPcep2En2pB2lP/
AijY/qdWpPkHMV+vPgl45EtB1ZTWM64nCV6127aoe1Pw2dPQqMgsGqCEVM7U
PQoOX1MM2cuhQfyss/F7NwoOLr1bU/qeDrdbfw+fc6Zg7q78UcF8Ohhmr3y4
9gYFJx1+6LgT97FU9JlNJfYUjCgREJO+zYAFp8QvHlco6GjlXRnvQfBqOHlc
8SIFtz/0jLA1pcOXXeq9g5YUfHf88JPCPzQIWu5/78VZQv8xtwn573S43F8j
YGJKwVO6Xp+HzhO8FoilLjem4AVRE7ORKwSvCfbav/Qp6De4PEpGnwGT97La
nHUp+L1V5Fh+EMGr2aKLtDYFNYSTW/WfELwqG/J3ahJ68mhILuumgvu62HdR
6hT0UXK5Q8kgeJ3s1ziuQsHNK3p9N66iwe5yhYY5RSIvm8yOlU/SgCvp/vVv
chRkntiMC59p0P7oD7eDDAVF4MiLSnOC14vrE7bspOCV7PayI9F0eKJprdIg
QUEZHmvtXuL3diJp/4JEKfjzPy6T/Bc0OMyg22ptpODe75+9H62mwaYG7Xmq
IMHHFTW5D0k0mPny5FnqGgp+Pbf2nYIkHcrD2uQv8hH53/ad9o9Eg3fXpP4I
LSf05b2S3jlDBc9jLtYVS2S8xfm+lXadAWd25jEezpHxVdX+htuFdJBfWhmh
yiKju5xrxt6XDODtOiMzQSVj6IG9ObqnCV5zEwsSSWSMOWS0zO8tMV+fT5qf
nSBj4EMTw387aRDlqj6zaoSMemSl0lgPGjia+AcV9pPxiobz9uvGdNCRr93m
3k3GC017/G26iPnKL567p52MpyS2iZVLELwO25/qbyKj/Emv0/c1GVBdnDUW
W0dG4/PKsJPIa3Lioq9RFRn/2J0zHaEwwMfbUJS7nIwRVfqbeHlocM4y9tt/
JWRsKbpy5kgeDZT2Dxg4IfG9rn/VfjE68AspDuz8TcZz5knZ6T8IXmfue7b9
IKOnoIDa7uU0+F31Z0NEFrE+8FfV83livqatTz/6hYxn4uVKTTsZ4PTY+ign
jTj/A7rHrhUMOG6b1vkliYwZ9x+O+N9lwDZthtvVd0R/EkVPDy0RvG7RWSP2
moz73Hh36HYzoJ7z5GNtPBmXP/f79Pk4A9Ja2g4FPiPjgb3sI17eDPD/LtV8
MIqM0xt8PmxxosOFKBcnchgZndP2ew0SvKg55fEmB5ExZP7V0Qv2dFhnyPfG
yp+MUi+Nn00qM2FUxmz/eh8y1mo/2fTMgw7I87amzJOMRvoNFoxXdIjvm7T3
diejpNW96PAaBtzOV19SdiVjz5K37Y6/BK8v/eNGnQg/2rJW8RL1Je/V7n3t
SPhvbza4w4gO82fEy0/bEf2f2cNttJMJzUoOl/lsyGiWZP7JXYjgde13dv4F
MlbEyC+baaZD0MRilJsF8S0T0fL9D8HrX0NZWTMypnCv6XutwwSNj7FFPSZk
vF+vXthHzI8NjwYsn50gY3FeKEckh+DVWpFqoEdG6XRPub/Ed+lBz9ClI2Tk
s72+73c7HV5vLtuZc5iMrnpqaxy56eBOX//7+kGi/+kD/T+XMcGk3vrM9v1k
PD8YqXMY6bD7S9pkszLhf0wYT8R2JnCFMfzDFMhIHa2+uvUZE9oddLboyJLx
40JRdow9E7J0w7OZUkR9lxuGa+k0CNvRbpSxncjHzM+1ca/pcHVRathmCxl1
gnwZkQRPWp0uDzaLkNErgzHxZJoBm3LzNlYLkfFvnab4tmmC12d8X/wECD2l
nMU8EphQftvs+IHVZBTM7P63nknM15Nve6ZXkHHiaiVabCbm654p9w/cxH7/
hsbZr2iQLOiyNWt+Bj22DleMpRDzqXKliQR9BvmFcjS9eIl5FJDoEzw5g7dr
Gvjqc4g8a6l/pQ3MYH6Z2eeNkQy4xarpu9gxg8tTQs2/FjBh+zf79ZX1M/hl
zZl6jUA6NFxf1FGrmMFEh53bkiWZ4C8V6/q2cAZnXTtXybgzQa1H4cPq3Bm0
lxvpLSL6G4370+ieOYO9pPGMdCKPL0ytlw8kz+AO/XWWym5MOLGaoWr8ZgYZ
v5bedhDzf6H0iV3u8xnMPLFao7KdCV8eSsVKhs9guCLFT4mYJ5cP5JVFBMxg
G7NMlO8fAzZQz7A4XsT61rQiPlnivk6f3GXnNoPWFSrjs+pMcLfzt6i7PoNR
zRahQj8Jf7eJh2hemUGXHAmpYQ8GtLdl/Uy2nMEnpb+1VxJ6hcUYTqw3nUHn
t0XxUMqEw0YDYg/0Z/Cvnk9uph0TyLyeJ8ZgBp/5849cTGHCe1zvfUZ9Bl2F
SA9cB5hgdj8to0BxBs2XuTfOLTKBV0WnW1ZmBt9sEnjqMMCA/6ba1j6XmEGb
Hz5l94h56Jjscphr4wzuNBpqTCV4Eb/M53xjDeGfSvWOoCwmVIu+TWzhmcGe
q/PUdZ+I+6xRvU5njoTqYgqDTf0MUAqv5fpMJaHq5BrhphcMGDjuoCwyQcJv
vXRT6gUmPONasvHvJ6E4n1WOiwkdjv+KjSG1kdCB/Pza9zEmcNwUSyzrSGjn
ahAbK8WCNIUyWulfEqrZnTRUZzPBatRaSglJ+Ma4m/Pclgnr3jHMEn6QsGCk
9ehpCwYUng8PXPGFhKeOib1U42KCq7D0j9tJJBRy2V4uvYIFUjV5I12vSKjV
5+Tz7htxHwSZbdZ/RkJZ6zbbGB8mBOlM6X0PI6FcgPr+TXrEfJ7z99jqT8Lw
SJvXeIR4P2eLp4V4kjB1j8HBaHEGvL71vZ1+m4RWt1sSHsYwwGT3iVWXHUnY
UPQstvM4C7gGBg7+u0ycb/nHwvPE/Z+V4HljvwUJz3oovh9OJXg8u+HVOxMS
Jl31mtBPoMMmgU9Va/RIOKeyGGN9hw4V5ToL9w6TMH/zltDAOAZ4+bUrDKqR
sMbtyt7PRQzYc+j2xZMKJGTWfhKpvsiAHgZf5E8pEsbMCVFLiLxGZb5FqS0k
jBgPK0li0OGI4wFypBAJncInWwtuEvNrZ932uVUkPGZFmVw+yIDkLgdTe24S
HuSObDi+hQnnYpce1XOmccFz9/7TxDzgPxWXdYgyjfsMHKpSL9HhN//ewZSx
aVwb2etPOkzMm5IyIaG+aTQ8dfzP7ass2Pbgou7D1mnMlIs8XVNPzJP9zDvj
NdPY1po1E/CYDn7k8CSzsmk02BbHt5+4X1U/Sbdg/jTmRKycZsqyYMQ2f8We
nGn0Yi+jChDvjxcSZ9VjM6bRySQsJ3QXwWvrlMOyj9MoPPAWvxoyYSEqIP5m
wjSK9llXnmIRvBpuqWiNmcYATdErfV7Efb48m3MkdBq7jg3lKRcQ93fBCbkv
j6bRg8f9QQDBY+m9wfOi96dR1fPlrBUxL92VvcICXIh+TpsIqNYyYPfkhrwZ
h2m0/5doLKzOgvaPn6bOX5rGpsFbP8U9WRB28YhEmfk0xp1/qv7kBAu0RDqM
lU9O41DTnT0hnXSYqb/98NWxaUw45retWI8F78L4M1dqTeMpuif79i0WmB17
1+uqOo35GzOrh5KYsHzpgGDPnmncbZci7RzKhB+5ddoGktP4dCJ6i9YEExxd
r93OFpvGE4MxRuI1BK/yXO+3bZjGHXafGS8I3qqH4xpC+adx7L/C65smCF4T
9/IwuaZxi28Kf60DE5Qs/6rYsKeQh/RK1qWLeF9suHS1amYKX2jdoW/JI97/
Vcxn6qNTGPP+3n57eSYcfxzx533PFColPHS5I8kCNsgw17ZMYcOzpXsFjiz4
xMmXuV89hVpZtOFVvASv38+eGyqdQqHH4VtPvmXCWqfpIJO8KfxqabrtFuEv
ygTm/vo+hRtuZb7PrSLe431bxqXTp9Blt6vh5ik6SL3MFo1+P4U19UuDIrV0
aDljZDj/YgrdG8JIdmV0eLx2yNMhegpPHBNSe+PCAo2/XukNwVOYrfY86yM/
EyZ9hbq0fKdwa/wlEFpP8HowfU3avSn8YpBUl+nGAhP6ES1h5yn82S13+TCb
AVxfOpx87KeQWsTUPKNM8Org+mbCegq9zD4dljRkwNUdq2rPnp1CYafBSAvi
/bOp891SodEUyon2GKmeJ+bjMw0led0pTNjaVKdL6O95sv5ynOYUstZKvd7x
kwV7+ByjuVWm0MQ57KFpFQu6i7iKneSm0OmL0A/eURZEesVT23ZMoWiCiZge
8X7QUVOS1BWdQnHn/yQzrFhAJ/09kyk4hRQbRestUwSvqZcCxPimUD3qac7B
UTqYX2FlBy5Not2OSdeN3Ezg3xI5TGZO4kPrXmfJVyz43Syz6QJpElt8ej2n
F+jgFFlw/O/wJK7c4Vusak7wamB+b1/3JLYrSBxrJe7zem5SyuumSRQ7zz0o
tY0JfnmBbXxVk2iDoZ1bCD1V3SX475RMonJ8psubFiaM7M3R6P01iUV0rvKC
lyyIHze6bpg1iXyX2ww2rmWD4Yehlzlpk3hXUX9my3cmzF/w/rf93STCuaSJ
K3Ys+LxJeD4sfhIj/CR3vOxkwaW6dHlW5CQOvGq7OqLPhPWhR62vBE3i6D4K
5EYzofRoZ3j1w0lMMHm2WpvIp/v/KDLveKzeN44ToYSSohQhlZGoqKSuBpK0
SGWkrCiKikpTlErD5itbyMre67L33ns+PDYPz4rid35/ntc557mvc9/X5/N5
X6/n3+OCo0+nUDVOvcfoDwP2Za6f+/lgCvm3rLJOzRF6tQ0X5TMn9ufz4/a9
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
UU7nvM9r3vd1Pa/BFdTZ/XluiG02vXVOORlRxaP7zg655S7ZZB/Ee1zcW0Uz
hm+3kvXKpnWXdEpXSPLo+wsNRe2gbFr/fmdk59UKOqzV+WFPTDaZdLj0rfep
JMmopE2OWdmkPtvzz5jkSvJZ5dkSxM2mZSOO6pr6lNOiXLNbhR3ZxFdATYFl
FRXtn6/ZT4pDgfq13Z02XDrdLJs2fTiH/D0WRA2byCMF2yLz7ZM4dMd94+hR
KlX0XjpA9vI8Drn6fd9a31NOq91t/fxXc2hgYWnFRdHv16quM+AYccglRibW
emwVXQkcXdN9lEMKt/s5nXeupHELmuw1LnAoOqwyNfNMOYUnRqttusWh4wFD
A46oVdGOLbdibZ5xSCnoxqKOA1wSlO/d7/OeQ+f1zQ8OmV9Jt45p/U0Dh5wD
XMqW6RaR5s9eL2E2h9bEuvhe45ZRokPmYtUq0evVOT/tVSumQwreJasFHLra
PCjZV66I+j07aXu6fw5NLIk0Fjjw6Mm0ZSOfKueQxpm+zv96SmhBmEJ44uQc
2tEU+5wrWUScFbwdrfNzqCV9R1HAOB6dyvokHLE2h/Y+HHl5sUQRDdxrf3/5
nhz6FOfbZ/m6nPzrt+ocP55DMnsUPb3nldGqs+ocj4s5tLB34+v83jKq7Cc8
GXM7hw7fOCBTpVRBl9wSh9Y/z6EC3+W3u98UkcqYB0GKH3OoS40rXVVTQqH+
phsWx+VQx53U7CFJXNo2d17T4Zwc2vVfSXC8eSk1x8q4uFXnkE7l0uEvtcvJ
dWPh1AhhDp2U1PbTHFtJGiX+KTzpXLLU3a68XKaS4s3Omw0ekUv6WX1J1iML
aK9gjbTu1Fxyv5CYoJuUT91XRr3atzCX8mlxULBmCT2Sa1xxY10uXVyid3Lz
qUrSfhzF+2ScSxJLI7QOo4iyJ7leLbXIpdjqynCVaQV09LPxeOnLuZQ6/3Pz
Y0ERydKMmJl3csnr/afK2xJc8vv+Z6/Ri1x6FyQtpypbSmSU0XPtUy4tCTwb
OCekiMprnj0JjM+lPPWZj20fF9C50ycW5ufm0lCN8ItzbpeQ8l+9or81ucRt
u2tzVr+c3rvI20ztyiWPmEhDa+tC2jCCq7xVNo9qzIPVvor+bPL9GHJhpOjP
tH5Phh4uIsfZ17a9npZHl9IHLTcIKqeJX7fwMxflUb7naa9firkUvXbivV/r
80i4fuqSbvky2lPAnzXRJI+utSgiJryIfh1KyFx/Io+SYz5eWc7LoXtt9y3P
XsmjTFnrMMmJpTT74mE577t5ZHdVSag4PJ++DdANTPXJI53k9nzZGUV05IH0
Ov7nPJr7XbCPa1FOEhML6sck5lH308rJCYZF5P3ez9kgP49U8k3I/Ek+LV1s
M/lkbR75x4ZrJOaXUkHK6qRHP/NowJSc0c7auXR2+8jD8QPyqbHBMvajUz4N
5dVLNo/Kp7o5n58ZjMynd5aRPsqa+XT1z9wMRdHvre++uYyW5NP7e/lpXNlC
qnHaU2m+MZ/SNoyYPiMul+yHaV5235dPre3Zb8x2l9KYFz1jv5zMp//qHTNk
XpVQ1Iz06B9X8+lJ0XpDqUEcMor02iPvnk+qOiPuWv4nWocNLH8v8M2ng5KL
SlwfZNHdnKWPDoXk0zDv3IhtYzk0bf/Q+bdE48ztrD/v0v1sSmmqyA8tyCcf
S+Xz4xYU0YHzH6wr6/LJaMruELu+Aurrf3XYwN/5NNjp2cHbonH57J7hZ51B
BbQwImaewD+f5qmqbdk7poA+3JyWf1SukPLfdrRdn1FAsnX33VcN4NCJ+fFu
H5YWUPSaL5o9FwtILtFdq3hTAeUpPL7nf6WYAg3/S5c8UEDjbxvI94ner375
nOMzThdQZldU+S7HPKo62n/QTvsC8j292uqSaL5f6Mp7c+V+Ad3/mqad0J5F
ox1erw54VUCT3mkt4qnnUrD8udqc0ALaFbr02rQDubTFa9X1P8kFZPrUa/1o
m1xqnzpCY3JRAc2fvPnXorO5dDO0Ln5zQ4FoPx019l1cOk1ZEXHQtruAqr5G
bVJ9UUSxmTckfAcX0vO8t1VO+/Nov/Fu7/SxhdSwa8HvsqnfqLduml6XViFN
GjcxJE07jzytu8vGUyE99n6v9OL2d9Lt9/3CWsNCmjJU38hHtE9k3n46+szB
Qpp39ka9c2c2WYy2iPSyKiSe7p0NdlM5JO2/xCjZoZBsufnu3Oo8ejVnyM82
j0IyqU8avnV4Oq2ILX8wyq+QrJ+d1iivzaXSDe/nrgwvpLgE2xTDPUlkV3w5
1yK1kD4rmn1X+ZBNw8w2W3kWF5KRR6u5fHgWfeKPV4xtLKR6i42Bg+VSyPBK
+4eGnkJSsV69SqcqmxoGx20aNkQ0T+cWF0oa5JDzo3stS1SLyLD886us5ek0
YdKhW2azimjJMc1HRi1JhE86mneXFVFw9nP33MhUMtKTSovcUkSVh3Tsrnmm
UFdarnn1oSK63pC9R0mDQw92vZIdYl1Ed6V8th7Zmk8za6z95l0vIu63iJT0
jjxKP2VgcMCziCpk7/7M351Npr3KNTf9i2hn0/cJ/U/EUX+XWvvgCNE8HuAw
d+MEDr1UCVcr/1ZEG+UvSL9xT6LFvs6xMqWi1/tkfPzypjQqmWW0f3az6PN8
HB7jrZlJZ75M/bu7t4hqLv33uecFhxTX/vZyGFpM7QUD837KJNPb/G+Lg8YX
E3L6ZhgbJ9LaQ09KCmYXk+SLxoz7+zOorvWYrcSKYrq1s6jp2oR0unph8cjp
24qpqGPGsEO3kmj8ALnwbYeLSb7QLuS+TQpFeJTtuHS2mGTqw6YdHJVOO9WC
hH5OxfR49sPSe0mJ1BkkmoUPRfPgloVvgXckuS3apNP9ppiSF8ZG/vgSTTNS
VDnqUcX0c0H42hxOOiVtazu58XsxXVKUuz33ZjId5mKoTVkxTarLXvVpMod6
Le4GvWgpppy8olmt5en09PeBDWl/i8ndWulPwLZ0WuSk3SSQLyGHld/+coak
U66SpMs4tRLa1b0n52VPPJ32zpm6WqeEvONqVv5ZlE2DZvimnFpZQg9fnh+G
qG8UEHHG7Mn2EtphZ9+2aH4irTbQl040LaHtKXFyKnUJxOUMf9VyroSydSN3
uG1LpCv7fqwYcaOEDksoyL0KDKWRTaG8ZY9LqHDHqVudt6MozMbp6rG3JVT+
dN/tl7+CaEf/XeM9oktoRP6JXbujU6j17pSYr+kl1BW0etyfrAy6Ne7X3rry
EupL/bV69ORQmvQ2tUehrYTiDc+tDW5Lo8R5j58skiilKwc/2z5CJJkkHF14
WLGUPngmPs/TSqCezYuKbov2CdO6Ccv7h0TSk7JBNuFzSung1GHTS0eF0Zyj
pco8/VJ6G3/qwcjficTpDAwZtLOULA7u9J++JJiO2V/cNvdIKWWsK3IUSgTT
QPmNfJPzpdT7ZvQoX6ck8n867p7zzVLKfKn2fNWoBFo2tXXWpyelJBG7UM18
w3eqDInJLAkspTd6BYPMTBPp/PI7lv2/lpKe2d+HasbvSCVzv9zMzFJSv+yR
bP46kT7smR24q7KUmkJNGp6lJ9OmOol119pLycNbR+FlwCtqPsOpf9uvjEoH
hznznH3ousRL5zylMhrRv/919fI40rhtNfmvehn9LoH/rfen6euolUlTdMuo
XUpdZXnNPTL2G3Z4y6oyuv31wdr/TiZTt06N5IVdZSThtnPWupRkuo8Qn1fm
ZaTwZMuwA0I/0t5wfVmmbRlt6rG6YbX4PaUV7aj86SI6ZzUrFNTOjqOjppMv
q3mVkb7VETU9y0SS5HeNXR9URrO/Hy87YnEVLy6nRFvHlJHDivVhk2d/IRr8
aM/zrDKa5XpM2iQljooemv9OEZ0j9epPHcnUj6JzGgsfdXSUkeNTrxl9hlEk
/2ng/DFS5dQ6/OSsHctA75eW5OsPLyezn5Kbsgq9aUPaW+sTk8qpYOsyl3r/
CPqx88KwR/PK6VJ9ZtojPV9yrF7/OW51Of2tLXklZfySxp0au6XJqJxyxlja
8PyiKfpPc9vwY+XkffSlJ8/kPrbf/Oqmd6GcxjvOc/61PYAEym5a5rfKSfXY
yaRtHh6493Jf+r1n5XRcuUHfVSWSps+adTz6fTmNai3J/Tk/kr5F9w38AdE5
R+65TdZePxxak/1mKKecxj3lH9Se9xgS+S9WL6gqp2cve58aPg6A98HTtQcF
5cR/cmREgPtHLGhdft21fwU1TFPVfh8TQQV2ShqhyhVU3c/71GnOBJyUrY6v
mFxBJ/RrnsnOfkJDPYIPDlhQQa2L9L/UyYXCf4KjhM7aCrLfK6lcquQPg6Dt
3sZ7Ksi2ZbqX14yHqFk4Se/68Qrijtz+YO/aKLqU3Fn2/mIFLQ4PCyvyCsKY
bckXim5XUIDRwu1Gxx5SSKXnaEnvCjr+sm/754UXsM3iSKTmxwoyOboneKdN
GHX8mm+0I66Ctg958f3ylki4XB/w83JOBYVl26+e/9gP05SKH7ypriCnHKv1
32oiEf88YG6OsIJynx3st1EnGAc07XJ7pCspruOLk3F3MP0OX2c1aUQl1S+c
sD3hoB8e6Y9R3Dy1khI3PDqxYG0g5nGaPpxfKDpn75p7+lFtIGWZfNn0cl0l
Za5fM2aoSzRONN5q+W5cSV8t3Uc9tnxDsjYmtzotKins2wfXhq2eeC01U3P8
5UraNtTlq79VGPTv/v225k4lHZpea9q99BPKx2aZW72opJLThultq57ShQBv
Wa9Pon+//nVAUqU/hs875ZcUX0mlQxUfyTzzQnD8MoO23EqqnHdUwWuiCW3Z
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
Wlc6eOucvN6vMwf/A603Yws=
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{524.7999999999997, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.9633157200640128`, 
   1.9633157200640121`}, {-1.5593014413965276`, 1.5527923297071515`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772814461911932*^9, 3.7728144670320024`*^9}, {
   3.7728150422658315`*^9, 3.772815056560614*^9}, 3.772881660484823*^9, 
   3.7728817308389907`*^9, {3.772980431215993*^9, 3.772980435794736*^9}, 
   3.77298147334299*^9, 3.7729815064903617`*^9, 3.772981540251092*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"191e5b7b-a68c-4887-bb9e-d4aab5ebe924"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "+", "0.5"}], ")"}], "2"]}], "+", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "1.5"}], ",", "0.5", ",", "k"}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{"2", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "0.5"}], ")"}], "2"]}], "-", "1.5", "+", 
           RowBox[{"RandomReal", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "noise"}], ",", "noise"}], "}"}], "]"}]}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "0.5"}], ",", "1.5", ",", "k"}], "}"}]}], "]"}]}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", "data"}]}], "Input",ExpressionUUID->"d6ef9274-ddef-\
4c5d-80f4-c039dbdf6b8a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Circles dataset", "Subsection",
 CellChangeTimes->{{3.7729817128894916`*^9, 
  3.7729817151863847`*^9}},ExpressionUUID->"6b2657a6-e234-497a-ac67-\
6a8995513b9a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReIm", "[", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"\[ImaginaryI]", " "}]], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.7729820167400913`*^9, 3.7729820196831894`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"c515ea01-5154-40ef-935e-51cd4ac42277"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5403023058681398`", ",", "0.8414709848078965`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.772982017298565*^9, 3.7729820199026012`*^9}},
 CellLabel->"Out[83]=",ExpressionUUID->"ba1ba1b4-ef56-4146-95d0-2db48d54d2b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomReal", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "noise"}], ",", "noise"}], "}"}], ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7729820296934285`*^9, 3.7729820298460574`*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"9dda8c75-08f3-4333-a1e7-97d07853f843"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.07486697985001783`", ",", 
   RowBox[{"-", "0.061170585426958274`"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.772982006305975*^9, 3.7729820302868366`*^9}},
 CellLabel->"Out[84]=",ExpressionUUID->"4362b80e-f202-4922-b02b-3c413c450eaa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Standardize", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ReIm", "[", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"\[ImaginaryI]", " ", "x"}]], "]"}], "+", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "noise"}], ",", "noise"}], "}"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}], ",", "0.01"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "@", "data"}]}], "Input",
 CellChangeTimes->{{3.7729817270905247`*^9, 3.772981762898815*^9}, {
  3.772981804814736*^9, 3.77298184974158*^9}, {3.772981879898945*^9, 
  3.772981937920809*^9}, {3.7729819787765656`*^9, 3.772981995606598*^9}, {
  3.7729820358878946`*^9, 3.772982039576032*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"51be7a05-f3a5-4198-abb8-12e35b0a5a82"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.007333333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwVmGkgVV8XximVklmUJKIk/kRRplaSCgllqoQoFTJEIopQImORoiQzhQZE
hkUpyjxf83wNF3e+V/N73y/nfDj77LP22ut51m8fWSfPkxdXcHFxXedc/n8f
FN8WGs/DBA2fLGLp1wrcb/6y/2cEE8RrfHkEWytRyYoaUdXHhHbdYOP1bsW4
f6lGgF3PBv9dK3xbTPPgzKdunlvBLLhfm3LrkFsRJLsbxovpMqEFonwWJ75D
WoDt0bM5TNBtiOHyo+dDoZ6J0Gu+ZfAfCJd142mFCi8D3ioVFmyzFXXt+OiF
/nEGzYRqJtgo9k4vOLfCx5Cvy84v2LDRsjTmfmkT8PO/pnClLYPH/bx78jve
QfUIpXlUmAnYOnR/rLYDhgYWlfNWLEOCHfR1nayHsyIFNgwFJkQ8UQGzvc1Q
vCNP29aEBXK3pLN8eBoA/QLUVm1kwGqprrDxpUb4ss2nkb+aBW0OT8N3DjTD
ucbPSiUZDAh4eVBjpqQaJNyi/vSnMEEhY+l84KqvkKf1693YgWXIHLFLlSzo
gNx1DWsmHzCgVVSXsJPYBFqxLFeBYwxYExLP9aqpC8pi+GN2c9Y/NCVSVPC5
A75u4nmoXckCUrZjg8yxIbjx+efg1S46XDZL2nVrVwt0DP1b8FFgAL+5moLP
xh5w4GEN0Vvo8K/c/5GmchfsOJ6bJhVJh0r90u8750ZAM12cMtXPgP82btst
TxqB47F2jcmRTJDCf8GUpVHQrouQlbVjwB2psCDCuz5wmlFt8KtjAuWxI0km
bwJIimU8ixksWPNi9fdjMAwV2+LOi8YxIDXY/lTWnT5YMYke3zjzBURrqpu7
TIBg+Y9Ha4/RobzOdXeK1yQY3pC9Mc7JZ6Vld1vYrgkQL30W2L2fDTI209O6
swPw+jXbtfgQC9rVOpY0z/RDAvGE8493DNDTV3/tLjMBFrdlBKPqGTAQwEqC
/gkw9B9nu6+lg0I1ySNObRhMdf7zeFDFhOdOLlsb9o1DlHX5yTuvGVDt8kHF
sYwIm/of9sY/Z8KWLeek9pqNg6dJryPtMgOylOfE1sdNgwAP/26rQCao5S6a
/4oZh4QfWvVvKTQ467qUeIA4C8KOFYOb2+jwRV5x4GTXBExpwPbsB3Q4My+w
8rwrER5++5lUwBn/4ZFLMIs0DZX+wpLa3zj6GSgsyNs7D0lfXVqqHGhQrcCV
9GjlHAgbqbyviWNCwm5B9qXBCdhzxtFT8xAdPr6ajDr9egaMY5snAq7SoGnq
XluS4jxY/Ko2XdtNg6o/yXMS7XOg5qi7+UMcDb5IyToXbpyGqI1BP0JD6bCo
VXzFmm8asjctPjp2gQEZZu8DNStJsENrl/GPT5x85G7WP/6YCFxAuNL+iQ55
B3mqVhJIYFSod/C+Gw1GLm4ftYhegJ35iftX/yTDDwGm51/tBXjg/abo+iUK
iJwokjVrWIRKrX/OAk9pIGr333//zs+BR0a677QsDSYf/C3XrZ2DXG4r7clg
CtiQ398yDp+HrbNPPs6fJMNj/j1OzPoFCBJU0FmyokBuq4xsZ8w8jGTm+9qW
UeDMz6fCnhFLQGbv2PhOmQwKLrJHn5YtgnTW1Rs69lS4/uCInFnvItyMuRd6
zWsR7Pj3XD9BmAfL1Ssodq5LED2tP/VYgwp6F749LImhQXZ/+Af5JCr8J9fh
ZbqSCk8fitjwyJNhm/1HXu/yBXjItAlc5U2G7Tpz73s/LsL5SptJ2oZFMJPh
dVy/jwrVrpt5cuYWYK2b5KbsXBLUJ6+8Mc9Fg/NbDKk23otQZ/zKRuUHBa50
ti7rWZPgmbqH3UlhCoQI+hYGWFNAszRmU/kBGhwz+qML66mQ7Zk6MmFKg8qV
MncmxObhcc+tZYfHVMi4Zo4K8XMw2RH4JPkOGWbU2u8tbCWDnuWfq08OUmCQ
uW6NsRgJyhr5cqrGqXCRlKp2KZsEjYws1VIJKkxGbj8zeo8M3JfMvj0UpgP1
1FnxiQdk+GUqst3pBB3itZjKjOk5+K0XlnjflAG1uX1SBiZEkMw13zOhTAW/
XIfRlDOzMO+2Lt5Agg6nwu/ypTkuQFhDeMG5dVR48uNwKFfUPLgRJCTqTKjg
/T0xaeEiCZy83k/v2cWA748spSPWLIAR3z7vsmAqJO1KtrD1nYLGGfdzNM66
E24d741gzULzr8si23yoMGNn9JaiNgNll2ybW32ZoExrKQ6OIUHl7cV/dV/o
sDNZzYcUPwPXuydGjXsZMNWo9YvxYA5c33u/Jx9nwFU3mUOqf2dBxod5NHg3
DSzzXNS2VE3Cimn3mJO/6VARs2B4T2QSHJioXWTBhDoxmdZrzGlwPbzVOWUd
Ddr5c95kCMwA8enq9h+xNNhaNNUxShkDvaNrzZ1imPCjb7tIstQodP9NDRLw
o8GulWsU3riOwNM92r3HVWkgoxJ136RoBNzGtflWraTDU4rhDd2QUVBo+RL5
naN7hX+1AX/1pkDPk7vl6Q4WVJbdTnMsnwbzf7dLWysZcJjL315EYxy6VGmN
r8XZnHzwms2aj0OTJfObxRwDElM6zOVCxuCiSeV+tgADnvMMm9VcmYDOl9Vf
uvjpkBLS7b/jxSB8GyzreBPKAkr7DtNQy0F46hLQ9ZbIAgIP983pD2NAsVSP
x1I6hEXt+Lnp1AQYPy4VsCtiwaNXVwy2cvrCnl9806KvOL4r+3dfqDoBjgp0
2Ti4s6DhzDUX8stRsEvUu2yRwwajQ/dKnJrHwGHQ217yBCc+F4PP0aQ+CNFd
f3TgHhvmdMr6l6/1w+uo3MNb97LB9PPcyao9PZBJcgHXj2zoLfc9fTSoG8Lv
EfKO8LOAd9d8Xu7YAHTdqHKt5dSPm7k4sdy6F+7soDMEfrFAYWJQiu3UDuc9
/vWGyHLm59r1/HNzG/S4vSYYay6D8ToyaU/eJ0j/eSLeXpsBHrVJ+xbG64Gf
xEdmvGFByGOBpD+tXaDl4nJTOZMN3tlxhxXkm2C/00nRHKdl+L79uMBb+xKw
PJavNCG0DDl+BYeUT5dCiii36dQzFjBrAp9sdPwCiz6dYxscmdAjLhsw+PAF
MC8I6p88woZNRgl+VakNwF1zJ9i7nQXXnek2cUqJENRvvOWUGgv4VJorD515
C3Zbjw5R7VnQQj0du03kMxhnCK0drGHC6xKDisN/a0GoOr3bXogNxaX5znlc
jdA3kUJwKmaDiUCHrOC7bzCs06z+Y4kB6rHWK6TZgfBL8Nidv4+YoPfmwLT/
tRzUrROc1fVnwW9twZCxax9wt11A5EZbFjyQCfTQdzIH3vtcdfkFLFhSZCzY
uWTj2NBjLaxngpLXPaUw2yJ8anL0ZGsFp2/3K93TMUsGqX/RegdmOetdm54Q
WBSKhX2EZ3s3scHs5mvDz9If0I1vrcmGd2x4oiC5Ose6EQVZEXzlnHgTX7hO
ySd8xsg1pa/s8xnguWXCxiXTDY/aYKnQdhYIBOg4lcjWoj2/9M4cLhZ8P17Y
sZ2/De+PGefNbmLBhI4c/3O/Rtz7k+H4JoAFyR7nOxyffEO+1fNZrWpM+NT3
Z+hlTyuWh77pSbjChImnjuqyw0Vou9rC8NJONjzIoMkIFn/BvF/Rlp9WM8Gp
eEzjxY1yfMb2GH+0nQF2t6YO+du24X7m/k89LSxgE+2V/Xt78JpHit3LXCbc
Yf6ymOTrQJZo416jdCb4jX/8UHu6H40Pr3L33s2E6xGqfxrP9uGt/bu6erdw
3j+s0Zba1oLKVvbhoacZ4K79wJnwvBVNCOss2A1suHCV91yFTyvefWO5u5lB
h6Ml1WEmZt+xImaqZFibDarJnh1cw014Y80vp0PeDBDLzdF/E0ZA/inCdZWz
LBBk8P72Em9HreJDduMcfaw+l1nwMpyAg/laxurIhlfKUqYbRvuwP9Gbr/4u
C97AqytElXFM977ue5/DmYJlX+peCPfgfi5WuXQBE2RH1/OCWC9GXq62O+TC
gONecT1FKgOomRsp35dJB4PKsLjzH3vR6ZyWmwVHT8+8TQ6vez+AcXeqSgs8
mbCe/3CCpvMk0i50HlHnjN/qxR8gJT+Jt/7mf4glcfSWaXdAI30Mv4H1sQ6O
n5k/VWG1lIyh3ZzizmgDJpwRz998t28KW9q2un8IYoDD7VNXs/aNYHrFomCD
Bx2Gq9V/Cq4h4uJWlx/50Qwom34a8/vQDM5QSnRahmmwQs+uvDJ3BgOi7SfE
eFlwhT/lmc/nSVQbvGvXvEiHmthzMkkdYyjiJ7CNqc/htHhlg4FnM/jEvStf
/RwDzk1aONxdOY4KSvo/hcs53N7f6ryrmIi5/K0PR60YoLTqdVPRozk809Au
5sPhPJV3IaUSqybR+N3G/MVCDrcqWqmq1M/iR2G19k2faOBlyeA+lzCHdg/e
BB2/SQeh/LgAM91ZhPmaYy1VDBDiOSZ4KWUOU4f2plxepIHZvp2qJcEzeH4b
l4Avh0s6Zp7N6lsRMTPQb7TiEhUun00ratJeRPuf4gQTVyrckl5dKpc8jdxr
olNXhFJBO7HvPF/sDHaI9fw8fIoOziIl+UzveRza/EDsPR8DHNty9nCvn8NL
8hJ/KGc5XObaHnnWnIT+7SEjpO0c7uASvSL3dxZn1KhpgroMsN4s8q7LZQ5j
gp93JFvSoWHbyortCfMYduRg2vrjNHi03evKq/AF3DWoElPZQAbLXkPmvV+z
WFbL7xkrT4Ptid0ayifICF8kGIsNVDD1+SoZuZGC3zY/j+55uAQGA0z3RFkS
lgv92Hv2JQ0oiUL91+3m8caqJp7Lm6hwuvztrtty89iwclSHlUIDEfMaO9aF
JVyibxG5FEUB9dIXEhXkRdR9VGLt4kWDGkF1Cf3IJaRkSku2VHA48CWf1Yuf
FCxsqi2NMFyAXy8dL7VOLmAONWjFJgYV5FK3+FUPLOHPqNh3WjZUoBHMJULK
qdicH1YX0kWFwbsjdVKLFExUy/j46uwCfI+w3D23Ywkn3Y7EWtRQ4Pe591x2
y2SUaPze0SJGhVIfr9/7oin4xFM2M1tsCQ6WR5eGytDQJizkN+HUElxPWqOy
7TwddbSvT3Z2UeCWo8fkoft0TLkWKetfNA/HrUWyWXEUlHry9vBAERlWNl27
GqBIRSUTQlpywTzIp1gdZOmSsU0+4vqLw7Nw94w/cXgTDfVs5MZe5s6Aa5hi
s4cWAy81mc75eSzA7cwc47tXGUjM+BRQ/mwB7ELu+FVto+MfpRGFQ62zMMKK
/Kr3hIa5Lb93zMAMVAT3J788z8CE+gPn+9aQYNXkztzQYRp2h648cL9wHi5P
mxkF1tOQPXw3scZ9Glp/OfGc8aNj80T2o6wbUyBLClx/4RMVHdKJZBeraXjB
e/O0OZmCfzxzrv6t5Jx3Eib+aKbRUM67vHlV9CR4J2+KPRZAxU3uwh9unSTC
09onazZdo+KJ8T0vEzzn4LDEeNSDc3S03XSxK+noPDy6fo7XypqJVH1ZjWKP
edjHMHimVEjFkkh1RWGvOdB07JfarMPEh39C3/MUjwPpmovTlkM01M9YsH1U
MQaDjUXGp17TsVJ7uCd2ZgqEjjUP1VyjY88ZX/aKfCJcNl818nqBhmNmK56L
MydBiOLz6m0oE495hO/4XDINj2uufNYdZqJ74TetA+unoNtmujWQzcQtRhsL
az+MQGnuK8/+FWysDnAbf1QxBEq1Eqmz61lY251AiZEchLZTAQJnf7LwWeX2
Y+Ic7pLoTe/ySeDM92zA9b7MJBhcKxvsOUVHiZjzC9rPB2F5cvsRIuc57XUc
fvsyBIYh66abIpnoV7/1gunhPiiWrrkYw4mfR1lg+kr1OOz+HiTrfY6JVprD
UhqBBFCtny/8fIyJO7k7RttO94Gi0ZOLvzj7q/S4U1d3fhD2Lj9OYL9iYUeU
3I2uv53gK83tMeHIwCeKbo9P7uyDgxcHR6Ib6biL+wTvBs1hOBXV05BYw0Aj
0/0Nso3DYGCqlH7nFR0fSGgdHpzgjF+n7bDhLQNLX//+tfi1BYLGN+jURbMw
vVVyjVpPL4zKl/+qcWfh8XMHHVSK2kG3J/Z8DCe/h2tG5S++74CbpPfuvI0M
5HNYyHW91gtl5RWPxW4wUGXU7KQqrQdW5WWb2YqxsTMjnzvdmQDb+GP+WEmz
MI/YXsP8rx9uiHrN5VQzkbxjmV9iphtsjFrNRjh66AztqCFU9UCKPF1C/QkL
9Tb4azvotkPnqW8iZX9ZmL9S6tqSQA3wK2SLHb3NxneJbU9EletBXKSQmN7L
wg2rxoVWuubBq5beZoFKJsarlg/vSG0FkbrAR84TTKzd8omvc+sz4Jrjyu1F
Fm4/kFIorfEArhie5x89s4x/tMu6OupNQEoqQynyCwvvuGb4Ee+VwxLJav7s
TSY++rU1KZxWD88+O5uqqzHRdw8x0nLvV6AMudgt1S6jQuexoLimOrCy+fb5
9AALDTeHXBIXTQAfiPZOqGagfs/3vRvu50LYwvXKVR7LWIkGKQcS7cHb1DS2
R5WJZo2VVIuPd1BD2WudUQ4bb42pB3ncfosQVuwcvsTAhuysLSzVD7jvLbl0
0pWJcu4RtnyH8sD7oHzVb2DhFDeZ+puSjQW/XSW+G7OwecfTbKrVa/x63GWb
Jyf+p2MXjk/bVqOSetvK4H2cej2VpuqUVIoRwe8KvtQvY4aK05D/iyL0LVhp
65W6jL+5JLaTDAuQrqwqf/oLE8fXvpScUCnGlosHX/33iYWn5YP+bKj5gjqZ
vTuopxgo99ffskShE0eK/QgNpmzMusLz8uKRUjQoSuTrvL+MNZ1RDtu4EHu6
5ZovpC/jChdl6W4OpxW9NLaIWMVCxYagRxO2HTj59dV/Fd8YuK9+vmdnQzsa
r9Aa8o1jYvKtQBuDhF5Unbl0P+s1E9dXtRSJSdSiacnUbfIaNr659u6ISEwn
Enh/bZKpYKFqUORxNm8TmkqOqj1yYuDbAJOQuMU+FBR+LejjyUSPDNrvIxqd
eOg2/Hd/goF9K/T/mkwO4b3RyaOPXzFQWqRD1F6oBaXX9Iq6IhNNx+QufGIN
o98FnbrcLBY+ZSoNxhf3Y6eLw2KWPwPV5oQp1rrd6GTct82qgI7XjhduDTAi
YPfzzOpGTjz568S/GPmNo/6llNzmKywcuL6OpP9iHL0Veyqke5n40fOt7v3Y
PhwdeBj/5CBHX3OE7miTCdxqdvzhLDenPywEqurbD2Pjoa4+/WI6thLUJl30
J7DdodJ0pywbf6g81zI6PYTH/U3qN/SzMG2nfLGB3xSGTjqLFB1h4IcD/x54
bhpC6YEvG72D6CjyhugeJTCG7W93rrrcwkSFisD7Ie0TOLdjdehrNzoKrr1j
a0QZQ9lDabMP3FhoIjT5mG92Ag9Mn/yxOo6O6z3aDT8pEbE9TT1+8zUa9vNf
qnIOH0HTLJLDLY4/W06FrV4/M4UN7lihs52JsHebKsV2FFHVefCGNQN/j6Q3
Bn0g4jOTvjNF3+gYWx14b834GPpJ2vTFhtPxn5QapYs+gXJ6xd/VjWjYsvJ1
xjJzDg/1PZJ2O8zAejX//S3hk0jV6k8a0mIi5VKuecHCFA7Vt6y1TGaikobF
1AX9WeS9Tr9YG0LD9rWKA80cjpmVjpVfb8NENSO1bdOeJCzy6ug26WegRsOm
qD+aU6i3tKui8jcVvx698ZIUMY1h9Om4A5z+KCStZfKJMIc+ulOvmhI5+zu+
Mmjzu2lU2hd7fjmQirsOhKux1eawO7NGJuoQJ798I4Ra0gxOmeEZV1MGOlwb
ED7L4UyKaKBoCC8Nv/w3fbTi9hxmEirXOmfT8cXNFefWrZ/BcCHu5M63dFwn
/N3ihDgJt1J+tvNOUFHDYHnypfQ8R3cfdl9NImNFup+ZR84CVpr5V05souKS
Z06DlBMZI1JCN7o40nHfcwvpdE0S9u4PXJ9pu4Sad4l2ezdT0JP+x0RuloKj
j2P1ye0k/LqtJIn7IYevOlJmHoeTMfhidd2lb1SszZh1mBOnYnTa5qXePUso
vSgY2ClGwRTxgeNZjYuYzC2iWTi0iBtyhsmDOWQ8brRgl/yUguV854+sfUPG
S/QzwUKaVHTfsWeDhMciJu3paTxrQcZVlxOlNu5fwGD74TLN0AW0kXW59W+a
gk+XnMWaNJbQkdHJPvN4EaMHd3peNKKiKGkxPpBOwmo+S2XyHyqSjldzW57g
xKea+crRkIpCua7jtWeXEFxvDG2To+FI7C6+ztfzqLBoYKWnTEdPM0uZJEcy
Tp6ii8GDJcy5uF+2IoWMrwfIUaMcblkT0mY7UULB6ne3XN5TqDh3eWNvZSwF
Nx0oSX1iSMOlyufyPwQo6E7SKPdtJGP6iUvxe/QWsDWpueVIDw3PK15+vtw4
i6GhNdsSOVxlFiaVpTJGxKEnqDyQzqkbiz3Orz4v4qV5ZUbfSxqa6UaMSrnP
YXSEZZhIHRXtB3aXSFqR8Jerh3NHNxWDNBKEA1cT0UnH2FaliIob1r04cPMC
EZcOpzqKLlBRnf+oePCGGexWfMzayuGEr4YnJc24ZrHD+Nma8iMcbvQMD1f6
RsJnvF/WbedwwpoK5vPj1lP401D0k0QQFd8V3ftqXzKDhRmndKMHOfuTlq//
sHACW/NSrv/H4TBjh4EO6u8pDJtxJlysZOBw5OoD3LdmUCtS/LYLi4HuNuwr
1fWT+M8hweQD0FDY7XRqK/8sCrQp6t36j4YhhD35j8mzKNQ7Ei40QsPgZBl8
8m4G3YvIvoVLVKzgKdh5j3cWXzwVX/t1JROvlB24cP/dKFZkTlvXcXxYlmuo
6soQEe0feh/u5PS5FcE/veQ4+fjAN/u0ZjXH9xau85zUJ6J22pfbHwgMrFyx
90Csxyj6XOPxOZLGROVF4cMxuqOofIKqbBHMwpV7J2+5fZtCvovjJqJpLLwR
/ODqirwp1A+waKWFcrjhgqVJFQ8BeSTSpSI4vkdyPENXCJ7CbSuUBkmWdPTO
MhUnRU+g9OYkyX28dKyh28jnBfeizeb/PkTpMHC2gOB3480gBke2n9rD6auz
qrpDHcYDaNXnU6rwhon6LkWK2wRGUeZcS9bHcToeSpJVtXUaQzf63b8hl+kY
evHgvMLvIfy0pl/ZwpmJfzUDLgQ79eHXCZF702EMDC/zedlV2IFh9lqnIvMY
+M9f6vR66348UzSiqerKQrk/QjuDNo5i+Axlt+cdBuYtNLUmFPXi6bVNQQsj
bIwx3LQcldSPx8x3u97kWsY1/6wKvdU68WaSDF61YCNXZql3lMAARlacPL3Z
mYExBrbnZJxbUN1s6MgfIscXfz9SdO//jNd2w7zWUwa+aCrgMd7ajskrz7l0
7Wejk8zAcFBRE14rZqx6vJaN96rlTtX49qKIYcLNEj022kwfYTVnfsVjR32v
rONwjbCQ6eV/piU49FmpWkSU07eeLizkexbjWlflqztDWCj5xrppPL8U3ycV
39AwYuP1mx9DYs+UIb1/fEsHsNGssIPQr92GpTtF5rRGWKgrd9PTTaQcrbdX
fbl9hYHb61Kyx383o+WB4qs7brFw742LfuM/6pF+MPx2odcyqk3WSITVf0WG
v6KhxDYmbhjMFV5saUAZ/7qxv6tZaHnwmLH4sa9odztEI30LG99+Wyfxi+cz
RkhXmrOSOByLt//Jy9/GVpuJJoPHy1hYRTAoGatDSb0tKTZ7lvEy6a6O1HI6
KA7Pb0i/voynVJoOq3+shumnXVIjnP3ccsNEjLinFm4Kq+trc+pPjGD4fOX7
dzi1cDVKPpeBWeOHB7lyGoFOSBm7wOGKTutfFYImCbC1WIgitImJFplSw7o3
vgGtSqmoYe0ySiYnpzYRmqEw9YHSnrcsPLT3TkH2s0yQP1Oqtf4mCy+84hMV
G4wDw5p/61kKbBRNvqne0fYdrlhcsDi/dxl5+8wvWIR8gvSWbCmVOAYyOyI+
sTY2w6cptybRxGWsP5JQ2nuhDHrrxT8dlGLjhjf1Nn+3cDj/YvHdCSoLN9qe
82icroEb74tjvVTYuIxZK44TWiFcbUdW1182qt0+eELsSR90Cwupluly/OTy
zp3VuwngfsChMkaPhfLEn0lzJ7rgyEudk5XSTMwQjddpnPsMoSeO7d2SwUDj
hqefSPf6QfVONdluiI1aQ29CvVQHIZgdblc9zMD499cKhI92wGFWcguboz+u
o1fupCUSwF5BNeQxx1/Uz7I34N528JVqMc+4x0Ih0aTbvsPtIPbM/92qk2z8
lOunk9M1AH7fTO/vqmXiHG/co2fPhiCE13eyx5eFblVacU/qB0DmdV0mnGJj
jvm86a6cTjD7V5nD6mbhuTabwSydUbh8c0aNqsjGE4u7Pz8u64Lp1FCBz4EM
/DizsT71+jDMbgvWuZ3GwLITHsPzdyYg8URZ2qoOzrl5h3DrQxyGQe0pobBn
TJxX21uf6jUGK8TP2FifZGF3Y2sbv8IYuPNd3ZfD8XNd7k5q78VRyGEnac5F
sFCf8sdlr+YghHvkkgWW6LiBb3K9x+ZJeMjVXCe5gY5Ka7f7/1s/AeEycv1D
SUyUzai87eE+Bh7d1ZE77Tn9o2Pj993Pp8CoyM/RO4SOET0PfAyHpyG9RLi6
O5eOVVpzSk28ROBVvNI/tJGORqfUVd+6TIK5SfXT8hUsJBiIzJ2WJALlW8Je
+Rs0nP0PTuVkTwLf8m3dLI5fa6Qq3heX5nz/0z4d5890zPJ9nW1qPA4B5ud4
4i/Qse8BkE8qEWH95j0/RTj9ZzPlV3bH9Rkgm/Hcq66mos+e4p3THpNglDG2
6poaA335mlaG50+CFf3QG3tDOgpwxfPPKxIhNjn9io4qxx8VibTX9yahV/hr
USonX5lrfUdqsueAO+1Me8UqOibKDn48tIoIeWwXz+x1NAxV5R21XLsA3FZm
52QNGJjCc5Bmn0mCPKcj6pJH6Wiuer3mERcJ9p9c+H4pi45F7zRrB0LngNdr
cbMEh0cYb43rbnsSwcNLNdWPw10r7zPufFiYAy0P7lNfWFTceoavW2PVLNyu
P1CSWUDD/Ow39jfU5sBAuP7KLU6+/77Ae7tmZ0DXc/PLfEUqahurXeaVIkHV
eYUKs61U9MvKVMixpcANa5dzvCZ0LOxMvJsVRwGNafpm1c9LGJtnPnm4cRHy
HMQttIOWMKlt3mUqmQJ3906FbLxAxaMv6q76AAnSZTefatlKRtthkxa9f/Mw
LLy76LwkDXc57JIYuLoAhWLwmEpewm6CanOPMxnu3ZcQuW63gKkNbgHxbQsQ
42NTWNewgBH1RPejdVQYQOcPaj/IGLbn1oPmgkWYaTWt+iu7gNS6a1H7D1Gg
/didr+Y7qZg02M54r0iD+cOzeyW1qehW+SLCcowM3OHximUmFMxyrA2kilCA
O6TM6UjR//8bHlspwksGRoX2pz+WS7jRm+mi4LUEey2l+DN6Sdje1RW5mosC
diUb+v/9mcN1Cr7ZKidpYBEkZ/JuHRln1N23br1IAz69yrVcMRTs2vuGe/EY
BVjBium6ovO49Y+dMCGNBvov3uxy0JtDkaJfNmdXU2Bj/KR4QxgJtXyp70sy
aUBOOiIxZkpGe8tnmu8JNEj/+CszkEjE8OrfOcX/yBARoLmf228Gif3LTeHj
VNCZUJ8Q4Z/Bculprjo/KlhuIPypaCHh4BexwdvzNNhixZuo92oGNXL/+82O
psEb6ucVvmsX8N+32fcbymiQbP2C+eIECW+Oz6vo72KA0bDuZe1N87jLRiSY
nUuHgo1C7dYxsxg2pSUZv58GxPfZa8QrplCI/49oaAsdzvcG3STsn8b6jJmE
KkM6bJp8mCCmRELJBwFDUVeo0LYuJcaOE/9FbkGVNScY8Pi2xWXunml8d8Tm
aG4fHdbvewg01XncGbbxtJgzDUbd3IROfp/Gue05PXFIB4nVQj6MVbPIJMsX
bK5kgLzne0NLPiKyA8xy5QMZnHoi7icazeBkUKVMmy4DguMcL30mjGJWf1rt
0i0GbBXvoIkIEHHl9+13Zg/Q4Yu6+/ODsZPoaejZKtlCg30/7ixKBg6huOvF
RFsROjyXNTN4vm4MD8d9LFQ0YcL50ALiluQxTN0y8vB8EQP+vRI53D85hr/T
/gbFyLAheCqO5/j7UYwWyj8kyaJDw09B4nTWEIbcYjHXhrHgWWL5cfnUPixe
PBtkVM0Ey/QijY8OY9jU4iUzl8CAya2d8kbRvahys+tUKLKg7/hlCyvDMUzb
KCzySZAFO2DL5XmvHqxpc/tukkOHNbsOPjHlnKdRW97qThEL3gcWnBPn7cdT
1Okfu0XY8EC76PkBnw70v1LcGZbJhPunvwdzEzsxP66Dh6+JDeTjYiNt8aMo
4hZxTPs3E9IyV1PezBIwMcNIiRDOgPnmV+E5/P3ostq6bUKDDcq/LNov2vbj
/Yzgn/iaBVPuQ1FROr2Y+HdgQ+Q6BtBCrZYrY5pw5FfiRLX1MmT4MlfnZHbg
9mPtS9XuLDB4tMZ1gURA66KI2ZXnGBDv2rHrSWoLtu74m3PIdxmMrGUk+w2+
4b4yf2WDyyzwZLRMh6ytxEi5kuvNVUx4Etz+jftuFyZIWOx8vI8BJ5sPJgRr
1mFFYg1jLogNzoqS3jUjbejSePKDWAIT3MnxObSvdbjsmp22x4UNnUEJrXkn
OnDZYs23taLLYLg7WspxqR7/NXm2u/SwILgoauwOduB/u68dcP+8DKkNJO4F
gTAkVGbZ//ZlgXB4QtlNkXo0tu48l6W7DIUrxCML1qYjt2JkBsufDTfHxm9+
P1qHO75+XT3PYEKYBv/f0eBavFD47PuQ5DIErP+9qSA6Fb9qGlu5bmLDVQcd
v1yuh2DqEnnGOJoJrIsR+f3EMBxuWpoJlmQDl952c++BOpT7ecZGKIINZu5y
7/48KYf/AaopVs0=
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.007333333333333334],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.007333333333333334],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.5480400722371728`, 
   1.5477106513308272`}, {-1.5366857494568538`, 1.5240841631658792`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772982040079652*^9, 3.7729820667214174`*^9}},
 CellLabel->"Out[88]=",ExpressionUUID->"51a42e41-a11a-4dca-b0c5-8bd54894b931"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["LearnDistribution with Real-NVP", "Subsection",
 CellChangeTimes->{{3.7728146985497675`*^9, 
  3.772814704989588*^9}},ExpressionUUID->"02859dcc-83f7-468f-bc02-\
b8061d7359b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "=", 
  RowBox[{"LearnDistribution", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<RealNVP\>\"", ",", 
       RowBox[{"\"\<NetworkDepth\>\"", "\[Rule]", "8"}], ",", 
       RowBox[{"\"\<CouplingLayersNumber\>\"", "\[Rule]", "4"}], ",", 
       RowBox[{"\"\<ActivationFunction\>\"", "\[Rule]", "Ramp"}], ",", 
       RowBox[{"MaxTrainingRounds", "\[Rule]", "500"}]}], "}"}]}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<DirectTraining\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771691097157357*^9, 3.771691123858289*^9}, {
   3.7716912095220165`*^9, 3.77169125720986*^9}, {3.771691320777122*^9, 
   3.7716914169006786`*^9}, 3.771691455862616*^9, {3.7716922287764378`*^9, 
   3.7716922595552025`*^9}, {3.771777439680786*^9, 3.7717774400101624`*^9}, {
   3.7717774947073097`*^9, 3.771777494806123*^9}, {3.7728145851497684`*^9, 
   3.772814611795025*^9}, {3.772814823737076*^9, 3.772814946525828*^9}, {
   3.7728151127753277`*^9, 3.7728151203361464`*^9}, {3.772815336977915*^9, 
   3.772815340512494*^9}},
 CellLabel->
  "In[259]:=",ExpressionUUID->"c31d5cb8-3edc-4b5b-8d0a-7575a5198536"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LearnedDistribution",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                "], {{{
                   EdgeForm[], 
                   GrayLevel[0.9], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.78], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.65], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.5], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                   Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]], 
                  
                  PointBox[{{4.905308194867242, 2.630836391598927}, {
                   0.20100883034436162`, 0.02382136569576569}, {
                   1.0719666600928879`, -1.250632626872198}, {
                   3.0527398070698992`, 
                   0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                   0.3149621009629985, 
                   1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                   2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}}, {{}, {}}}}, {
             FrameStyle -> Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], Frame -> True, FrameTicks -> None, 
              FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
              Identity, DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, AxesLabel -> {None, None}, 
              FrameLabel -> {{None, None}, {None, None}}, DisplayFunction -> 
              Identity, AspectRatio -> 1, AxesLabel -> {None, None}, 
              DisplayFunction :> Identity, Frame -> True, 
              FrameLabel -> {{None, None}, {None, None}}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Directive[
                GrayLevel[0.5, 0.4]], 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "GridLinesInFront" -> True}, PlotRange -> {{-3, 3}, {-3, 3}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RealNVP\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GraphicsComplexBox[CompressedData["
1:eJyFXHl4TkfbzxPZitJQa7WK0Iq1qnbm2GlVtEIspWqvV1RpvZZSte8iJHZV
ak2LlmpImGOpfY8QUSJCEmvzJCKLLJ8+9/nNuc593lyff+b6PTNn5t7nnnsm
qg3+6tNh7m5ubl093dz+bemfj462ZtdQv66hHgp/+C/0cyh8a3/wzf3BLyRw
Ldf4ZwrfdvU/UjjRhW9K6zqR0cCx1C+A4+h7hWvQ/ArH0/oKdyH6NOt4D4WN
lmPFJ2/BLzD4BQa/wOAXGPxa5RgZDQx+gcEvMPgFBr/A4Nc63kNjeuPYxhcw
b8EvMPgFBr/A4NdqJ5HRwOAXGPwCg19g8AsMfq3jPTRmlxzb9Mb5AuYt+AUG
v8Dg1+oHkdHA4BcY/AKDX2DwCwx+reM9NOZ3HNvskuuN8wXMW/ALDH6tfh4Z
DQx+gcEvMPgFBr/A4Nc63kNjcYVjm99xu+R643wB8xb8WuNYZDQw+AUGv8Dg
Fxj8AoNf63gPjcVNjm1xhfsdt0uuN84XMG/BLzD4BQa/wOAXGPwCg1/reA+N
7Qsc2+Imjyvc77hdcr1xvoB5a92PIqOt+1FktHU/ioy27keR0db9COM9NOs6
Phzb9gUeN3lc4X7H7ZLrjfMFzFvwCwx+gcEvMPi1jvfQ2L7OsW3f4/sCj5s8
rnC/43bJ9cb5AuYt+AUGv8Dg1zreQ2N5C8e2fZ3ve3xf4HGTxxXud9wuud44
X8C8Bb/A4Nc6zkOzrufDsS1v4fs63/f4vsDjJo8r3O+4XXK9cb6AeQt+reM9
NJZ3cmzLy3jewvd1vu/xfYHHTR5XuN9xu+R643wB8xb8sryaY1veyfMynrfw
fZ3ve3xf4HGTxxXud9wuud44X9bxZmu1Z/s5gufZPA/leRrPY/g+z/dBvk/w
OMrjDPdDbqdcj5xP3rqGd/XS0YJ/9rvG+m3fYRz7Xiuq5fPw7zgdRdCtudjz
89ZZ+//9rlqsw8fx3/n6fB2MZ/06m4evq0W61F0gqXXX6YyerTDZm1Phd1wT
3FMY8uHzWLHZXnTZy1kBXI3mUxjzgQ6sD4z1gQsK//2XJax0F9i+A+Yt6AEG
PVa+C9S6+B2Ytyk0n8KY3yq3AjUO8wHDrhjWMQ/5l1MA/0HzKYzvwAd+B+Yt
5gPGfMCgG+MwPzBvoQ9gzAfM9YZ1+HfAkAcw6MG8oAeYtxTO3DVgzMf5xDis
D4x1+TzAiL/c7vk5GP2Ix8Cg/3/jAnX+4v7B6wvoJ7+OjAZGPAcGfxxDL4gX
wKCX+xH4Ar3o53aN/QL9kB/HGG/ly/Q/fp5GP/gFtp5jnIo/jmFH0CP6gbm/
8vMsjwf8XIt+0AfM/QoYcuN2DszjA/qBsS7sg8cP0AH9cjvjcZDHG+73mK8o
P0Q/6MN8oAd8ww7QD8zlxOMoj1/QO9bneYx133HXrfuOu87thO8D6Iec0Q8+
gbEuMPInHl/xe1F+Cb1b83Mnq3OY+wDH+N6aj5txmp9L8Dv8D9+Df465nNEP
voAhfx7P+XkL84E/vq9xbI3XDo3HfZ53c3rxPegFhlyAQScw6OPxmtcRuF55
nYzHS34O5fGR1yG4XfJzHI9nvE7D/Yif63n84eckHh95HAYGveAT/PF4xuKF
rf7E4wOvP/H4wOtb3N95fYf7O68Pcf/k9Q/uf7yewv2H1xO4fVv1mC8drnHu
+t+ufk8dvx9wffdUrnDJ7bnkv6Pt5vo90bCHdIHWRd7L88Dof+H+HLHMNY+b
hnY5tTpaY7w+lsYb+k9X7T5aT3Si9Qw+8gV+RxtC9Brxx1PDOLQucRU6NH/X
glcV/xmu8VES9GA+8A2+QB++h3zwPejFeugH35wfyBHzkx2mStCJfpJjMQ39
kAPkn+canyJAF+SAfugB/ZAP+iF/8AG+jxFWdAKDfowHv8DQP8bDvkA35PgW
0aPkhH7wiX7Qif4xJA8dfEOPoAtyRj/oRz/0DLmDX8gNdKMfdKAf80OumB9y
wPfQO76HXpEvQV7Yz/Ad4gavsyC+Qb74Hr8jvsDfgSE30InxmB92AbljXmDM
h/Ggk+sJGPRhXvCLeWBv+A7joC/MD4z4C36wDvQJ+wDG/JgH/GA+xEdg0AHM
7QbrAiPeQh74HXRhfmCeZ4FO8I35gSE/zIN4D/nBX7j/8HOK9ZyWrvwH8wGD
D9gd+ClKDhgPPnidxHquc+j83GWtlzh0vu9bz0EOW14PjH28qDpKUfskMPp5
Heh/z5uv9jueZ2G8NW/LV36E9fg+bs07zThTVB2F5z38HId58Ttv0Y/xtK67
Zj2HOTT8zlv0I34j7sK+gGH31n57C/0iniMu4ztgfs6ynisdys8xHnIEhp1D
L6APfoO4Dgz98hb2wvMUfAfM80pgfA96MR70AnM6YYfWukmqaq12maq+Rzzh
dRWsg35gtn/r3D5BN/JMa15p7nvA4AvyRzzhdTrMZ7X7fFu+x/Mc0AX9AUPu
vA4F+4f+uN6BQQfGgw70gw5gfq4Btp67UlV+AH0Bgx/kC8gTgIuqo8IfQR++
A33ARdVN8T3iOMZDjsDgC99b66oODXLAeORFwIiP8GvIGxj2CYz9Bhh2zzH3
V/wO/WIeYMR//A49wd6x30IvHPN3BpAz5In4zPMIyJdjbu/4HnTB/vg5C3kE
sNWezDoM+q33qU61PvqBeV0H/dAnMPQO+4SdW+0rX+W/1nOYWVdBP843wOAH
+ga/HCNfgP8g3iPOAUPuiIvWc3g+yyuzVV4Du4E8gEEf7A/0cAx743GWx2HI
F99Dnhxb6zP5ar+APIG5HVnztFQWF1NtdlSU3XG7BB/wf/CJ+ACM9XneAv8C
/9h/wC8w+vm9APYX+DMw4gDvt+YR6bb6DOwE64Jv0AmMftgr+oGt9zcFaj+G
PfJ7UdSTgHFehr3xOpOVbofKbzC/C3b1Unk3MH83yOMh5AL98Lox+IK+OX38
XIH5+D0m1gfG+rAXYGtdxcz7IC9gyMt6Ds1W5zDQifwE6+J7+Csw7N6al7mr
+iHyVSufBZLrBRhxC/aF9TEf+ObzwY95Xcr6/sZpq1NZ39M4VR6Gfl5Xh39h
fugH46x1qBxVb8f8wIgLxn6q8gJ+jwJ64C/Ubb8XRRzA/sDzJx7feXzm8ZXX
hRD/8B0wrwPBDiEf0F/Uvg57tOb57up+FfZj1Zt5DkM93Frf9lT1FH4Pz+s+
oIPX60A35oe8MT/kxO8xrff15v7N7835fQH6kQfyelJRfgh7QT/8wpr3m/cm
sA9+Puf3wrAnyB96h754XsrrJfBLjIP9We/fC1T84vbJ771BP68rw96gV+iN
vweF/jAedmvdr9xVnRB6wH4A+wA/1jpWtq3OD3/lcRqY5ye8Lor+oup2sBes
g++Bi6oL8zoi5MDlAnuCnXP+8Tv0ba1LpbPztdN2Prfew6UqufB7e/6Ogtcp
+DkLdgsMOsEX4i/0Df8Ghn9A/4jT1ncq6bbzDDD4wvqQO79n4O95sT76sT6v
m1ntJ5/ly+Z9J/QCe4HeeB0S8oG88R3kiu+sebT5Ls3690VOFR+s91L2dzZY
D/EF9gX+ef7BW3wP/nmdiO9rPP5az2/5Nvuwvp/1VPbA7314HRP2YZWbU1jr
XuY5HvyDziNX/jwxqZH5fmnIiW03S+d42t4bLYgoX9p3hZuS45wBD7M+PeKm
8q7YMjWCDo0vVPcJkUszRzVv/VxO8DvXfkFp8/0Q5PDt4827X5uaI7f3HBcQ
quXZ3vv4Bpdvvn1phpL7D5/0qyFvZSi/7Ls5a2zOBqf8pcqxucn5+bb3OoFL
ZzVcvOOeHNEkfX61qDTbex1Hr4WJvzZOVfT679vTouWLg7JhXr9OlcvmqXWL
LXqytXuFNIXvFv954fkNZv1/XPKCjOgZnrb763m7C9OmXtgjhi+rt3WETJL8
fYqxnsqXG2zxHl6vwV1xr29aWMOR5n31z82rtPzN94nt7w+6puz21/omqnz2
9HGf2KXF0kSj7wZlT/wsz/aeP/LYyvc2j3ksrvi955VV7pztPUjsL4tXz5n7
RNG/Kyes9xsiU6TFJt4cOStN7c/go3G/Yd32lMxU+97tlPRNtctnKv4OkP7V
+jWPdv6z8s08Uapzx/oR/S7Z3mvIN8KvJ+ww6zhxQ7tUOjjWfG/+dKVv0w43
zfg4a97zjZWTzPfmS0bVGvxiskML+vnB+olZL6T3/MH+47906FcLkhMqJ2TK
ak8u1HpxxqH3HPRPsex3n8rteR2WD45x6Oe/a7Yi6vEt6fOo9Z1x3zj0vM2t
3H9v5qkvHH00fN7BPOl0q73kfN/HsuHTf6YG+mTK8EtH5i796pZcHrAtQJbJ
lB8emuFV7+kLeYDkKzf+ePdSft0HotyF7Ptf7XoiJ7fbO6jskjz56ECfwFOe
v8vPJ/vXqvWuN/Qv34lIkBPaxgrHb1vPhwelijNv1lnxldse2WVlQJ12oRki
/aP+Fy7FmW1Q/W513q++V15reGb39IVu2tUvJ55dst9svx1aaVX3t4vp7/cP
mtRgWKHUk33yWvm761dba+Epb7npF3Pubwz864rYsSbGMae0m55ZOabCqfAk
senalIa/DiiQaUu+/PtZlpd++Kq2YuOAHFn3/eb1Vm3JEg2plSW3DOhbYkK2
DGw6Y9P6NU45tX/miu09n8uLTRrse3ApXXpv++JEi+tXRKOOAVV3jk6XtX+p
czvBL0lcaO/ccis4TS6IKFnvxslk1ZYKd4ttdeCwrPrzeW1peIqsN6zi84ev
nBUh61PebBVxT9Zu/2lGm3VnRZvRC/0frb8nTy79pZlXRL5s0nPc8EkTr8hp
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                "], {{{
                   EdgeForm[], 
                   GrayLevel[0.9], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.78], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.65], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.5], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                   Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]], 
                  
                  PointBox[{{4.905308194867242, 2.630836391598927}, {
                   0.20100883034436162`, 0.02382136569576569}, {
                   1.0719666600928879`, -1.250632626872198}, {
                   3.0527398070698992`, 
                   0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                   0.3149621009629985, 
                   1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                   2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}, {{
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]]}, {}}}, {{}, {}}}}, {
             FrameStyle -> Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], Frame -> True, FrameTicks -> None, 
              FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
              Identity, DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, AxesLabel -> {None, None}, 
              FrameLabel -> {{None, None}, {None, None}}, DisplayFunction -> 
              Identity, AspectRatio -> 1, AxesLabel -> {None, None}, 
              DisplayFunction :> Identity, Frame -> True, 
              FrameLabel -> {{None, None}, {None, None}}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Directive[
                GrayLevel[0.5, 0.4]], 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "GridLinesInFront" -> True}, PlotRange -> {{-3, 3}, {-3, 3}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RealNVP\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["10000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  LearnedDistribution[
   Association[
   "ExampleNumber" -> 10000, "Preprocessor" -> 
    MachineLearning`MLProcessor["ToMLDataset", 
      Association[
      "Input" -> Association[
        "f1" -> Association["Type" -> "NumericalVector", "Length" -> 2]], 
       "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
         Association["Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor["WrapMLDataset", 
             Association[
             "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
              "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
       "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
       "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Standardize", 
      Association[
      "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Mean" -> {4.547473508864641*^-16, -1.5916157281026244`*^-16}, 
       "StandardDeviation" -> {0.9999499987499367, 0.999949998749937}, 
       "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Version" -> {12., 0}, "ID" -> 7612164254450540647]], 
    "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> Automatic, 
    "Model" -> Association["Sampler" -> NetGraph[
        Association[
        "Type" -> "Graph", "Inputs" -> 
         Association[
          "checker_b" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "checker_w" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Nodes" -> Association[
          "coupling_4net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.47400811314582825`, -0.8142053484916687}, \
{-0.9381108283996582, -0.9096481204032898}, {-1.2824023962020874`, 
                    0.06401971727609634}, {-0.07836522907018661, 
                    0.48831385374069214`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.10472651571035385`, -0.899893045425415, \
-0.8831688165664673, 0.841711699962616}, {
                    0.639081597328186, -1.0726513862609863`, 
                    0.016854742541909218`, 0.6379846930503845}, {
                    0.29376646876335144`, -1.0531771183013916`, \
-0.7469577193260193, -0.6804822683334351}, {-0.3903186321258545, 
                    0.41556766629219055`, -0.44766518473625183`, 
                    0.5781077742576599}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.1779835969209671, -0.7659265995025635, \
-0.6955357789993286, -0.46534663438796997`}, {
                    0.40920573472976685`, -0.5140355825424194, \
-1.0458946228027344`, 1.022903561592102}, {
                    0.6857390999794006, -0.1890314221382141, \
-0.9970906972885132, 1.1968910694122314`}, {
                    1.0493556261062622`, -0.5241221189498901, 
                    0.996066153049469, 0.6140029430389404}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.09778854995965958, -0.08884620666503906, \
-0.981550395488739, 0.14494751393795013`}, {-1.1741719245910645`, 
                    0.5936166644096375, -0.8853036165237427, 
                    1.1288560628890991`}, {1.0192004442214966`, 
                    0.45757684111595154`, 
                    0.4314703643321991, -0.4057874381542206}, {
                    0.34138989448547363`, -1.2073633670806885`, 
                    0.6353721618652344, -1.1829006671905518`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.7903922200202942, 
                    1.0306997299194336`, -1.094161868095398, \
-0.23096758127212524`}, {0.5526812076568604, 0.24305129051208496`, 
                    0.5017563104629517, 
                    0.14767198264598846`}, {-0.6947301626205444, 
                    1.087038278579712, -0.9804190397262573, 
                    0.5635855197906494}, {
                    0.838047981262207, -0.9405266642570496, \
-0.47020044922828674`, 0.298164427280426}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.3400888741016388, -0.1795671135187149, 
                    0.29517868161201477`, -1.0533629655838013`}, {
                    0.5913594365119934, -0.9476831555366516, 
                    0.1860104650259018, 
                    0.02964492328464985}, {-0.28369805216789246`, 
                    0.2887578308582306, 0.6344670057296753, 
                    0.21172834932804108`}, {0.7833213806152344, 
                    0.15075556933879852`, 0.19456005096435547`, 
                    0.9793469309806824}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.5568111538887024, -0.2508641481399536, \
-0.8237136602401733, -0.2236444056034088}, {-1.0766154527664185`, \
-0.14689864218235016`, -1.129744529724121, 
                    0.4696337580680847}, {-0.082916259765625, 
                    0.3892093598842621, -0.8197648525238037, \
-0.99456787109375}, {0.9241390824317932, -0.8137200474739075, 
                    0.5294305682182312, -0.8215039968490601}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.5217711329460144, 
                    0.7797710299491882, -0.41279080510139465`, 
                    0.5107153058052063}, {-0.22225850820541382`, 
                    0.27820247411727905`, -0.8235942125320435, 
                    0.6491014361381531}, {-0.2466532438993454, \
-0.6058765053749084, -0.5460322499275208, -0.7440249919891357}, \
{-0.7497199773788452, 0.5091549158096313, -0.8626350164413452, 
                    0.23669159412384033`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.008660465478897095, 0., 
                    0.020563967525959015`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0004466772079468`, 1., 
                    1.0005074739456177`}], "Biases" -> 
                    RawArray["Real32",{0., 0.9064932465553284, 
                    0., -0.1170889362692833}], "MovingMean" -> 
                    RawArray["Real32",{0., -0.008652647025883198, 0., 
                    0.020534871146082878`}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_4net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.6304361820220947, -1.0520421266555786`}, \
{-1.2773617506027222`, -0.5163175463676453}, {1.0575640201568604`, 
                    0.4758467674255371}, {-0.2984674572944641, \
-0.5416990518569946}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.02016102522611618, -0.020137911662459373`, 
                    0.009103432297706604, -0.020071636885404587`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.05553991347551346, 
                    0.4838116466999054, 0.6280455589294434, 
                    0.9579535126686096}, {
                    0.4094116985797882, -0.7297202944755554, \
-0.5407580137252808, 1.0920393466949463`}, {0.3416574001312256, 
                    0.8166967630386353, 0.027458971366286278`, 
                    0.5231937766075134}, {-1.0214983224868774`, 
                    1.1557561159133911`, -0.73240065574646, \
-0.3085293173789978}}], "Biases" -> 
                    RawArray["Real32",{-0.005659567657858133, 
                    0.018651708960533142`, -0.027242522686719894`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7295066118240356, -0.9585456252098083, 
                    0.4683768153190613, 0.013072196394205093`}, {
                    0.7268832325935364, 1.0297549962997437`, 
                    0.13010364770889282`, 0.8511728644371033}, {
                    0.5311985015869141, -0.7490038275718689, 
                    1.1106948852539062`, -0.783568799495697}, \
{-0.11016649007797241`, -0.7793685793876648, 0.7892118692398071, 
                    0.6283679008483887}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.02789856493473053, -0.0267933439463377, \
-0.020013725385069847`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8662037253379822, -0.7305806279182434, 
                    0.5959702134132385, 
                    0.15533588826656342`}, {-0.16451825201511383`, \
-0.9961524605751038, -1.136181116104126, 0.4645577669143677}, {
                    0.3575422465801239, -0.3326648473739624, \
-1.0992751121520996`, 0.055531591176986694`}, {1.0984028577804565`, 
                    0.4548112154006958, 0.666391134262085, 
                    1.1845535039901733`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.028072068467736244`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.8098240494728088, 
                    1.155951976776123, -0.6447374224662781, 
                    0.45518845319747925`}, {-0.6766847372055054, \
-0.47551292181015015`, -0.3867071270942688, 1.1213455200195312`}, {
                    0.9464103579521179, -1.1102110147476196`, 
                    0.7772281169891357, 
                    0.23293203115463257`}, {-1.182234764099121, \
-0.47915083169937134`, -1.1138650178909302`, -0.3971502184867859}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0002449585881549865, -0.004986758343875408, \
-0.03427859768271446, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.1852563619613647`, 
                    0.7036933302879333, 0.8977159857749939, 
                    0.928520679473877}, {-0.9681017994880676, 
                    0.7755762934684753, 
                    0.1256440281867981, -0.6624584197998047}, {
                    0.6240013241767883, -0.14710289239883423`, 
                    0.5384515523910522, 0.6343113780021667}, {
                    0.6885873675346375, 0.07010910660028458, 
                    0.09267108887434006, 0.12848487496376038`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0070115430280566216`, \
-0.015095503069460392`, -0.009009095840156078, 0.003930181264877319}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.6698826551437378, -0.29908081889152527`, \
-0.2068452537059784, -0.30872347950935364`}, {0.6599966287612915, 
                    0.04333231970667839, -1.0408837795257568`, \
-0.306166410446167}, {-0.9370322823524475, -0.3536984920501709, \
-0.6001484394073486, 0.02215658314526081}, {-0.1800127923488617, 
                    0.8332293033599854, -1.1162543296813965`, \
-0.6609154343605042}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.008087989874184132, -0.011284451000392437`, \
-0.02397492341697216}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.5182785987854004, 
                    0.6566182374954224, 0.5928246974945068, 
                    0.12140579521656036`}, {
                    0.1699356734752655, -0.27175694704055786`, 
                    0.7886574864387512, 0.6768583655357361}, {
                    0.5189081430435181, 
                    0.2447454184293747, -0.5930821299552917, \
-0.08741005510091782}, {0.0417998731136322, -0.3245701491832733, 
                    0.5038024187088013, -0.023459866642951965`}}], "Biases" -> 
                    RawArray["Real32",{-0.008279794827103615, 
                    0., -0.01587769389152527, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.9806042313575745, 1., 
                    0.9761574268341064, 1.}], "Biases" -> 
                    RawArray["Real32",{0.5513590574264526, 0., 
                    0.12312658131122589`, 0.}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.008144805207848549, -5.605193857299268*^-45, \
-0.015940163284540176`, -5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_4net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-1.007866621017456, -1.1302850246429443`}, \
{-1.1292991638183594`, 
                    0.32867714762687683`}, {-0.9661316275596619, \
-1.2228132486343384`}, {-0.35992372035980225`, 1.0590423345565796`}}], 
                    "Biases" -> 
                    RawArray[
                    "Real32",{-0.19781887531280518`, -0.052421003580093384`, \
-0.26478883624076843`, 0.10271609574556351`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.04167582467198372, -0.039781633764505386`, \
-0.026082627475261688`, 1.3676934242248535`}, {
                    0.8291130661964417, -1.4437823295593262`, \
-0.5611294507980347, -0.9822043776512146}, {-0.3967604637145996, \
-0.753619909286499, 0.362751841545105, 
                    0.14525388181209564`}, {-0.9395437836647034, \
-0.5477266907691956, -1.133709192276001, 0.847710371017456}}], "Biases" -> 
                    RawArray["Real32",{0.07890690863132477, 
                    0.3761350214481354, 
                    0.3376272916793823, -0.1185382828116417}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6026408672332764, 
                    0.3285408020019531, -0.41105180978775024`, 
                    0.8543686866760254}, {-0.11997757107019424`, 
                    0.8851994872093201, 
                    0.6833640336990356, -0.3456652760505676}, \
{-0.39565959572792053`, -0.3138121962547302, -0.6649273037910461, 
                    0.35737353563308716`}, {-0.4911477863788605, \
-1.1042778491973877`, -0.36274898052215576`, -0.11533467471599579`}}], 
                    "Biases" -> 
                    RawArray["Real32",{0.020833812654018402`, 
                    0.20892350375652313`, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.9802055358886719, 
                    0.44653260707855225`, -1.1153992414474487`, \
-0.5422317981719971}, {1.0233982801437378`, -0.0626722201704979, 
                    1.0991966724395752`, -1.063027024269104}, \
{-0.6796855330467224, 
                    0.23226308822631836`, -0.3158417344093323, \
-0.5147196054458618}, {-0.8717750310897827, -0.3191491961479187, 
                    0.4369300305843353, -0.6443153619766235}}], "Biases" -> 
                    RawArray["Real32",{
                    0.16314755380153656`, -0.009577592834830284, 
                    0.18332423269748688`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.18324266374111176`, -0.5023815035820007, \
-0.7085782289505005, 
                    0.20978394150733948`}, {-0.8939442038536072, \
-0.6249310970306396, -0.21290069818496704`, 
                    0.979325532913208}, {-0.5504775643348694, \
-0.05832118168473244, -0.11689189821481705`, 0.053812094032764435`}, {
                    1.0853383541107178`, 0.0061812330968678, 
                    0.5580741763114929, -0.3068590462207794}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.05754492059350014}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.36064276099205017`, 
                    0.6194612383842468, -0.27823686599731445`, \
-8.196585440600757*^-6}, {0.4804772138595581, -0.165147066116333, 
                    0.9228812456130981, 
                    0.7461766004562378}, {-0.3477061092853546, \
-0.09727273136377335, 
                    0.4745616912841797, -1.1461161375045776`}, \
{-0.9887083172798157, 0.6576195955276489, -0.8700469732284546, 
                    1.0412739515304565`}}], "Biases" -> 
                    RawArray["Real32",{0.07557635009288788, 
                    0.018580619245767593`, 0., -0.030154014006257057`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{9.325220162281767*^-6, 
                    0.8228119611740112, -0.4993772506713867, \
-0.21248407661914825`}, {0.07443057745695114, -0.26470720767974854`, 
                    0.2867298722267151, -0.2581230103969574}, {
                    6.920875421201345*^-6, 
                    0.09026002883911133, -0.5431668758392334, 
                    0.31951263546943665`}, {-0.8487663269042969, \
-0.5759012699127197, 0.33831918239593506`, 0.3584586977958679}}], "Biases" -> 
                    RawArray["Real32",{-0.05139141529798508, 
                    0., -0.0088221849873662, 0.004635503049939871}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8246548771858215, -0.2259514480829239, 
                    0.3128778040409088, 0.3548484742641449}, {
                    0.03844049572944641, -0.7165543437004089, \
-0.6533167362213135, 0.02939617820084095}, {
                    0.8554775714874268, -0.7347059845924377, \
-0.7679096460342407, -0.06620988994836807}, {1.0089783668518066`, 
                    0.7805302143096924, 
                    0.42812126874923706`, -0.013497886247932911`}}], "Biases" -> 
                    RawArray["Real32",{0., 0.015746716409921646`, 
                    0., -0.005764590576291084}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.35106638073921204`, 1., 
                    2.100911855697632}], "Biases" -> 
                    RawArray["Real32",{0., -0.12786923348903656`, 0., 
                    0.05423612520098686}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.10744404792785645`, -0.13281498849391937`, 
                    0.005403124261647463, 0.32040634751319885`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0011073986534029245`, 
                    0.0017343112267553806`, 0.000022023315978003666`, 
                    0.009115437045693398}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_4net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.4652402400970459, 
                    0.49676209688186646`}, {0.1175260916352272, 
                    1.2375682592391968`}, {-0.8456810712814331, \
-0.6227266788482666}, {-1.4109878540039062`, 0.37913620471954346`}}], 
                    "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.9029104709625244, -0.7850021123886108, \
-0.45101794600486755`, 
                    0.5204910039901733}, {-0.18260669708251953`, \
-1.0518146753311157`, -0.006921728607267141, -0.26572009921073914`}, \
{-1.0894790887832642`, -1.0242424011230469`, -0.9082985520362854, 
                    1.1481907367706299`}, {-1.1608684062957764`, \
-0.9526859521865845, -0.5282173156738281, 0.20659083127975464`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6848381757736206, 
                    0.6082578301429749, 
                    0.7840158939361572, -0.5883799195289612}, \
{-0.9217560887336731, 
                    0.40544581413269043`, -0.33492571115493774`, \
-0.3102727234363556}, {-0.5688890814781189, 
                    1.046210527420044, -0.9115222096443176, \
-0.5828470587730408}, {-0.05852051451802254, 0.9531077146530151, 
                    0.32824960350990295`, 0.16221819818019867`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.9153900742530823, 
                    0.6633276343345642, -0.6811608672142029, 
                    0.19160978496074677`}, {-0.5331753492355347, \
-0.15094305574893951`, 
                    0.5140804052352905, -0.9406359195709229}, \
{-0.16569238901138306`, 0.47429540753364563`, -1.0168081521987915`, 
                    0.1246163472533226}, {-0.8730981349945068, \
-0.8632358312606812, 0.33973273634910583`, -0.3848488926887512}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6421592831611633, 
                    0.7852470874786377, 
                    0.9743026494979858, -0.5576608777046204}, {
                    1.029341697692871, -0.7168751955032349, \
-0.06433585286140442, 0.08959601074457169}, {0.27530547976493835`, 
                    0.5117119550704956, 
                    0.7906123995780945, -0.4385753571987152}, {
                    0.7723061442375183, -0.06683015823364258, \
-0.8859438896179199, -1.218153953552246}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    1.203736662864685, -0.25375401973724365`, 
                    0.7500302195549011, -0.22818173468112946`}, \
{-1.0999925136566162`, 0.9465587139129639, 0.3289337754249573, 
                    0.8465142846107483}, {
                    0.028109243139624596`, -0.03129323944449425, 
                    1.1834310293197632`, -0.44804665446281433`}, \
{-0.037871867418289185`, 0.010917437262833118`, -0.8484542369842529, 
                    0.20530910789966583`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.9259331226348877, 
                    0.37142977118492126`, 0.1256236582994461, 
                    0.04828003793954849}, {
                    0.9989590048789978, -0.2154754400253296, \
-0.016423378139734268`, 0.9485648274421692}, {1.040073037147522, 
                    0.12642869353294373`, -0.3693975806236267, \
-1.1077848672866821`}, {-0.5319598317146301, -0.4387214481830597, \
-0.534461259841919, -0.4620550572872162}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.0833996906876564, -0.46460387110710144`, \
-0.1812361478805542, 0.679459273815155}, {-0.8004432320594788, 
                    0.10009783506393433`, 
                    0.24950337409973145`, -0.41158491373062134`}, \
{-0.47476792335510254`, -0.3978653848171234, -0.15602312982082367`, 
                    0.8161223530769348}, {0.02307536080479622, 
                    0.14550918340682983`, 0.8530614376068115, 
                    0.5101252198219299}}], "Biases" -> 
                    RawArray["Real32",{0.011915917508304119`, 0., 
                    0.034721240401268005`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.000890851020813, 1., 
                    1.0057798624038696`, 1.}], "Biases" -> 
                    RawArray["Real32",{0.2999424636363983, 0., 
                    0.3054947257041931, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.01201102789491415, 0., 
                    0.0346289798617363, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    1.0418953895568848`, -0.513334333896637}, {
                    0.1687389612197876, -0.3302590548992157}, {
                    0.495919793844223, 
                    0.8434527516365051}, {-0.5314626693725586, 
                    1.3900585174560547`}}], "Biases" -> 
                    RawArray["Real32",{0.3659566044807434, 
                    0.13351543247699738`, 0.10686391592025757`, 
                    0.15509799122810364`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-1.3263261318206787`, -0.27763131260871887`, 
                    0.3791273236274719, 
                    0.2657627761363983}, {-1.4778060913085938`, 
                    0.8390009999275208, -0.9616281986236572, \
-0.025680365040898323`}, {
                    0.6034183502197266, -0.43304872512817383`, \
-0.3603288531303406, 
                    0.9616199731826782}, {-0.49781331419944763`, \
-0.529888391494751, -0.09996475279331207, -0.051624953746795654`}}], "Biases" -> 
                    RawArray["Real32",{0.08929497003555298, 
                    0.05597096309065819, -0.15732471644878387`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.5539706945419312, 
                    0.7471994757652283, 0.46178996562957764`, 
                    0.25351831316947937`}, {-0.4265191853046417, \
-0.7486802339553833, -0.7460475564002991, -0.6947806477546692}, {
                    0.9243960976600647, 
                    1.1926639080047607`, -0.17698706686496735`, \
-0.6852891445159912}, {0.09440665692090988, 0.27125465869903564`, 
                    0.869486391544342, -1.0169434547424316`}}], "Biases" -> 
                    RawArray["Real32",{0.2866675853729248, 0., 
                    0.04700961336493492, -0.1856992095708847}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.8231660723686218, -0.8155822157859802, \
-1.1855549812316895`, 
                    0.29907849431037903`}, {-0.4099087715148926, \
-0.6159327626228333, 
                    0.3841255307197571, -0.5931782722473145}, \
{-0.24869844317436218`, -0.5106825232505798, -0.07572083175182343, 
                    0.9675281047821045}, {
                    0.14630478620529175`, -0.14799608290195465`, \
-1.059540867805481, -1.1832749843597412`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.18658752739429474`, -0.023231053724884987`, \
-0.24010439217090607`, -0.05971395596861839}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.23073528707027435`, -0.4012846350669861, \
-0.2839476466178894, -1.0680859088897705`}, {-0.3161003589630127, \
-0.20132650434970856`, -1.0062566995620728`, 0.19635431468486786`}, {
                    0.46060413122177124`, 
                    0.20692935585975647`, -0.08522094786167145, 
                    1.1850789785385132`}, {0.0030966363847255707`, 
                    0.2825815677642822, -1.091651439666748, 
                    1.1223691701889038`}}], "Biases" -> 
                    RawArray["Real32",{0.09239514917135239, 
                    0., -0.013500048778951168`, 0.2942027449607849}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.1700756549835205`, 
                    0.13764449954032898`, 0.6639665365219116, 
                    0.5552995204925537}, {-0.4826156497001648, \
-0.8768376708030701, -1.0968669652938843`, -0.4557706117630005}, {
                    0.516022801399231, -1.1965264081954956`, 
                    0.3426477015018463, -1.1791882514953613`}, \
{-0.18313869833946228`, 1.1725883483886719`, 
                    0.6765085458755493, -0.4567888677120209}}], "Biases" -> 
                    RawArray["Real32",{0.0691957175731659, 
                    0., -0.052879009395837784`, -0.14714697003364563`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.3545922040939331, -1.0969960689544678`, \
-0.7072638869285583, -0.6124459505081177}, {0.5162127614021301, 
                    0.6238583326339722, 
                    0.34327301383018494`, -0.26791563630104065`}, \
{-0.5693504214286804, 1.2117674350738525`, -0.11955609917640686`, 
                    0.9526163935661316}, {
                    0.0004830145335290581, -0.6953133940696716, \
-0.8744909763336182, 0.5600712895393372}}], "Biases" -> 
                    RawArray["Real32",{-0.04417675733566284, 
                    0.016460709273815155`, -0.018018431961536407`, \
-0.003621066454797983}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.08364911377429962, -0.41293445229530334`, 
                    0.7456597089767456, -0.6112605333328247}, {
                    0.38328656554222107`, 
                    0.026827214285731316`, -0.6304061412811279, 
                    0.0014338655164465308`}, {
                    0.2936494052410126, -0.4953831434249878, \
-0.8156598806381226, 
                    0.7646706700325012}, {-0.037835653871297836`, \
-0.9449551701545715, 0.7161888480186462, 0.32395997643470764`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.004959477577358484, 0., 
                    0.018554257228970528`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.4236890375614166, 1., 
                    0.8259796500205994}], "Biases" -> 
                    RawArray["Real32",{0., 0.8121699094772339, 0., 
                    0.15723752975463867`}], "MovingMean" -> 
                    RawArray["Real32",{-0.12917044758796692`, 
                    0.05554655194282532, -0.09991323947906494, \
-0.25477808713912964`}], "MovingVariance" -> 
                    RawArray["Real32",{0.000266525661572814, 
                    0.00009923988545779139, 0.00010416119766887277`, 
                    0.0011296860175207257`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8055242896080017, -0.5046042799949646}, \
{-1.0678335428237915`, -0.9697098135948181}, {-0.561033308506012, \
-0.8877573609352112}, {0.9595621824264526, -0.0500657856464386}}], "Biases" -> 
                    RawArray["Real32",{0.33588457107543945`, 
                    0.07756032794713974, -0.09569449722766876, \
-0.11187814921140671`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.32993894815444946`, 
                    0.5002012252807617, -0.49956807494163513`, 
                    0.40580034255981445`}, {
                    0.07131551206111908, -0.16277313232421875`, \
-1.1159601211547852`, 1.1482741832733154`}, {1.2370935678482056`, 
                    1.6028075218200684`, -0.42574992775917053`, \
-0.755722165107727}, {-0.5497583150863647, 
                    0.5320141911506653, -1.025053858757019, 
                    0.9358385801315308}}], "Biases" -> 
                    RawArray["Real32",{-0.037944987416267395`, 
                    0.22707660496234894`, 
                    0.007558062672615051, -0.03027201071381569}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.1833183318376541, -0.5434562563896179, 
                    0.35900264978408813`, 
                    0.6587458252906799}, {-0.15809792280197144`, 
                    0.8733894228935242, -0.9908549785614014, 
                    1.045094609260559}, {0.7978456616401672, 
                    0.35350021719932556`, -0.2868674695491791, \
-1.0262768268585205`}, {-0.7124864459037781, 
                    1.0488007068634033`, -0.5228165984153748, 
                    0.926790177822113}}], "Biases" -> 
                    RawArray["Real32",{-0.04258950427174568, 
                    0.17276756465435028`, -0.12131209671497345`, 
                    0.27382320165634155`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.05914736166596413, 
                    0.47175294160842896`, 0.17754751443862915`, 
                    0.9169224500656128}, {-1.0569748878479004`, 
                    0.4991212785243988, -0.6323114037513733, \
-0.8411307334899902}, {1.0993962287902832`, 
                    0.18369415402412415`, -1.0187921524047852`, \
-1.3645762205123901`}, {
                    0.6631592512130737, -0.4769909679889679, \
-0.28027579188346863`, -0.49332156777381897`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.04119429364800453, -0.005328983999788761, \
-0.18500567972660065`, 0.14757290482521057`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.11408688127994537`, 
                    0.4024689495563507, 0.3531888723373413, 
                    0.9709101915359497}, {0.6454603672027588, 
                    0.6429744362831116, 0.6609175205230713, 
                    0.41047388315200806`}, {-0.021838761866092682`, 
                    0.7679307460784912, -0.9821698665618896, 
                    0.5330458283424377}, {-0.48661771416664124`, \
-0.8861293196678162, 0.2985672652721405, -0.24996596574783325`}}], "Biases" -> 
                    RawArray["Real32",{-0.029024148359894753`, 
                    0.10164622962474823`, 
                    0.22822213172912598`, -0.0643431693315506}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.25814053416252136`, -0.5698228478431702, 
                    0.9926735162734985, 1.1822365522384644`}, {
                    0.30227944254875183`, -0.5475373864173889, \
-1.221463918685913, -0.7576279044151306}, {-0.6261985898017883, 
                    0.32760244607925415`, 0.2221505343914032, 
                    0.49372488260269165`}, {-1.0299720764160156`, \
-0.8712263703346252, 0.4709862470626831, -0.9809171557426453}}], "Biases" -> 
                    RawArray["Real32",{-0.05840636044740677, 0., 
                    0.34599795937538147`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7178837060928345, 
                    0.0754539743065834, -0.07109770178794861, 
                    0.10907488316297531`}, {-0.39196500182151794`, \
-1.0391287803649902`, 0.5946069955825806, 0.3916831910610199}, {
                    0.5160495042800903, -0.4873242974281311, 
                    0.49311238527297974`, -0.24718569219112396`}, \
{-0.6341967582702637, 
                    0.36129269003868103`, -0.6919680833816528, \
-1.0163519382476807`}}], "Biases" -> 
                    RawArray["Real32",{-0.18687163293361664`, 
                    0.02596762776374817, 0.03363369405269623, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2952757179737091, 
                    0.4504634737968445, -0.04413805529475212, 
                    0.18807938694953918`}, {-0.7450427412986755, \
-0.8215761184692383, -0.4584442377090454, -0.4913382828235626}, \
{-0.2416420727968216, 0.3537132441997528, 0.27950969338417053`, 
                    0.5292163491249084}, {-0.7373591065406799, 
                    0.36556029319763184`, -0.41158556938171387`, \
-0.2839217483997345}}], "Biases" -> 
                    RawArray["Real32",{-0.01831594482064247, 0., 
                    0.017417605966329575`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.2714173197746277, 1., 
                    0.9956449866294861, 1.}], "Biases" -> 
                    RawArray["Real32",{0.19552762806415558`, 
                    0., -0.39802759885787964`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.07385575026273727, -0.2899567484855652, 
                    0.16089841723442078`, -0.009371621534228325}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0014104446163401008`, 
                    0.011190064251422882`, 0.0026832493022084236`, 
                    0.00038680279976688325`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2642930746078491`, 
                    0.8268188238143921}, {-0.5022134184837341, 
                    0.5101158618927002}, {-1.3381139039993286`, 
                    1.166893720626831}, {0.4878425598144531, 
                    0.20256587862968445`}}], "Biases" -> 
                    RawArray["Real32",{-0.17179343104362488`, 
                    0.08783379197120667, 
                    0.06922435760498047, -0.2568233013153076}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.32112014293670654`, -1.063812017440796, \
-2.908308267593384, -0.48695436120033264`}, {-0.9814897179603577, \
-0.32749828696250916`, -0.28614771366119385`, -0.8372399806976318}, {
                    0.3182300329208374, 
                    0.1996791958808899, -0.3122684061527252, 
                    0.7359107136726379}, {1.2977542877197266`, 
                    0.28099775314331055`, -1.060470461845398, \
-0.36558130383491516`}}], "Biases" -> 
                    RawArray["Real32",{0.22945696115493774`, 0., 
                    0.3949333429336548, 0.16519878804683685`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7585293650627136, -1.1807243824005127`, 
                    0.6534357070922852, -0.26351964473724365`}, \
{-1.112922191619873, 0.17868958413600922`, 
                    1.4414318799972534`, -1.1912803649902344`}, {
                    0.31313610076904297`, 
                    0.05311939865350723, -0.7185114026069641, 
                    1.1544849872589111`}, {0.7256407141685486, 
                    0.9326233267784119, 0.028320958837866783`, 
                    0.2747834324836731}}], "Biases" -> 
                    RawArray["Real32",{0.2263377159833908, 
                    0.09536410123109818, 
                    0.23931525647640228`, -0.015928028151392937`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.9092296957969666, 
                    0.7737902402877808, -0.5791275501251221, 
                    0.007331222761422396}, {-0.3860591948032379, 
                    0.7988179326057434, 0.483842134475708, 
                    0.7352887988090515}, {
                    0.19772590696811676`, -1.0622608661651611`, \
-0.7747647166252136, 0.07980397343635559}, {
                    0.5633371472358704, -0.814481258392334, \
-0.4070219397544861, -1.0397902727127075`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.26312559843063354`, -0.09947662800550461, \
-0.020687200129032135`, -0.03377986699342728}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2686201333999634`, 
                    0.24814386665821075`, -0.27694377303123474`, 
                    0.5479679107666016}, {0.0696205124258995, 
                    1.102692723274231, 
                    1.0082558393478394`, -0.8493449091911316}, \
{-0.12962917983531952`, -0.6112529039382935, -1.1061062812805176`, 
                    0.1692829132080078}, {-0.17391467094421387`, \
-1.1689257621765137`, 0.9973315596580505, -0.7050062417984009}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.093745157122612, -0.05702408775687218, 0., 
                    0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.7096297740936279, -0.3120685815811157, 
                    1.0470035076141357`, 0.19487692415714264`}, {
                    0.009518268518149853, -0.9735857844352722, 
                    0.15269295871257782`, 
                    0.2565949261188507}, {-0.11307663470506668`, \
-1.1760481595993042`, 
                    1.039278507232666, -0.01588474214076996}, \
{-0.8765694499015808, 
                    1.1391587257385254`, -1.179132342338562, \
-0.9810775518417358}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.09613307565450668, -0.031668826937675476`, 
                    0., -0.03938092663884163}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.5577342510223389, -1.0093947649002075`, \
-0.41194576025009155`, -0.3543873131275177}, {1.0553799867630005`, 
                    1.1880255937576294`, -0.30832621455192566`, \
-0.4425933361053467}, {-1.3836721181869507`, 0.09204135090112686, 
                    0.8451066017150879, 0.22725027799606323`}, {
                    0.7735462784767151, 
                    0.21771612763404846`, -0.5773540735244751, \
-1.2089533805847168`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.8894547820091248, -0.4685942828655243, \
-0.20228110253810883`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.07895833253860474, 
                    0.3609413206577301, 0.4526773691177368, 
                    0.37655872106552124`}, {
                    0.8290538191795349, -0.023191213607788086`, \
-0.12195669859647751`, -0.31643494963645935`}, {
                    0.7179055213928223, -0.08120162039995193, \
-0.26662132143974304`, -0.5745231509208679}, {
                    0.11935969442129135`, -0.5377625226974487, \
-0.52306067943573, 0.5917158126831055}}], "Biases" -> 
                    RawArray["Real32",{0., 0.037078045308589935`, 
                    0., -0.022038575261831284`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.8302268981933594, 1., 
                    1.316287636756897}], "Biases" -> 
                    RawArray["Real32",{0., 0.15166693925857544`, 
                    0., -0.45056086778640747`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.39726001024246216`, -0.0194294061511755, \
-0.14308758080005646`, -0.48614558577537537`}], "MovingVariance" -> 
                    RawArray["Real32",{0.05312395840883255, 
                    0.002626831643283367, 0.01282864436507225, 
                    0.04547467827796936}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_3net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2269245386123657`, 
                    0.5300783514976501}, {-1.0680961608886719`, 
                    
                    1.2279157638549805`}, {-0.9560098648071289, \
-0.6157021522521973}, {-1.3427678346633911`, -0.5092048645019531}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.055263977497816086`, -0.0357687771320343, 
                    0.009987019933760166, -0.409896582365036}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2102319300174713, 
                    0.7911170721054077, 0.7531107068061829, 
                    0.05388656258583069}, {
                    0.7294581532478333, -1.0154672861099243`, \
-0.8989071249961853, -0.8402823805809021}, {0.8225075602531433, 
                    1.0055885314941406`, -0.8146655559539795, 
                    0.14929859340190887`}, {
                    0.3443886935710907, -0.23406171798706055`, 
                    0.648874044418335, -0.974784791469574}}], "Biases" -> 
                    RawArray["Real32",{
                    0.10877753049135208`, -0.10987579822540283`, \
-0.05968782678246498, 0.007396911736577749}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.5818372368812561, 
                    0.6368904113769531, -0.6741195321083069, \
-0.9550532102584839}, {-0.9334428906440735, -0.2268291413784027, \
-1.1252663135528564`, 1.0908485651016235`}, {
                    0.49197691679000854`, -0.903556227684021, 
                    0.16529005765914917`, 
                    0.7606364488601685}, {-0.060122277587652206`, \
-0.559829831123352, -0.7184230089187622, 0.19126306474208832`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.09598984569311142, 
                    0.11792483925819397`, -0.0518016554415226}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.05107980966567993, -0.5076199173927307, 
                    0.8656588792800903, 1.169507384300232}, {
                    0.043214909732341766`, -0.12430473417043686`, 
                    1.0353971719741821`, 
                    0.2244076430797577}, {-0.004986797459423542, 
                    0.7752837538719177, -0.08317965269088745, \
-0.519730269908905}, {-0.1021399050951004, 
                    0.12337113171815872`, -0.1672910451889038, \
-0.06014348939061165}}], "Biases" -> 
                    RawArray["Real32",{-0.07721059769392014, 
                    0.09335753321647644, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.5864083170890808, -1.1515958309173584`, \
-0.9700015187263489, -1.0751793384552002`}, {-0.44147804379463196`, 
                    0.904954195022583, -0.572465717792511, \
-0.07864737510681152}, {0.8050349950790405, -1.1519731283187866`, 
                    0.5112066864967346, 
                    0.06149987503886223}, {-0.2646709978580475, 
                    0.6335101127624512, -0.013110958971083164`, \
-0.9270269870758057}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.02993219904601574, -0.005128767807036638, 
                    0.016426386311650276`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.3305329382419586, -1.0482378005981445`, \
-0.1924656182527542, -0.7495168447494507}, {
                    0.47665491700172424`, -0.5365244150161743, 
                    1.124621868133545, 0.6901269555091858}, {
                    1.1700797080993652`, 0.4269246757030487, 
                    1.1931535005569458`, 0.17938324809074402`}, {
                    0.3727201223373413, 
                    0.7936676144599915, -1.1791568994522095`, 
                    0.9097337126731873}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.007643654942512512, -0.08279790729284286, 
                    0.09779099375009537}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.41163170337677, 1.0882995128631592`,
                     0.0033295280300080776`, -0.19062167406082153`}, {
                    1.1305721998214722`, -0.7240346670150757, \
-0.5251972675323486, -0.7583861947059631}, {-0.9256356954574585, \
-0.7151260375976562, -0.14005182683467865`, 
                    0.4736833870410919}, {-0.78333580493927, 
                    0.30321186780929565`, -0.9420959949493408, \
-0.8564635515213013}}], "Biases" -> 
                    RawArray["Real32",{-0.07011282444000244, 0., 
                    0.03244610130786896, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.7035068273544312, 
                    0.18534383177757263`, 0.0613018162548542, 
                    0.11431510001420975`}, {
                    0.4332052171230316, -0.5943752527236938, \
-0.8540732860565186, -0.13494515419006348`}, {-0.21640744805335999`, 
                    0.8409658670425415, -0.45774969458580017`, 
                    0.2688940465450287}, {
                    0.16293755173683167`, -0.7081860303878784, \
-0.43753185868263245`, 0.13354924321174622`}}], "Biases" -> 
                    RawArray["Real32",{0.006494243163615465, 
                    0., -0.055063627660274506`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.046222977340221405`, 1., 
                    1.0855382680892944`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.4094805121421814, 0., 
                    0.3329516053199768, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.037118829786777496`, -0.42928051948547363`, \
-0.28365957736968994`, -0.21991543471813202`}], "MovingVariance" -> 
                    RawArray["Real32",{0.00012735245400108397`, 
                    0.025137698277831078`, 0.007188437506556511, 
                    0.006597123574465513}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6084913015365601, 
                    0.34091585874557495`}, {
                    0.35409799218177795`, -0.7107595205307007}, \
{-0.47736838459968567`, 1.3376765251159668`}, {
                    1.0174744129180908`, -0.40096160769462585`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.08730413764715195, -0.30411016941070557`, 
                    0.08460777997970581, 0.1346454918384552}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7835296988487244, -0.2876985967159271, \
-0.7150038480758667, -0.441653847694397}, {-0.6377336978912354, 
                    2.105273485183716, 0.03946137800812721, 
                    0.962832510471344}, {-0.5244331359863281, \
-0.6607128381729126, 
                    0.8806125521659851, -0.4075981080532074}, \
{-0.0207088440656662, -0.8347008228302002, -0.21375447511672974`, \
-1.024819254875183}}], "Biases" -> 
                    RawArray["Real32",{0., 0.10184445232152939`, 
                    0.2095145285129547, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.25878214836120605`, -0.6802108287811279, 
                    0.23190860450267792`, -0.5543636083602905}, \
{-1.0917338132858276`, -0.141453817486763, -0.7815151810646057, \
-1.0538750886917114`}, {-0.9915717244148254, 1.0146677494049072`, 
                    0.46070724725723267`, 1.2237516641616821`}, {
                    0.18021562695503235`, -1.0064103603363037`, 
                    0.028769556432962418`, 1.207274317741394}}], "Biases" -> 
                    RawArray["Real32",{-0.17457066476345062`, 0., 
                    0.14317403733730316`, -0.03311567381024361}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7010096907615662, 
                    0.5386219024658203, 0.13931305706501007`, 
                    1.0312293767929077`}, {
                    0.7909489870071411, -0.42114776372909546`, 
                    0.24118812382221222`, -0.9541829228401184}, {
                    0.48835626244544983`, -0.46471327543258667`, 
                    0.619662880897522, 
                    0.6258669495582581}, {-0.99852454662323, \
-0.3097281754016876, 0.25753268599510193`, -0.12958447635173798`}}], "Biases" -> 
                    RawArray["Real32",{0.05355251580476761, 
                    0.05030385032296181, 
                    0.12225575000047684`, -0.05507795140147209}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7661686539649963, 
                    0.7926455140113831, -1.0148553848266602`, \
-0.2221817821264267}, {0.6779279708862305, 0.4717486798763275, 
                    0.6864776611328125, -1.1918736696243286`}, {
                    0.7604702711105347, 
                    1.1436012983322144`, -0.9900761842727661, \
-0.9546067714691162}, {0.14667591452598572`, 
                    0.5370497703552246, -0.7491148114204407, 
                    0.08863148838281631}}], "Biases" -> 
                    RawArray["Real32",{-0.005557596683502197, 
                    0.08889354765415192, -0.039164479821920395`, \
-0.00436381995677948}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6535167694091797, 
                    0.9468663334846497, -0.6574264168739319, \
-0.5250082015991211}, {-1.0625808238983154`, -0.00959259457886219, 
                    1.0252410173416138`, -0.7745680212974548}, \
{-0.7256602048873901, -0.15038423240184784`, 
                    1.0325127840042114`, -0.8182397484779358}, \
{-0.7448923587799072, 
                    0.2248680740594864, -0.4737423360347748, \
-1.117297887802124}}], "Biases" -> 
                    RawArray["Real32",{
                    0.006623828783631325, -0.030691642314195633`, \
-0.005555391777306795, 0.02767174318432808}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.4338841438293457, 
                    0.02327045425772667, 
                    0.003029894083738327, -0.8972814679145813}, \
{-0.2538984417915344, -0.8802012801170349, 0.6719919443130493, 
                    1.069201946258545}, {
                    0.1005774438381195, -0.8963965773582458, \
-0.9779155254364014, -0.4103488326072693}, {-0.23362062871456146`, \
-0.38641712069511414`, 0.3283616006374359, 0.06959308683872223}}], "Biases" -> 
                    RawArray["Real32",{0.06830772012472153, 
                    0.08361774682998657, -0.0053450302220880985`, \
-0.006242052186280489}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.7368323802947998, 
                    0.8498879671096802, -0.4320899248123169, 
                    0.8462148904800415}, {0.581718385219574, 
                    0.09062107652425766, 
                    0.7757717967033386, -0.22117385268211365`}, \
{-0.5401679873466492, 0.4012470841407776, -0.3824312686920166, 
                    0.21749524772167206`}, {-0.3506982624530792, \
-0.05828291177749634, -0.6220205426216125, 0.7043546438217163}}], "Biases" -> 
                    RawArray["Real32",{0., -0.0989883542060852, 0., 
                    0.034546662122011185`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0943498611450195`, 1., 
                    0.5707899332046509}], "Biases" -> 
                    RawArray["Real32",{0., -0.011473491787910461`, 0., 
                    0.02301899343729019}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.016649531200528145`, \
-0.0011380029609426856`, -0.036924321204423904`, -0.02508625201880932}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00038284322363324463`, 
                    0.0002371612936258316, 0.0002056993980659172, 
                    0.00008736725430935621}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.0232733488082886`, 
                    0.4123275578022003}, {-0.42913058400154114`, \
-0.7507485747337341}, {-0.6771546006202698, -0.42921799421310425`}, \
{-1.1501773595809937`, -0.5237459540367126}}], "Biases" -> 
                    RawArray["Real32",{-0.06611915677785873, 
                    0.38374435901641846`, -0.21494361758232117`, \
-0.08891620486974716}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.938681423664093, 
                    0.5236425399780273, -0.4462301731109619, 
                    0.7413621544837952}, {
                    0.36929574608802795`, -0.5489752292633057, \
-0.3339131772518158, 0.44864922761917114`}, {-0.6584511995315552, 
                    0.2634795606136322, 
                    1.1334044933319092`, -0.7523109912872314}, \
{-0.03542015701532364, -0.8779085874557495, -0.809063196182251, 
                    0.03728779777884483}}], "Biases" -> 
                    RawArray["Real32",{-0.10400308668613434`, 
                    0.2816414535045624, -0.09269170463085175, \
-0.004481355659663677}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.24621422588825226`, 
                    0.985656201839447, 0.09558389335870743, 
                    1.2012335062026978`}, {
                    0.7117063999176025, -0.4811817705631256, \
-0.2930569648742676, -0.07616393268108368}, {1.1045162677764893`, 
                    0.2911427617073059, -0.34115180373191833`, \
-0.8265060782432556}, {-0.9755216836929321, 0.4526450037956238, 
                    0.43766549229621887`, 0.5006574988365173}}], "Biases" -> 
                    RawArray["Real32",{0.013371359556913376`, 
                    0.04690810665488243, -0.03512047231197357, \
-0.1534721404314041}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.9985904693603516, 
                    0.3187827467918396, -1.0587326288223267`, \
-1.0089114904403687`}, {
                    0.43743884563446045`, -0.15510369837284088`, \
-0.9138410687446594, 0.3631367087364197}, {
                    0.9080770611763, -0.3844505250453949, 
                    0.6118550896644592, -0.5183600187301636}, {
                    0.6724507212638855, 0.93711918592453, 0.4640797972679138, 
                    0.9890212416648865}}], "Biases" -> 
                    RawArray["Real32",{
                    0.027951490134000778`, -0.10686809569597244`, 
                    0.013608737848699093`, -0.06892822682857513}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2668100893497467, 
                    0.15058819949626923`, -1.1104614734649658`, 
                    0.03640010580420494}, {-0.13042515516281128`, 
                    0.7564303874969482, 
                    0.006577329710125923, -0.6690428853034973}, \
{-0.5001853704452515, 0.4691876769065857, 
                    0.7996487021446228, -0.14533911645412445`}, {
                    0.4526841938495636, 0.8468631505966187, 
                    0.09007269889116287, -0.23484553396701813`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0052228025160729885`, -0.005015995819121599, 
                    0.04361181706190109, 0.20404070615768433`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.1011145114898682`, 
                    0.7110188603401184, 0.5675764083862305, 
                    0.9290199875831604}, {
                    0.22922439873218536`, -0.3610682487487793, 
                    0.17099426686763763`, 0.6951537132263184}, {
                    0.3940970301628113, 0.389936625957489, 
                    0.21339713037014008`, -0.9525924921035767}, {
                    0.40970227122306824`, -0.8975924849510193, 
                    1.0971708297729492`, 0.16968782246112823`}}], "Biases" -> 
                    RawArray["Real32",{0.0006359686376526952, 
                    0.025261353701353073`, -0.20041799545288086`, \
-0.0014764054212719202`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.6824387907981873, 
                    0.1007201224565506, -0.13071443140506744`, \
-0.9145658612251282}, {-0.2611132264137268, -0.4049318730831146, \
-0.3291284143924713, -0.40765678882598877`}, {0.4567570090293884, 
                    0.23558172583580017`, 0.21312430500984192`, 
                    0.0910617858171463}, {0.15193194150924683`, 
                    0.8316170573234558, -0.14471234381198883`, \
-0.26284971833229065`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0.00010937114711850882`, 
                    0.01756111904978752}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.5749830007553101, -0.5930800437927246, 
                    0.07424910366535187, 0.11974163353443146`}, {
                    0.5756600499153137, 0.14637413620948792`, 
                    0.6387523412704468, -0.14677976071834564`}, {
                    0.6429774165153503, 0.32796573638916016`, 
                    0.5578079223632812, -0.08706668764352798}, {
                    0.7294813394546509, -0.5185415148735046, \
-0.3751922845840454, -0.19885247945785522`}}], "Biases" -> 
                    RawArray["Real32",{0.10288982093334198`, 
                    0., -0.053429532796144485`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.7660358548164368, 1., 
                    0.6746312379837036, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.1611233502626419, 
                    0., -0.16056616604328156`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.1324150562286377, 
                    0.14110837876796722`, 
                    0.07327874004840851, -0.11011964827775955`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00007790406380081549, 
                    0.004116098862141371, 0.0031010578386485577`, 
                    0.001395107712596655}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.6247974634170532, 
                    1.0719972848892212`}, {-0.8147713541984558, \
-0.951488196849823}, {0.4458984434604645, 
                    1.009402871131897}, {-0.6509699821472168, 
                    0.6131016612052917}}], "Biases" -> 
                    RawArray["Real32",{-0.30463317036628723`, 
                    0.23118887841701508`, 
                    0.06617609411478043, -0.30046290159225464`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.308014988899231, 
                    0.41012367606163025`, 
                    1.1328684091567993`, -0.6759518980979919}, \
{-0.06172512471675873, -0.27633190155029297`, 1.1597766876220703`, 
                    1.054457664489746}, {
                    1.1483964920043945`, -1.1610616445541382`, \
-0.32596054673194885`, 1.2034265995025635`}, {
                    0.2506335377693176, -0.5807443261146545, 
                    0.09045513719320297, -0.3083084225654602}}], "Biases" -> 
                    RawArray["Real32",{
                    0.024193117395043373`, -0.22505512833595276`, \
-0.05639704689383507, 0.3493075966835022}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.2778819501399994, 
                    0.7496756315231323, 1.0025731325149536`, 
                    0.5138924717903137}, {-0.7969806790351868, \
-0.2784910798072815, -0.546769380569458, 0.6271833777427673}, {
                    0.5501472353935242, 1.320475697517395, 0.7035324573516846,
                     1.2081241607666016`}, {0.9598748087882996, 
                    0.6415534615516663, -1.3248586654663086`, 
                    0.24694617092609406`}}], "Biases" -> 
                    RawArray["Real32",{-0.17849385738372803`, 
                    0.2985064685344696, -0.1312658190727234, 
                    0.1636054366827011}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.2408421039581299`, 
                    0.6402130722999573, -0.5636037588119507, 
                    0.7157518267631531}, {
                    0.7387978434562683, -1.0216920375823975`, 
                    0.22834144532680511`, 0.30655571818351746`}, {
                    0.5690512657165527, -0.35685232281684875`, \
-0.41032058000564575`, -1.1276694536209106`}, {0.022032486274838448`, 
                    0.18081532418727875`, -0.7020317912101746, 
                    0.533079206943512}}], "Biases" -> 
                    RawArray["Real32",{
                    0.13038139045238495`, -0.26013192534446716`, \
-0.03431916981935501, 0.26744359731674194`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.884698212146759, -0.9137963056564331, \
-0.6820396184921265, -1.1969163417816162`}, {1.02857506275177, 
                    0.6642537713050842, 0.028140507638454437`, 
                    0.06875970214605331}, {-0.09183403104543686, 
                    0.0021497849375009537`, -0.2629159390926361, \
-0.16911469399929047`}, {0.6566782593727112, 0.6675363183021545, 
                    0.553555428981781, 1.0056182146072388`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.05621147155761719, -0.010769825428724289`, 
                    0.07819464057683945}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1.2057257890701294`, 
                    0.24814435839653015`, 1.1151946783065796`, 
                    0.49364256858825684`}, {-0.34746411442756653`, 
                    0.6987231373786926, 0.943751871585846, 
                    0.7946571707725525}, {
                    0.46374526619911194`, -0.4114575982093811, 
                    0.6955560445785522, 
                    0.3322679400444031}, {-0.47509536147117615`, \
-1.0886939764022827`, 0.07419174164533615, 0.6524626612663269}}], "Biases" -> 
                    RawArray["Real32",{
                    0.013026686385273933`, -0.007407285738736391, 
                    0.11372725665569305`, -0.07177607715129852}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.723952054977417, 0.631230354309082,
                     0.07747747749090195, 
                    0.4074034094810486}, {-1.197285771369934, \
-0.5476441979408264, -0.5596575736999512, 
                    1.183302879333496}, {-0.8752565979957581, \
-0.4132252037525177, 0.293244332075119, 0.21619480848312378`}, {
                    0.4112408757209778, -0.07134272903203964, 
                    0.25418463349342346`, 0.15527468919754028`}}], "Biases" -> 
                    RawArray["Real32",{0.06009580194950104, 0., 0., 
                    0.009850728325545788}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.6709763407707214, -0.8419735431671143, \
-0.6108553409576416, 
                    0.31385189294815063`}, {-0.3921840488910675, \
-0.27944886684417725`, -0.44053006172180176`, 
                    0.30910852551460266`}, {-0.07277870178222656, 
                    0.5416227579116821, -0.749184787273407, \
-0.22155964374542236`}, {-0.03492600470781326, -0.5857563018798828, \
-0.289907842874527, -0.40806424617767334`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.03365085646510124, 0., 
                    0.04534592106938362}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.51395183801651, 1., 
                    0.9517407417297363}], "Biases" -> 
                    RawArray["Real32",{0., 0.2162855863571167, 
                    0., -0.33053067326545715`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.2486773431301117, -0.09127230942249298, \
-0.06003804877400398, -0.03530314937233925}], "MovingVariance" -> 
                    RawArray["Real32",{0.004154358524829149, 
                    0.00032402551732957363`, 0.00022630792227573693`, 
                    0.00040684040868654847`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_2net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.0272393226623535`, 
                    1.1851426362991333`}, {-1.1013171672821045`, 
                    1.3560041189193726`}, {-0.2645794451236725, 
                    0.8190812468528748}, {0.2288351058959961, 
                    0.5987197160720825}}], "Biases" -> 
                    RawArray["Real32",{0.020290987566113472`, 
                    0.02084389515221119, -0.020147942006587982`, \
-0.020126312971115112`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.24388974905014038`, 
                    0.4529878795146942, -1.1013665199279785`, \
-0.1728794127702713}, {
                    0.4499173164367676, -1.1148042678833008`, \
-0.5451153516769409, -0.17451262474060059`}, {-0.8063437938690186, \
-0.12459979951381683`, 1.1342663764953613`, 0.8231135010719299}, {
                    0.05881085246801376, -0.11509258300065994`, \
-1.204534888267517, 0.33516672253608704`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020205922424793243`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.32763224840164185`, -1.1029812097549438`, \
-1.1657968759536743`, 0.07768034934997559}, {
                    0.5615560412406921, -0.18220843374729156`, \
-0.6637734770774841, 1.1732587814331055`}, {0.5226121544837952, 
                    0.09836286306381226, 0.663692057132721, 
                    0.5882529020309448}, {-1.1400552988052368`, 
                    0.48360323905944824`, -0.0822700560092926, \
-0.4636894762516022}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020308714359998703`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.6304903030395508, -0.17651955783367157`, \
-0.46612972021102905`, 0.6061276793479919}, {-0.4681702256202698, 
                    0.5416781306266785, 
                    0.5326633453369141, -0.21141549944877625`}, {
                    0.095125213265419, 1.1963318586349487`, 
                    0.6131061911582947, 
                    0.16446593403816223`}, {-0.04447731375694275, 
                    0.8583840727806091, -0.6535158157348633, \
-0.8978548645973206}}], "Biases" -> 
                    RawArray["Real32",{0., -0.02120339125394821, 
                    0.02140180952847004, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.4623880088329315, 
                    0.9883906841278076, -0.6045739054679871, \
-0.1552111953496933}, {-0.6422726511955261, 
                    0.015349535271525383`, -0.8583002686500549, \
-0.9189561009407043}, {-0.6069546937942505, 
                    0.2909195125102997, -0.3387618958950043, \
-0.2795550227165222}, {-1.1471445560455322`, -0.769105076789856, 
                    0.006018396466970444, 1.1222515106201172`}}], "Biases" -> 
                    RawArray["Real32",{-0.02127707563340664, 0., 
                    0., -0.0055557615123689175`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.03880154713988304, 
                    0.1930888295173645, -0.2744407653808594, 
                    0.9316576719284058}, {
                    1.04044508934021, -0.5252693295478821, 
                    1.1132738590240479`, -0.17558589577674866`}, {
                    0.23562754690647125`, -0.11817649751901627`, \
-0.8234222531318665, -0.994630753993988}, {
                    1.1251013278961182`, -0.18200336396694183`, 
                    0.7495065927505493, 0.5922220349311829}}], "Biases" -> 
                    RawArray["Real32",{-0.008491064421832561, 
                    0.0037082810886204243`, -0.00048256112495437264`, \
-0.013342808000743389`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.5927290916442871, -0.5807473659515381, 
                    0.04569912701845169, 0.5453850030899048}, {
                    0.3536730706691742, -0.3382004201412201, 
                    0.3208562731742859, -1.1065701246261597`}, \
{-0.043284542858600616`, 0.31835034489631653`, 0.22545592486858368`, 
                    1.1699867248535156`}, {0.4927527606487274, 
                    0.26720207929611206`, -0.5632683038711548, \
-0.3714267313480377}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008471638895571232, -0.006288113072514534, \
-0.024764614179730415`, -0.002935498021543026}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.8400803208351135, -0.2918619215488434, \
-0.36224615573883057`, -0.4248539209365845}, {0.21804450452327728`, 
                    0.6871101260185242, -0.09039194136857986, 
                    0.6381481289863586}, {-0.017969254404306412`, \
-0.2533146142959595, -0.5403133630752563, -0.6244195699691772}, \
{-0.557862401008606, -0.3409421443939209, -0.08292922377586365, 
                    0.37390872836112976`}}], "Biases" -> 
                    RawArray["Real32",{0.14098723232746124`, 
                    0., -0.1755669116973877, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.0340676307678223`, 1., 
                    0.9480414390563965, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.11188255250453949`, 
                    0., -0.03459589555859566, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.14253473281860352`, 
                    5.605193857299268*^-45, -0.17651954293251038`, 
                    5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_BBcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.23329117894172668`, 
                    0.43448686599731445`}, {-0.5498430132865906, \
-0.2333453744649887}, {
                    0.127238467335701, -0.3405781686306}, \
{-1.3462013006210327`, -1.2543599605560303`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.032579317688941956`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.1024048328399658`, 
                    0.7728956937789917, -0.06355833262205124, 
                    1.0792820453643799`}, {-0.6330763697624207, \
-0.6129856109619141, -0.6057496070861816, -0.7020090818405151}, {
                    0.3616458475589752, -0.8576364517211914, \
-0.05248260870575905, 0.8957068920135498}, {-0.8764091730117798, 
                    0.6311792731285095, 
                    0.5927261710166931, -0.298856258392334}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.03286946564912796}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.24815647304058075`, -0.37761324644088745`, \
-1.100022554397583, 
                    0.6481032371520996}, {-0.6488040685653687, \
-0.679099977016449, 
                    0.2214793711900711, -0.601083517074585}, \
{-1.1225425004959106`, 
                    1.0572394132614136`, -1.221137523651123, \
-0.21756841242313385`}, {-0.34284016489982605`, -0.961559534072876, \
-0.9971440434455872, -0.7323741912841797}}], "Biases" -> 
                    RawArray["Real32",{-0.0331658273935318, 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.2651151418685913, -0.8428170680999756, 
                    0.4288094937801361, -0.6984238624572754}, \
{-0.36055707931518555`, -0.40606963634490967`, 
                    0.18076859414577484`, -0.8186793923377991}, {
                    0.3470284640789032, -0.7862091660499573, 
                    1.0312302112579346`, -1.1828734874725342`}, \
{-0.7150039672851562, 0.02474166825413704, 0.4519364535808563, 
                    0.24253782629966736`}}], "Biases" -> 
                    RawArray["Real32",{0.04722980037331581, 
                    0., -0.07259402424097061, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.49899449944496155`, -1.1440858840942383`, \
-0.5056160688400269, -0.9733536243438721}, {-0.9348592758178711, \
-0.2542707324028015, 1.079600214958191, 
                    0.0029605808667838573`}, {-0.3890341520309448, \
-0.12657929956912994`, 0.02132675051689148, -0.4675881266593933}, {
                    0.5685173869132996, -0.45166826248168945`, \
-0.9953811764717102, -0.35574910044670105`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008726036176085472, -0.050475168973207474`, 
                    0., 0.01855863258242607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.8794720768928528, 
                    0.45291027426719666`, -1.1260080337524414`, \
-0.4375465512275696}, {-0.5684416890144348, 
                    0.4649476706981659, -0.24840471148490906`, \
-0.28038305044174194`}, {-0.8279221653938293, 
                    0.4214527904987335, -0.2367471605539322, \
-1.2243705987930298`}, {-0.17251811921596527`, 0.9857721328735352, 
                    1.1452807188034058`, 0.36024707555770874`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.011650129221379757`, -0.01572592556476593, \
-0.012774167582392693`, -0.030365219339728355`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.327743262052536, 0.7532622814178467,
                     0.7607889175415039, 
                    1.1032756567001343`}, {-0.2636410892009735, \
-0.13159549236297607`, -0.22760000824928284`, -0.846391499042511}, {
                    0.08058207482099533, -0.8095343708992004, 
                    0.5150863528251648, 0.1342550665140152}, {
                    0.8215001821517944, 
                    0.5603652000427246, -0.7315725088119507, 
                    0.8480975031852722}}], "Biases" -> 
                    RawArray["Real32",{-0.026365989819169044`, 
                    0., -0.0005013612098991871, -0.044547807425260544`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.32944807410240173`, 
                    0.5410114526748657, -0.7933152914047241, \
-0.8292582631111145}, {0.4512331187725067, -0.12782202661037445`, 
                    0.023232072591781616`, 0.8463086485862732}, {
                    0.5111056566238403, 0.8652687668800354, 
                    0.7632277011871338, 0.24700802564620972`}, {
                    0.13815216720104218`, -0.7928653359413147, 
                    0.38433071970939636`, -0.7218269109725952}}], "Biases" -> 
                    RawArray["Real32",{0., -0.01726776547729969, 
                    0., -0.03475910797715187}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0376012325286865`, 1., 
                    0.952485203742981}], "Biases" -> 
                    RawArray["Real32",{0., 0.07142296433448792, 0., 
                    0.35761305689811707`}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-5.605193857299268*^-45, -0.017946388572454453`,
                     5.605193857299268*^-45, -0.034391891211271286`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_WWcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.8957763910293579, 
                    0.3623362183570862}, {-0.174520343542099, 
                    0.9252927303314209}, {-0.1321897804737091, 
                    1.408540964126587}, {-0.429532915353775, 
                    0.6881443858146667}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.9142180681228638, -0.3998311460018158, 
                    0.373794823884964, -0.8428809642791748}, \
{-1.013462781906128, -0.9153012633323669, 
                    1.2214096784591675`, -0.8198782205581665}, {
                    0.05613064020872116, -1.1520932912826538`, \
-0.2508637011051178, 1.1238369941711426`}, {0.9063417315483093, 
                    0.021235918626189232`, 1.1031527519226074`, 
                    0.7188641428947449}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.09319031983613968, 
                    1.0391968488693237`, 
                    0.270325243473053, -0.6375017166137695}, {
                    0.9597233533859253, -0.16874465346336365`, 
                    0.22008773684501648`, -1.0515003204345703`}, \
{-0.6845393776893616, -0.9731258153915405, -0.014127678237855434`, \
-0.6081287860870361}, {-1.1281071901321411`, -0.6320348381996155, \
-0.7507789731025696, -0.836697518825531}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.1619548201560974, 
                    0.6321669816970825, -0.12518945336341858`, \
-0.8754209280014038}, {0.42449310421943665`, 0.09920264780521393, 
                    1.120271921157837, -0.2694827914237976}, {
                    0.7911468744277954, 
                    0.107190802693367, -0.15914228558540344`, \
-0.7212669253349304}, {
                    0.45065775513648987`, -0.7895684242248535, \
-0.5509428977966309, -0.7949679493904114}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.7017349004745483, -0.5246540307998657, 
                    0.44179415702819824`, 
                    0.9635450839996338}, {-1.0937368869781494`, 
                    0.3026067614555359, 0.6850050687789917, 
                    0.3425700068473816}, {-0.1728016585111618, \
-0.728571355342865, -0.5919033288955688, 
                    0.519510805606842}, {-0.3456636965274811, \
-0.5398943424224854, 1.1310919523239136`, -0.7293530106544495}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.3090231418609619, -1.064344882965088, 
                    0.8869056701660156, 0.5164023041725159}, {
                    1.1150511503219604`, 
                    1.074715256690979, -1.0552726984024048`, 
                    0.646506130695343}, {-0.9056016802787781, \
-0.989912748336792, -0.6263928413391113, 0.06015612930059433}, {
                    1.0773271322250366`, 
                    0.3191694915294647, -0.6086782813072205, \
-1.1192924976348877`}}], "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.9385467171669006, -0.9668304920196533, \
-0.26482826471328735`, -0.07200281322002411}, {-0.7782991528511047, \
-0.7488662004470825, -0.847709059715271, 
                    0.68807452917099}, {-0.8480285406112671, 
                    0.22617769241333008`, 
                    0.7120975255966187, -1.198423147201538}, \
{-1.0725282430648804`, 1.0682932138442993`, 
                    0.7012400031089783, -0.7183460593223572}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.5295577049255371, 
                    0.3512469232082367, 
                    0.2275642305612564, -0.06166284903883934}, \
{-0.7875308990478516, -0.5696789622306824, -0.6910265684127808, 
                    0.08407719433307648}, {0.25443747639656067`, 
                    0.8309063911437988, 0.7666983008384705, 
                    0.2845258116722107}, {-0.8493523001670837, 
                    0.3944772183895111, 0.11803640425205231`, 
                    0.08188746124505997}}], "Biases" -> 
                    RawArray["Real32",{-0.15906153619289398`, 0., 
                    0.017862647771835327`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.1062151193618774`, 1., 
                    1.0263330936431885`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.08614708483219147, 
                    0., -0.03560680150985718, 0.}], "MovingMean" -> 
                    RawArray["Real32",{-0.1589561104774475, 0., 
                    0.01827838644385338, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_Bcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-1.0055826902389526`, -0.9614297151565552}, {
                    0.9427697658538818, -0.7433678507804871}, \
{-0.4351021945476532, 0.04881863296031952}, {-0.9517213106155396, 
                    0.9961529970169067}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.19117866456508636`, 
                    0.27121517062187195`, -0.1893296241760254, \
-0.4572905898094177}, {0.708571195602417, 0.16505128145217896`, 
                    1.0478155612945557`, -0.656966507434845}, {
                    0.29914435744285583`, -0.7274119257926941, 
                    1.0795044898986816`, -0.7368828058242798}, {
                    0.6509546637535095, -0.9017858505249023, 
                    0.14681188762187958`, -0.6649592518806458}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.46432384848594666`, 
                    0.908102810382843, 1.0478026866912842`, 
                    0.8622851967811584}, {-0.21355552971363068`, \
-0.2557402551174164, -1.1127070188522339`, 
                    0.6246770024299622}, {-0.7064324021339417, \
-0.29214048385620117`, -0.30093252658843994`, -0.7913140058517456}, \
{-0.2682134807109833, -1.0217411518096924`, -1.0430132150650024`, 
                    1.1392306089401245`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.6836269497871399, -0.30448874831199646`, \
-0.5775110125541687, 
                    0.4721684455871582}, {-0.570763349533081, \
-0.8921632170677185, 
                    0.4863985776901245, -1.2229053974151611`}, \
{-0.4215686619281769, -0.9302003383636475, -0.7996142506599426, 
                    1.215777039527893}, {-0.6872756481170654, \
-0.6428603529930115, 0.386488676071167, -0.9340691566467285}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.531825840473175, 
                    1.0124754905700684`, -0.9074230194091797, \
-0.7805092334747314}, {
                    1.098265528678894, -0.24796715378761292`, \
-0.11630570888519287`, -0.8168771266937256}, {
                    0.8796766996383667, -0.18376733362674713`, \
-0.03014848753809929, 0.46239835023880005`}, {
                    0.8197591304779053, -0.939045786857605, \
-0.5731520652770996, -0.3073666989803314}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.06325596570968628, 
                    1.1152753829956055`, -0.6454733610153198, 
                    0.887650191783905}, {0.5683873295783997, 
                    0.2518492341041565, -0.9079412817955017, \
-0.963146984577179}, {0.13283513486385345`, 
                    0.7189369797706604, -0.33037254214286804`, 
                    0.0840630754828453}, {0.07897438108921051, 
                    0.08171245455741882, -0.33058255910873413`, 
                    0.11540823429822922`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-0.4389474391937256, 
                    0.7196488976478577, 0.09832611680030823, 
                    0.6244978308677673}, {-0.3684132695198059, \
-0.5929128527641296, -0.20331576466560364`, 
                    1.0255637168884277`}, {-0.1422601044178009, 
                    0.8687633872032166, -0.3134025037288666, \
-0.8768927454948425}, {-0.3123319447040558, 0.13173586130142212`, 
                    1.1398409605026245`, -0.04513677582144737}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{
                    0.28371381759643555`, -0.022410541772842407`, \
-0.7774190902709961, 0.5423662662506104}, {
                    0.4330427944660187, -0.6156600117683411, 
                    0.3195442855358124, -0.852202832698822}, {
                    0.4456996023654938, 0.6105488538742065, 
                    0.7942044138908386, 
                    0.6567155122756958}, {-0.33267030119895935`, 
                    0.09951091557741165, 0.2645964026451111, 
                    0.2095808982849121}}], "Biases" -> 
                    RawArray["Real32",{0., 0.17369158565998077`, 0., 
                    0.09452357888221741}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.1056221723556519`, 1., 
                    0.9821265339851379}], "Biases" -> 
                    RawArray["Real32",{0., -0.010287722572684288`, 0., 
                    0.36241286993026733`}], "MovingMean" -> 
                    RawArray["Real32",{0., 0.1741284281015396, 0., 
                    0.09339499473571777}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}], 
           "coupling_1net_Wcore_net" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "X_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "wb_convert_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_3" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_0" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "trainedNet" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.28040042519569397`, 
                    0.8754277229309082}, {-0.1258702576160431, 
                    0.9857667088508606}, {-1.380333662033081, \
-0.5188001990318298}, {1.0989738702774048`, -1.3736345767974854`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.22989614307880402`, -0.24420808255672455`, \
-0.07359588891267776, -0.011434712447226048`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.8308497667312622, 
                    0.5850459933280945, 0.55536288022995, 
                    0.2275981903076172}, {-0.45424148440361023`, \
-1.0565913915634155`, 
                    0.9683523178100586, -0.6303821206092834}, \
{-0.75920170545578, -0.9600221514701843, -0.5091850757598877, 
                    
                    1.1499882936477661`}, {-1.1887308359146118`, \
-0.31259822845458984`, 0.8612467050552368, 0.24493707716464996`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.2655591368675232, -0.0065243481658399105`, 
                    0.021921809762716293`, 0.014092521741986275`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.19533894956111908`, -1.0829535722732544`, 
                    0.9076451659202576, 
                    0.7930638790130615}, {-0.16771440207958221`, 
                    1.153153419494629, 
                    0.2588096559047699, -0.39757826924324036`}, {
                    0.42902880907058716`, -0.5507331490516663, \
-0.8617340326309204, -1.2063547372817993`}, {-0.9219340682029724, \
-1.0360429286956787`, -1.0778638124465942`, 0.49378475546836853`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0036274082958698273`, -0.07150954008102417, \
-0.14796485006809235`, -0.008579540997743607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.2615041136741638, 
                    0.21138696372509003`, -0.9717984199523926, \
-0.39667075872421265`}, {-0.4116203188896179, 
                    0.5252212882041931, -0.4073011875152588, \
-0.8352898955345154}, {0.569722592830658, 0.043254997581243515`, 
                    1.390390396118164, 
                    1.1961472034454346`}, {-0.2173124998807907, 
                    1.1219031810760498`, -0.05218074470758438, \
-0.5121939182281494}}], "Biases" -> 
                    RawArray["Real32",{
                    0.1688094139099121, -0.015401605516672134`, \
-0.047859013080596924`, -0.023609118536114693`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{-1.4043121337890625`, 
                    0.989319920539856, 0.8493707180023193, 
                    0.3664087951183319}, {-0.00433536758646369, \
-1.148911952972412, 
                    0.8351345658302307, -0.5400360822677612}, \
{-0.5725638270378113, 
                    0.5460139513015747, -0.001732580829411745, \
-0.7900643944740295}, {-0.6436707973480225, -0.3394011855125427, \
-1.2217543125152588`, -0.8703947067260742}}], "Biases" -> 
                    RawArray["Real32",{
                    0.03309731185436249, -0.061290040612220764`, \
-0.003327625570818782, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.7225061655044556, 
                    0.7556267976760864, 
                    0.2262432724237442, -0.1884404867887497}, \
{-0.36302366852760315`, -0.2926149070262909, -0.7215145826339722, 
                    0.20516319572925568`}, {0.7662841081619263, 
                    0.3093644082546234, 0.1925813853740692, 
                    0.39481011033058167`}, {-0.16232548654079437`, 
                    0.8706628680229187, -1.236894130706787, \
-0.8296151161193848}}], "Biases" -> 
                    RawArray["Real32",{0.01828683353960514, 0., 
                    0.15081633627414703`, -0.45662227272987366`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.7094109654426575, -0.700827419757843, 
                    0.5683406591415405, 
                    0.3210662305355072}, {-1.219648838043213, 
                    0.5808302164077759, -0.19560769200325012`, \
-0.6605221629142761}, {-0.3890421986579895, -0.03711126372218132, 
                    0.6946619153022766, -0.993706464767456}, {
                    0.6287885904312134, 0.7380457520484924, 
                    0.08613798022270203, 1.0832852125167847`}}], "Biases" -> 
                    RawArray["Real32",{0.23517915606498718`, 0., 
                    0.14619426429271698`, 0.09177739173173904}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.21444521844387054`, -0.7537563443183899, 
                    0.8711041808128357, 
                    0.8564229011535645}, {-0.007904307916760445, \
-0.5445233583450317, 0.4207858741283417, 
                    0.0682104229927063}, {-0.3529924750328064, \
-0.5852335691452026, -0.21044248342514038`, 0.003850610926747322}, {
                    0.08303238451480865, 
                    0.5906074643135071, -0.15651191771030426`, 
                    0.25543975830078125`}}], "Biases" -> 
                    RawArray["Real32",{-0.0009580579353496432, 
                    0., -0.013556385412812233`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.04379437118768692, 1., 
                    0.04486582428216934, 1.}], "Biases" -> 
                    RawArray["Real32",{0.4153086245059967, 0., 
                    0.1518605500459671, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.520790696144104, 
                    0.11277378350496292`, -0.12201576679944992`, 
                    0.10225825011730194`}], "MovingVariance" -> 
                    RawArray["Real32",{0.06241406872868538, 
                    0.0012842623982578516`, 0.0028616664931178093`, 
                    0.009552285075187683}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_2" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "subtract" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Subtract]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "partLayer1" -> 
               Association[
                "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_1" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "exp_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                   "$Dimensions" -> {2}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "thread_4" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "plus_f" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "wb_convert_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_0", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "trainedNet", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "subtract", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "subtract", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "partLayer1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "thread_4", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "exp_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "thread_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "X_out"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "plus_f", "Outputs", "Output"]}]], 
         "Edges" -> {
          NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_BBcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Bcore_net", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Wcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_WWcore_net", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4net_Wcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3net_Wcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_BBcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2net_Wcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_WWcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_BBcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Bcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_WWcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Wcore_net", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Bcore_net", "Outputs", "X_out"], 
           NeuralNetworks`NetPath["Outputs", "X_out"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1net_Wcore_net", "Outputs", "X_out"]}], 
        Association["Version" -> "12.0.10", "Unstable" -> False]], 
      "Processor" -> MachineLearning`MLProcessor["Center", 
        Association[
        "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Mean" -> {-0.00011694978920109752`, 0.00007700457070020814}, 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Version" -> {12., 0}, "ID" -> 5267004855378899174]], 
      "PostProcessor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "ProbabilityNet" -> NetGraph[
        Association[
        "Type" -> "Graph", "Inputs" -> 
         Association[
          "checker_b" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "checker_w" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
           "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Total_Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
           "Z_out" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Nodes" -> Association[
          "coupling_1" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.28040042519569397`, 
                    0.8754277229309082}, {-0.1258702576160431, 
                    0.9857667088508606}, {-1.380333662033081, \
-0.5188001990318298}, {1.0989738702774048`, -1.3736345767974854`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.22989614307880402`, -0.24420808255672455`, \
-0.07359588891267776, -0.011434712447226048`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.8308497667312622, 
                    0.5850459933280945, 0.55536288022995, 
                    0.2275981903076172}, {-0.45424148440361023`, \
-1.0565913915634155`, 
                    0.9683523178100586, -0.6303821206092834}, \
{-0.75920170545578, -0.9600221514701843, -0.5091850757598877, 
                    1.1499882936477661`}, {-1.1887308359146118`, \
-0.31259822845458984`, 0.8612467050552368, 0.24493707716464996`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.2655591368675232, -0.0065243481658399105`, 
                    0.021921809762716293`, 0.014092521741986275`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.19533894956111908`, -1.0829535722732544`, 
                    0.9076451659202576, 
                    0.7930638790130615}, {-0.16771440207958221`, 
                    1.153153419494629, 
                    0.2588096559047699, -0.39757826924324036`}, {
                    0.42902880907058716`, -0.5507331490516663, \
-0.8617340326309204, -1.2063547372817993`}, {-0.9219340682029724, \
-1.0360429286956787`, -1.0778638124465942`, 0.49378475546836853`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0036274082958698273`, -0.07150954008102417, \
-0.14796485006809235`, -0.008579540997743607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2615041136741638, 
                    0.21138696372509003`, -0.9717984199523926, \
-0.39667075872421265`}, {-0.4116203188896179, 
                    0.5252212882041931, -0.4073011875152588, \
-0.8352898955345154}, {0.569722592830658, 0.043254997581243515`, 
                    1.390390396118164, 
                    1.1961472034454346`}, {-0.2173124998807907, 
                    1.1219031810760498`, -0.05218074470758438, \
-0.5121939182281494}}], "Biases" -> 
                    RawArray["Real32",{
                    0.1688094139099121, -0.015401605516672134`, \
-0.047859013080596924`, -0.023609118536114693`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.4043121337890625`, 
                    0.989319920539856, 0.8493707180023193, 
                    0.3664087951183319}, {-0.00433536758646369, \
-1.148911952972412, 
                    0.8351345658302307, -0.5400360822677612}, \
{-0.5725638270378113, 
                    0.5460139513015747, -0.001732580829411745, \
-0.7900643944740295}, {-0.6436707973480225, -0.3394011855125427, \
-1.2217543125152588`, -0.8703947067260742}}], "Biases" -> 
                    RawArray["Real32",{
                    0.03309731185436249, -0.061290040612220764`, \
-0.003327625570818782, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7225061655044556, 
                    0.7556267976760864, 
                    0.2262432724237442, -0.1884404867887497}, \
{-0.36302366852760315`, -0.2926149070262909, -0.7215145826339722, 
                    0.20516319572925568`}, {0.7662841081619263, 
                    0.3093644082546234, 0.1925813853740692, 
                    0.39481011033058167`}, {-0.16232548654079437`, 
                    0.8706628680229187, -1.236894130706787, \
-0.8296151161193848}}], "Biases" -> 
                    RawArray["Real32",{0.01828683353960514, 0., 
                    0.15081633627414703`, -0.45662227272987366`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7094109654426575, -0.700827419757843, 
                    0.5683406591415405, 
                    0.3210662305355072}, {-1.219648838043213, 
                    0.5808302164077759, -0.19560769200325012`, \
-0.6605221629142761}, {-0.3890421986579895, -0.03711126372218132, 
                    0.6946619153022766, -0.993706464767456}, {
                    0.6287885904312134, 0.7380457520484924, 
                    0.08613798022270203, 1.0832852125167847`}}], "Biases" -> 
                    RawArray["Real32",{0.23517915606498718`, 0., 
                    0.14619426429271698`, 0.09177739173173904}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.21444521844387054`, -0.7537563443183899, 
                    0.8711041808128357, 
                    0.8564229011535645}, {-0.007904307916760445, \
-0.5445233583450317, 0.4207858741283417, 
                    0.0682104229927063}, {-0.3529924750328064, \
-0.5852335691452026, -0.21044248342514038`, 0.003850610926747322}, {
                    0.08303238451480865, 
                    0.5906074643135071, -0.15651191771030426`, 
                    0.25543975830078125`}}], "Biases" -> 
                    RawArray["Real32",{-0.0009580579353496432, 
                    0., -0.013556385412812233`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.04379437118768692, 1., 
                    0.04486582428216934, 1.}], "Biases" -> 
                    RawArray["Real32",{0.4153086245059967, 0., 
                    0.1518605500459671, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.520790696144104, 
                    0.11277378350496292`, -0.12201576679944992`, 
                    0.10225825011730194`}], "MovingVariance" -> 
                    RawArray["Real32",{0.06241406872868538, 
                    0.0012842623982578516`, 0.0028616664931178093`, 
                    0.009552285075187683}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-1.0055826902389526`, -0.9614297151565552}, {
                    0.9427697658538818, -0.7433678507804871}, \
{-0.4351021945476532, 0.04881863296031952}, {-0.9517213106155396, 
                    0.9961529970169067}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.19117866456508636`, 
                    0.27121517062187195`, -0.1893296241760254, \
-0.4572905898094177}, {0.708571195602417, 0.16505128145217896`, 
                    1.0478155612945557`, -0.656966507434845}, {
                    0.29914435744285583`, -0.7274119257926941, 
                    1.0795044898986816`, -0.7368828058242798}, {
                    0.6509546637535095, -0.9017858505249023, 
                    0.14681188762187958`, -0.6649592518806458}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.46432384848594666`, 
                    0.908102810382843, 1.0478026866912842`, 
                    0.8622851967811584}, {-0.21355552971363068`, \
-0.2557402551174164, -1.1127070188522339`, 
                    0.6246770024299622}, {-0.7064324021339417, \
-0.29214048385620117`, -0.30093252658843994`, -0.7913140058517456}, \
{-0.2682134807109833, -1.0217411518096924`, -1.0430132150650024`, 
                    1.1392306089401245`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.6836269497871399, -0.30448874831199646`, \
-0.5775110125541687, 
                    0.4721684455871582}, {-0.570763349533081, \
-0.8921632170677185, 
                    0.4863985776901245, -1.2229053974151611`}, \
{-0.4215686619281769, -0.9302003383636475, -0.7996142506599426, 
                    1.215777039527893}, {-0.6872756481170654, \
-0.6428603529930115, 0.386488676071167, -0.9340691566467285}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.531825840473175, 
                    1.0124754905700684`, -0.9074230194091797, \
-0.7805092334747314}, {
                    1.098265528678894, -0.24796715378761292`, \
-0.11630570888519287`, -0.8168771266937256}, {
                    0.8796766996383667, -0.18376733362674713`, \
-0.03014848753809929, 0.46239835023880005`}, {
                    0.8197591304779053, -0.939045786857605, \
-0.5731520652770996, -0.3073666989803314}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.06325596570968628, 
                    1.1152753829956055`, -0.6454733610153198, 
                    0.887650191783905}, {0.5683873295783997, 
                    0.2518492341041565, -0.9079412817955017, \
-0.963146984577179}, {0.13283513486385345`, 
                    0.7189369797706604, -0.33037254214286804`, 
                    0.0840630754828453}, {0.07897438108921051, 
                    0.08171245455741882, -0.33058255910873413`, 
                    0.11540823429822922`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.4389474391937256, 
                    0.7196488976478577, 0.09832611680030823, 
                    0.6244978308677673}, {-0.3684132695198059, \
-0.5929128527641296, -0.20331576466560364`, 
                    1.0255637168884277`}, {-0.1422601044178009, 
                    0.8687633872032166, -0.3134025037288666, \
-0.8768927454948425}, {-0.3123319447040558, 0.13173586130142212`, 
                    1.1398409605026245`, -0.04513677582144737}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.28371381759643555`, -0.022410541772842407`, \
-0.7774190902709961, 0.5423662662506104}, {
                    0.4330427944660187, -0.6156600117683411, 
                    0.3195442855358124, -0.852202832698822}, {
                    0.4456996023654938, 0.6105488538742065, 
                    0.7942044138908386, 
                    0.6567155122756958}, {-0.33267030119895935`, 
                    0.09951091557741165, 0.2645964026451111, 
                    0.2095808982849121}}], "Biases" -> 
                    RawArray["Real32",{0., 0.17369158565998077`, 0., 
                    0.09452357888221741}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.1056221723556519`, 1., 
                    0.9821265339851379}], "Biases" -> 
                    RawArray["Real32",{0., -0.010287722572684288`, 0., 
                    0.36241286993026733`}], "MovingMean" -> 
                    RawArray["Real32",{0., 0.1741284281015396, 0., 
                    0.09339499473571777}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.8957763910293579, 
                    0.3623362183570862}, {-0.174520343542099, 
                    0.9252927303314209}, {-0.1321897804737091, 
                    1.408540964126587}, {-0.429532915353775, 
                    0.6881443858146667}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.9142180681228638, -0.3998311460018158, 
                    0.373794823884964, -0.8428809642791748}, \
{-1.013462781906128, -0.9153012633323669, 
                    1.2214096784591675`, -0.8198782205581665}, {
                    0.05613064020872116, -1.1520932912826538`, \
-0.2508637011051178, 1.1238369941711426`}, {0.9063417315483093, 
                    0.021235918626189232`, 1.1031527519226074`, 
                    0.7188641428947449}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.09319031983613968, 
                    1.0391968488693237`, 
                    0.270325243473053, -0.6375017166137695}, {
                    0.9597233533859253, -0.16874465346336365`, 
                    0.22008773684501648`, -1.0515003204345703`}, \
{-0.6845393776893616, -0.9731258153915405, -0.014127678237855434`, \
-0.6081287860870361}, {-1.1281071901321411`, -0.6320348381996155, \
-0.7507789731025696, -0.836697518825531}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.1619548201560974, 
                    0.6321669816970825, -0.12518945336341858`, \
-0.8754209280014038}, {0.42449310421943665`, 0.09920264780521393, 
                    1.120271921157837, -0.2694827914237976}, {
                    0.7911468744277954, 
                    0.107190802693367, -0.15914228558540344`, \
-0.7212669253349304}, {
                    0.45065775513648987`, -0.7895684242248535, \
-0.5509428977966309, -0.7949679493904114}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.7017349004745483, -0.5246540307998657, 
                    0.44179415702819824`, 
                    0.9635450839996338}, {-1.0937368869781494`, 
                    0.3026067614555359, 0.6850050687789917, 
                    0.3425700068473816}, {-0.1728016585111618, \
-0.728571355342865, -0.5919033288955688, 
                    0.519510805606842}, {-0.3456636965274811, \
-0.5398943424224854, 1.1310919523239136`, -0.7293530106544495}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.3090231418609619, -1.064344882965088, 
                    0.8869056701660156, 0.5164023041725159}, {
                    1.1150511503219604`, 
                    1.074715256690979, -1.0552726984024048`, 
                    0.646506130695343}, {-0.9056016802787781, \
-0.989912748336792, -0.6263928413391113, 0.06015612930059433}, {
                    1.0773271322250366`, 
                    0.3191694915294647, -0.6086782813072205, \
-1.1192924976348877`}}], "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.9385467171669006, -0.9668304920196533, \
-0.26482826471328735`, -0.07200281322002411}, {-0.7782991528511047, \
-0.7488662004470825, -0.847709059715271, 
                    0.68807452917099}, {-0.8480285406112671, 
                    0.22617769241333008`, 
                    0.7120975255966187, -1.198423147201538}, \
{-1.0725282430648804`, 1.0682932138442993`, 
                    0.7012400031089783, -0.7183460593223572}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.5295577049255371, 
                    0.3512469232082367, 
                    0.2275642305612564, -0.06166284903883934}, \
{-0.7875308990478516, -0.5696789622306824, -0.6910265684127808, 
                    0.08407719433307648}, {0.25443747639656067`, 
                    0.8309063911437988, 0.7666983008384705, 
                    0.2845258116722107}, {-0.8493523001670837, 
                    0.3944772183895111, 0.11803640425205231`, 
                    0.08188746124505997}}], "Biases" -> 
                    RawArray["Real32",{-0.15906153619289398`, 0., 
                    0.017862647771835327`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.1062151193618774`, 1., 
                    1.0263330936431885`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.08614708483219147, 
                    0., -0.03560680150985718, 0.}], "MovingMean" -> 
                    RawArray["Real32",{-0.1589561104774475, 0., 
                    0.01827838644385338, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.23329117894172668`, 
                    0.43448686599731445`}, {-0.5498430132865906, \
-0.2333453744649887}, {
                    0.127238467335701, -0.3405781686306}, \
{-1.3462013006210327`, -1.2543599605560303`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.032579317688941956`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.1024048328399658`, 
                    0.7728956937789917, -0.06355833262205124, 
                    1.0792820453643799`}, {-0.6330763697624207, \
-0.6129856109619141, -0.6057496070861816, -0.7020090818405151}, {
                    0.3616458475589752, -0.8576364517211914, \
-0.05248260870575905, 0.8957068920135498}, {-0.8764091730117798, 
                    0.6311792731285095, 
                    0.5927261710166931, -0.298856258392334}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.03286946564912796}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.24815647304058075`, -0.37761324644088745`, \
-1.100022554397583, 
                    0.6481032371520996}, {-0.6488040685653687, \
-0.679099977016449, 
                    0.2214793711900711, -0.601083517074585}, \
{-1.1225425004959106`, 
                    1.0572394132614136`, -1.221137523651123, \
-0.21756841242313385`}, {-0.34284016489982605`, -0.961559534072876, \
-0.9971440434455872, -0.7323741912841797}}], "Biases" -> 
                    RawArray["Real32",{-0.0331658273935318, 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.2651151418685913, -0.8428170680999756, 
                    0.4288094937801361, -0.6984238624572754}, \
{-0.36055707931518555`, -0.40606963634490967`, 
                    0.18076859414577484`, -0.8186793923377991}, {
                    0.3470284640789032, -0.7862091660499573, 
                    1.0312302112579346`, -1.1828734874725342`}, \
{-0.7150039672851562, 0.02474166825413704, 0.4519364535808563, 
                    0.24253782629966736`}}], "Biases" -> 
                    RawArray["Real32",{0.04722980037331581, 
                    0., -0.07259402424097061, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.49899449944496155`, -1.1440858840942383`, \
-0.5056160688400269, -0.9733536243438721}, {-0.9348592758178711, \
-0.2542707324028015, 1.079600214958191, 
                    0.0029605808667838573`}, {-0.3890341520309448, \
-0.12657929956912994`, 0.02132675051689148, -0.4675881266593933}, {
                    0.5685173869132996, -0.45166826248168945`, \
-0.9953811764717102, -0.35574910044670105`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008726036176085472, -0.050475168973207474`, 
                    0., 0.01855863258242607}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.8794720768928528, 
                    0.45291027426719666`, -1.1260080337524414`, \
-0.4375465512275696}, {-0.5684416890144348, 
                    0.4649476706981659, -0.24840471148490906`, \
-0.28038305044174194`}, {-0.8279221653938293, 
                    0.4214527904987335, -0.2367471605539322, \
-1.2243705987930298`}, {-0.17251811921596527`, 0.9857721328735352, 
                    1.1452807188034058`, 0.36024707555770874`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.011650129221379757`, -0.01572592556476593, \
-0.012774167582392693`, -0.030365219339728355`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.327743262052536, 
                    0.7532622814178467, 0.7607889175415039, 
                    1.1032756567001343`}, {-0.2636410892009735, \
-0.13159549236297607`, -0.22760000824928284`, -0.846391499042511}, {
                    0.08058207482099533, -0.8095343708992004, 
                    0.5150863528251648, 0.1342550665140152}, {
                    0.8215001821517944, 
                    0.5603652000427246, -0.7315725088119507, 
                    0.8480975031852722}}], "Biases" -> 
                    RawArray["Real32",{-0.026365989819169044`, 
                    0., -0.0005013612098991871, -0.044547807425260544`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.32944807410240173`, 
                    0.5410114526748657, -0.7933152914047241, \
-0.8292582631111145}, {0.4512331187725067, -0.12782202661037445`, 
                    0.023232072591781616`, 0.8463086485862732}, {
                    0.5111056566238403, 0.8652687668800354, 
                    0.7632277011871338, 0.24700802564620972`}, {
                    0.13815216720104218`, -0.7928653359413147, 
                    0.38433071970939636`, -0.7218269109725952}}], "Biases" -> 
                    RawArray["Real32",{0., -0.01726776547729969, 
                    0., -0.03475910797715187}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0376012325286865`, 1., 
                    0.952485203742981}], "Biases" -> 
                    RawArray["Real32",{0., 0.07142296433448792, 0., 
                    0.35761305689811707`}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-5.605193857299268*^-45, -0.017946388572454453`,
                     5.605193857299268*^-45, -0.034391891211271286`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "coupling_2" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.0272393226623535`, 
                    1.1851426362991333`}, {-1.1013171672821045`, 
                    1.3560041189193726`}, {-0.2645794451236725, 
                    0.8190812468528748}, {0.2288351058959961, 
                    0.5987197160720825}}], "Biases" -> 
                    RawArray["Real32",{0.020290987566113472`, 
                    0.02084389515221119, -0.020147942006587982`, \
-0.020126312971115112`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.24388974905014038`, 
                    0.4529878795146942, -1.1013665199279785`, \
-0.1728794127702713}, {
                    0.4499173164367676, -1.1148042678833008`, \
-0.5451153516769409, -0.17451262474060059`}, {-0.8063437938690186, \
-0.12459979951381683`, 1.1342663764953613`, 0.8231135010719299}, {
                    0.05881085246801376, -0.11509258300065994`, \
-1.204534888267517, 0.33516672253608704`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020205922424793243`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.32763224840164185`, -1.1029812097549438`, \
-1.1657968759536743`, 0.07768034934997559}, {
                    0.5615560412406921, -0.18220843374729156`, \
-0.6637734770774841, 1.1732587814331055`}, {0.5226121544837952, 
                    0.09836286306381226, 0.663692057132721, 
                    0.5882529020309448}, {-1.1400552988052368`, 
                    0.48360323905944824`, -0.0822700560092926, \
-0.4636894762516022}}], "Biases" -> 
                    RawArray["Real32",{0., 0., -0.020308714359998703`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.6304903030395508, -0.17651955783367157`, \
-0.46612972021102905`, 0.6061276793479919}, {-0.4681702256202698, 
                    0.5416781306266785, 
                    0.5326633453369141, -0.21141549944877625`}, {
                    0.095125213265419, 1.1963318586349487`, 
                    0.6131061911582947, 
                    0.16446593403816223`}, {-0.04447731375694275, 
                    0.8583840727806091, -0.6535158157348633, \
-0.8978548645973206}}], "Biases" -> 
                    RawArray["Real32",{0., -0.02120339125394821, 
                    0.02140180952847004, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.4623880088329315, 
                    0.9883906841278076, -0.6045739054679871, \
-0.1552111953496933}, {-0.6422726511955261, 
                    0.015349535271525383`, -0.8583002686500549, \
-0.9189561009407043}, {-0.6069546937942505, 
                    
                    0.2909195125102997, -0.3387618958950043, \
-0.2795550227165222}, {-1.1471445560455322`, -0.769105076789856, 
                    0.006018396466970444, 1.1222515106201172`}}], "Biases" -> 
                    RawArray["Real32",{-0.02127707563340664, 0., 
                    0., -0.0055557615123689175`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.03880154713988304, 
                    0.1930888295173645, -0.2744407653808594, 
                    0.9316576719284058}, {
                    1.04044508934021, -0.5252693295478821, 
                    1.1132738590240479`, -0.17558589577674866`}, {
                    0.23562754690647125`, -0.11817649751901627`, \
-0.8234222531318665, -0.994630753993988}, {
                    1.1251013278961182`, -0.18200336396694183`, 
                    0.7495065927505493, 0.5922220349311829}}], "Biases" -> 
                    RawArray["Real32",{-0.008491064421832561, 
                    
                    0.0037082810886204243`, -0.00048256112495437264`, \
-0.013342808000743389`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.5927290916442871, -0.5807473659515381, 
                    0.04569912701845169, 0.5453850030899048}, {
                    0.3536730706691742, -0.3382004201412201, 
                    0.3208562731742859, -1.1065701246261597`}, \
{-0.043284542858600616`, 0.31835034489631653`, 0.22545592486858368`, 
                    1.1699867248535156`}, {0.4927527606487274, 
                    0.26720207929611206`, -0.5632683038711548, \
-0.3714267313480377}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.008471638895571232, -0.006288113072514534, \
-0.024764614179730415`, -0.002935498021543026}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8400803208351135, -0.2918619215488434, \
-0.36224615573883057`, -0.4248539209365845}, {0.21804450452327728`, 
                    0.6871101260185242, -0.09039194136857986, 
                    0.6381481289863586}, {-0.017969254404306412`, \
-0.2533146142959595, -0.5403133630752563, -0.6244195699691772}, \
{-0.557862401008606, -0.3409421443939209, -0.08292922377586365, 
                    0.37390872836112976`}}], "Biases" -> 
                    RawArray["Real32",{0.14098723232746124`, 
                    0., -0.1755669116973877, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.0340676307678223`, 1., 
                    0.9480414390563965, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.11188255250453949`, 
                    0., -0.03459589555859566, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.14253473281860352`, 
                    5.605193857299268*^-45, -0.17651954293251038`, 
                    5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.6247974634170532, 
                    1.0719972848892212`}, {-0.8147713541984558, \
-0.951488196849823}, {0.4458984434604645, 
                    1.009402871131897}, {-0.6509699821472168, 
                    0.6131016612052917}}], "Biases" -> 
                    RawArray["Real32",{-0.30463317036628723`, 
                    0.23118887841701508`, 
                    0.06617609411478043, -0.30046290159225464`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.308014988899231, 
                    0.41012367606163025`, 
                    1.1328684091567993`, -0.6759518980979919}, \
{-0.06172512471675873, -0.27633190155029297`, 1.1597766876220703`, 
                    1.054457664489746}, {
                    1.1483964920043945`, -1.1610616445541382`, \
-0.32596054673194885`, 1.2034265995025635`}, {
                    0.2506335377693176, -0.5807443261146545, 
                    0.09045513719320297, -0.3083084225654602}}], "Biases" -> 
                    RawArray["Real32",{
                    0.024193117395043373`, -0.22505512833595276`, \
-0.05639704689383507, 0.3493075966835022}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.2778819501399994, 
                    0.7496756315231323, 1.0025731325149536`, 
                    0.5138924717903137}, {-0.7969806790351868, \
-0.2784910798072815, -0.546769380569458, 0.6271833777427673}, {
                    0.5501472353935242, 1.320475697517395, 0.7035324573516846,
                     1.2081241607666016`}, {0.9598748087882996, 
                    0.6415534615516663, -1.3248586654663086`, 
                    0.24694617092609406`}}], "Biases" -> 
                    RawArray["Real32",{-0.17849385738372803`, 
                    0.2985064685344696, -0.1312658190727234, 
                    0.1636054366827011}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.2408421039581299`, 
                    0.6402130722999573, -0.5636037588119507, 
                    0.7157518267631531}, {
                    0.7387978434562683, -1.0216920375823975`, 
                    0.22834144532680511`, 0.30655571818351746`}, {
                    0.5690512657165527, -0.35685232281684875`, \
-0.41032058000564575`, -1.1276694536209106`}, {0.022032486274838448`, 
                    0.18081532418727875`, -0.7020317912101746, 
                    0.533079206943512}}], "Biases" -> 
                    RawArray["Real32",{
                    0.13038139045238495`, -0.26013192534446716`, \
-0.03431916981935501, 0.26744359731674194`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.884698212146759, -0.9137963056564331, \
-0.6820396184921265, -1.1969163417816162`}, {1.02857506275177, 
                    0.6642537713050842, 0.028140507638454437`, 
                    0.06875970214605331}, {-0.09183403104543686, 
                    0.0021497849375009537`, -0.2629159390926361, \
-0.16911469399929047`}, {0.6566782593727112, 0.6675363183021545, 
                    0.553555428981781, 1.0056182146072388`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.05621147155761719, -0.010769825428724289`, 
                    0.07819464057683945}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2057257890701294`, 
                    0.24814435839653015`, 1.1151946783065796`, 
                    0.49364256858825684`}, {-0.34746411442756653`, 
                    0.6987231373786926, 0.943751871585846, 
                    0.7946571707725525}, {
                    0.46374526619911194`, -0.4114575982093811, 
                    0.6955560445785522, 
                    0.3322679400444031}, {-0.47509536147117615`, \
-1.0886939764022827`, 0.07419174164533615, 0.6524626612663269}}], "Biases" -> 
                    RawArray["Real32",{
                    0.013026686385273933`, -0.007407285738736391, 
                    0.11372725665569305`, -0.07177607715129852}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.723952054977417, 
                    0.631230354309082, 0.07747747749090195, 
                    0.4074034094810486}, {-1.197285771369934, \
-0.5476441979408264, -0.5596575736999512, 
                    1.183302879333496}, {-0.8752565979957581, \
-0.4132252037525177, 0.293244332075119, 0.21619480848312378`}, {
                    0.4112408757209778, -0.07134272903203964, 
                    0.25418463349342346`, 0.15527468919754028`}}], "Biases" -> 
                    RawArray["Real32",{0.06009580194950104, 0., 0., 
                    0.009850728325545788}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.6709763407707214, -0.8419735431671143, \
-0.6108553409576416, 
                    0.31385189294815063`}, {-0.3921840488910675, \
-0.27944886684417725`, -0.44053006172180176`, 
                    0.30910852551460266`}, {-0.07277870178222656, 
                    0.5416227579116821, -0.749184787273407, \
-0.22155964374542236`}, {-0.03492600470781326, -0.5857563018798828, \
-0.289907842874527, -0.40806424617767334`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.03365085646510124, 0., 
                    0.04534592106938362}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.51395183801651, 1., 
                    0.9517407417297363}], "Biases" -> 
                    RawArray["Real32",{0., 0.2162855863571167, 
                    0., -0.33053067326545715`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.2486773431301117, -0.09127230942249298, \
-0.06003804877400398, -0.03530314937233925}], "MovingVariance" -> 
                    RawArray["Real32",{0.004154358524829149, 
                    0.00032402551732957363`, 0.00022630792227573693`, 
                    0.00040684040868654847`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.0232733488082886`, 
                    0.4123275578022003}, {-0.42913058400154114`, \
-0.7507485747337341}, {-0.6771546006202698, -0.42921799421310425`}, \
{-1.1501773595809937`, -0.5237459540367126}}], "Biases" -> 
                    RawArray["Real32",{-0.06611915677785873, 
                    0.38374435901641846`, -0.21494361758232117`, \
-0.08891620486974716}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.938681423664093, 
                    0.5236425399780273, -0.4462301731109619, 
                    0.7413621544837952}, {
                    0.36929574608802795`, -0.5489752292633057, \
-0.3339131772518158, 0.44864922761917114`}, {-0.6584511995315552, 
                    0.2634795606136322, 
                    1.1334044933319092`, -0.7523109912872314}, \
{-0.03542015701532364, -0.8779085874557495, -0.809063196182251, 
                    0.03728779777884483}}], "Biases" -> 
                    RawArray["Real32",{-0.10400308668613434`, 
                    0.2816414535045624, -0.09269170463085175, \
-0.004481355659663677}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.24621422588825226`, 
                    0.985656201839447, 0.09558389335870743, 
                    1.2012335062026978`}, {
                    0.7117063999176025, -0.4811817705631256, \
-0.2930569648742676, -0.07616393268108368}, {1.1045162677764893`, 
                    0.2911427617073059, -0.34115180373191833`, \
-0.8265060782432556}, {-0.9755216836929321, 0.4526450037956238, 
                    0.43766549229621887`, 0.5006574988365173}}], "Biases" -> 
                    RawArray["Real32",{0.013371359556913376`, 
                    0.04690810665488243, -0.03512047231197357, \
-0.1534721404314041}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.9985904693603516, 
                    0.3187827467918396, -1.0587326288223267`, \
-1.0089114904403687`}, {
                    0.43743884563446045`, -0.15510369837284088`, \
-0.9138410687446594, 0.3631367087364197}, {
                    0.9080770611763, -0.3844505250453949, 
                    0.6118550896644592, -0.5183600187301636}, {
                    0.6724507212638855, 0.93711918592453, 0.4640797972679138, 
                    0.9890212416648865}}], "Biases" -> 
                    RawArray["Real32",{
                    0.027951490134000778`, -0.10686809569597244`, 
                    0.013608737848699093`, -0.06892822682857513}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2668100893497467, 
                    0.15058819949626923`, -1.1104614734649658`, 
                    0.03640010580420494}, {-0.13042515516281128`, 
                    0.7564303874969482, 
                    0.006577329710125923, -0.6690428853034973}, \
{-0.5001853704452515, 0.4691876769065857, 
                    0.7996487021446228, -0.14533911645412445`}, {
                    0.4526841938495636, 0.8468631505966187, 
                    0.09007269889116287, -0.23484553396701813`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0052228025160729885`, -0.005015995819121599, 
                    0.04361181706190109, 0.20404070615768433`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.1011145114898682`, 
                    0.7110188603401184, 0.5675764083862305, 
                    0.9290199875831604}, {
                    0.22922439873218536`, -0.3610682487487793, 
                    0.17099426686763763`, 0.6951537132263184}, {
                    0.3940970301628113, 0.389936625957489, 
                    0.21339713037014008`, -0.9525924921035767}, {
                    0.40970227122306824`, -0.8975924849510193, 
                    1.0971708297729492`, 0.16968782246112823`}}], "Biases" -> 
                    RawArray["Real32",{0.0006359686376526952, 
                    0.025261353701353073`, -0.20041799545288086`, \
-0.0014764054212719202`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6824387907981873, 
                    0.1007201224565506, -0.13071443140506744`, \
-0.9145658612251282}, {-0.2611132264137268, -0.4049318730831146, \
-0.3291284143924713, -0.40765678882598877`}, {0.4567570090293884, 
                    0.23558172583580017`, 0.21312430500984192`, 
                    0.0910617858171463}, {0.15193194150924683`, 
                    0.8316170573234558, -0.14471234381198883`, \
-0.26284971833229065`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0.00010937114711850882`, 
                    0.01756111904978752}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.5749830007553101, -0.5930800437927246, 
                    0.07424910366535187, 0.11974163353443146`}, {
                    0.5756600499153137, 0.14637413620948792`, 
                    0.6387523412704468, -0.14677976071834564`}, {
                    0.6429774165153503, 0.32796573638916016`, 
                    0.5578079223632812, -0.08706668764352798}, {
                    0.7294813394546509, -0.5185415148735046, \
-0.3751922845840454, -0.19885247945785522`}}], "Biases" -> 
                    RawArray["Real32",{0.10288982093334198`, 
                    0., -0.053429532796144485`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.7660358548164368, 1., 
                    0.6746312379837036, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.1611233502626419, 
                    0., -0.16056616604328156`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.1324150562286377, 
                    0.14110837876796722`, 
                    0.07327874004840851, -0.11011964827775955`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00007790406380081549, 
                    0.004116098862141371, 0.0031010578386485577`, 
                    0.001395107712596655}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6084913015365601, 
                    0.34091585874557495`}, {
                    0.35409799218177795`, -0.7107595205307007}, \
{-0.47736838459968567`, 1.3376765251159668`}, {
                    1.0174744129180908`, -0.40096160769462585`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.08730413764715195, -0.30411016941070557`, 
                    0.08460777997970581, 0.1346454918384552}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7835296988487244, -0.2876985967159271, \
-0.7150038480758667, -0.441653847694397}, {-0.6377336978912354, 
                    2.105273485183716, 0.03946137800812721, 
                    0.962832510471344}, {-0.5244331359863281, \
-0.6607128381729126, 
                    0.8806125521659851, -0.4075981080532074}, \
{-0.0207088440656662, -0.8347008228302002, -0.21375447511672974`, \
-1.024819254875183}}], "Biases" -> 
                    RawArray["Real32",{0., 0.10184445232152939`, 
                    0.2095145285129547, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.25878214836120605`, -0.6802108287811279, 
                    0.23190860450267792`, -0.5543636083602905}, \
{-1.0917338132858276`, -0.141453817486763, -0.7815151810646057, \
-1.0538750886917114`}, {-0.9915717244148254, 1.0146677494049072`, 
                    0.46070724725723267`, 1.2237516641616821`}, {
                    0.18021562695503235`, -1.0064103603363037`, 
                    0.028769556432962418`, 1.207274317741394}}], "Biases" -> 
                    RawArray["Real32",{-0.17457066476345062`, 0., 
                    0.14317403733730316`, -0.03311567381024361}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7010096907615662, 
                    0.5386219024658203, 0.13931305706501007`, 
                    1.0312293767929077`}, {
                    0.7909489870071411, -0.42114776372909546`, 
                    0.24118812382221222`, -0.9541829228401184}, {
                    0.48835626244544983`, -0.46471327543258667`, 
                    0.619662880897522, 
                    0.6258669495582581}, {-0.99852454662323, \
-0.3097281754016876, 0.25753268599510193`, -0.12958447635173798`}}], "Biases" -> 
                    RawArray["Real32",{0.05355251580476761, 
                    0.05030385032296181, 
                    0.12225575000047684`, -0.05507795140147209}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7661686539649963, 
                    0.7926455140113831, -1.0148553848266602`, \
-0.2221817821264267}, {0.6779279708862305, 0.4717486798763275, 
                    0.6864776611328125, -1.1918736696243286`}, {
                    0.7604702711105347, 
                    1.1436012983322144`, -0.9900761842727661, \
-0.9546067714691162}, {0.14667591452598572`, 
                    0.5370497703552246, -0.7491148114204407, 
                    0.08863148838281631}}], "Biases" -> 
                    RawArray["Real32",{-0.005557596683502197, 
                    0.08889354765415192, -0.039164479821920395`, \
-0.00436381995677948}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6535167694091797, 
                    0.9468663334846497, -0.6574264168739319, \
-0.5250082015991211}, {-1.0625808238983154`, -0.00959259457886219, 
                    1.0252410173416138`, -0.7745680212974548}, \
{-0.7256602048873901, -0.15038423240184784`, 
                    1.0325127840042114`, -0.8182397484779358}, \
{-0.7448923587799072, 
                    0.2248680740594864, -0.4737423360347748, \
-1.117297887802124}}], "Biases" -> 
                    RawArray["Real32",{
                    0.006623828783631325, -0.030691642314195633`, \
-0.005555391777306795, 0.02767174318432808}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.4338841438293457, 
                    0.02327045425772667, 
                    0.003029894083738327, -0.8972814679145813}, \
{-0.2538984417915344, -0.8802012801170349, 0.6719919443130493, 
                    1.069201946258545}, {
                    0.1005774438381195, -0.8963965773582458, \
-0.9779155254364014, -0.4103488326072693}, {-0.23362062871456146`, \
-0.38641712069511414`, 0.3283616006374359, 0.06959308683872223}}], "Biases" -> 
                    RawArray["Real32",{0.06830772012472153, 
                    0.08361774682998657, -0.0053450302220880985`, \
-0.006242052186280489}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.7368323802947998, 
                    0.8498879671096802, -0.4320899248123169, 
                    0.8462148904800415}, {0.581718385219574, 
                    0.09062107652425766, 
                    0.7757717967033386, -0.22117385268211365`}, \
{-0.5401679873466492, 0.4012470841407776, -0.3824312686920166, 
                    0.21749524772167206`}, {-0.3506982624530792, \
-0.05828291177749634, -0.6220205426216125, 0.7043546438217163}}], "Biases" -> 
                    RawArray["Real32",{0., -0.0989883542060852, 0., 
                    0.034546662122011185`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0943498611450195`, 1., 
                    0.5707899332046509}], "Biases" -> 
                    RawArray["Real32",{0., -0.011473491787910461`, 0., 
                    0.02301899343729019}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.016649531200528145`, \
-0.0011380029609426856`, -0.036924321204423904`, -0.02508625201880932}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.00038284322363324463`, 
                    0.0002371612936258316, 0.0002056993980659172, 
                    0.00008736725430935621}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "coupling_3" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2269245386123657`, 
                    0.5300783514976501}, {-1.0680961608886719`, 
                    1.2279157638549805`}, {-0.9560098648071289, \
-0.6157021522521973}, {-1.3427678346633911`, -0.5092048645019531}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.055263977497816086`, -0.0357687771320343, 
                    0.009987019933760166, -0.409896582365036}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2102319300174713, 
                    0.7911170721054077, 0.7531107068061829, 
                    0.05388656258583069}, {
                    0.7294581532478333, -1.0154672861099243`, \
-0.8989071249961853, -0.8402823805809021}, {0.8225075602531433, 
                    1.0055885314941406`, -0.8146655559539795, 
                    0.14929859340190887`}, {
                    0.3443886935710907, -0.23406171798706055`, 
                    0.648874044418335, -0.974784791469574}}], "Biases" -> 
                    RawArray["Real32",{
                    0.10877753049135208`, -0.10987579822540283`, \
-0.05968782678246498, 0.007396911736577749}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.5818372368812561, 
                    0.6368904113769531, -0.6741195321083069, \
-0.9550532102584839}, {-0.9334428906440735, -0.2268291413784027, \
-1.1252663135528564`, 1.0908485651016235`}, {
                    0.49197691679000854`, -0.903556227684021, 
                    0.16529005765914917`, 
                    0.7606364488601685}, {-0.060122277587652206`, \
-0.559829831123352, -0.7184230089187622, 0.19126306474208832`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.09598984569311142, 
                    0.11792483925819397`, -0.0518016554415226}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.05107980966567993, -0.5076199173927307, 
                    0.8656588792800903, 1.169507384300232}, {
                    0.043214909732341766`, -0.12430473417043686`, 
                    1.0353971719741821`, 
                    0.2244076430797577}, {-0.004986797459423542, 
                    
                    0.7752837538719177, -0.08317965269088745, \
-0.519730269908905}, {-0.1021399050951004, 
                    0.12337113171815872`, -0.1672910451889038, \
-0.06014348939061165}}], "Biases" -> 
                    RawArray["Real32",{-0.07721059769392014, 
                    0.09335753321647644, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.5864083170890808, -1.1515958309173584`, \
-0.9700015187263489, -1.0751793384552002`}, {-0.44147804379463196`, 
                    0.904954195022583, -0.572465717792511, \
-0.07864737510681152}, {0.8050349950790405, -1.1519731283187866`, 
                    0.5112066864967346, 
                    0.06149987503886223}, {-0.2646709978580475, 
                    0.6335101127624512, -0.013110958971083164`, \
-0.9270269870758057}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.02993219904601574, -0.005128767807036638, 
                    0.016426386311650276`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.3305329382419586, -1.0482378005981445`, \
-0.1924656182527542, -0.7495168447494507}, {
                    0.47665491700172424`, -0.5365244150161743, 
                    1.124621868133545, 0.6901269555091858}, {
                    1.1700797080993652`, 0.4269246757030487, 
                    1.1931535005569458`, 0.17938324809074402`}, {
                    0.3727201223373413, 
                    0.7936676144599915, -1.1791568994522095`, 
                    0.9097337126731873}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.007643654942512512, -0.08279790729284286, 
                    0.09779099375009537}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.41163170337677, 
                    1.0882995128631592`, 
                    0.0033295280300080776`, -0.19062167406082153`}, {
                    1.1305721998214722`, -0.7240346670150757, \
-0.5251972675323486, -0.7583861947059631}, {-0.9256356954574585, \
-0.7151260375976562, -0.14005182683467865`, 
                    0.4736833870410919}, {-0.78333580493927, 
                    0.30321186780929565`, -0.9420959949493408, \
-0.8564635515213013}}], "Biases" -> 
                    RawArray["Real32",{-0.07011282444000244, 0., 
                    0.03244610130786896, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.7035068273544312, 
                    0.18534383177757263`, 0.0613018162548542, 
                    0.11431510001420975`}, {
                    0.4332052171230316, -0.5943752527236938, \
-0.8540732860565186, -0.13494515419006348`}, {-0.21640744805335999`, 
                    0.8409658670425415, -0.45774969458580017`, 
                    0.2688940465450287}, {
                    0.16293755173683167`, -0.7081860303878784, \
-0.43753185868263245`, 0.13354924321174622`}}], "Biases" -> 
                    RawArray["Real32",{0.006494243163615465, 
                    0., -0.055063627660274506`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.046222977340221405`, 1., 
                    1.0855382680892944`, 1.}], "Biases" -> 
                    RawArray["Real32",{-0.4094805121421814, 0., 
                    0.3329516053199768, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.037118829786777496`, -0.42928051948547363`, \
-0.28365957736968994`, -0.21991543471813202`}], "MovingVariance" -> 
                    RawArray["Real32",{0.00012735245400108397`, 
                    0.025137698277831078`, 0.007188437506556511, 
                    0.006597123574465513}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2642930746078491`, 
                    0.8268188238143921}, {-0.5022134184837341, 
                    0.5101158618927002}, {-1.3381139039993286`, 
                    1.166893720626831}, {0.4878425598144531, 
                    0.20256587862968445`}}], "Biases" -> 
                    RawArray["Real32",{-0.17179343104362488`, 
                    0.08783379197120667, 
                    0.06922435760498047, -0.2568233013153076}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.32112014293670654`, -1.063812017440796, \
-2.908308267593384, -0.48695436120033264`}, {-0.9814897179603577, \
-0.32749828696250916`, -0.28614771366119385`, -0.8372399806976318}, {
                    0.3182300329208374, 
                    0.1996791958808899, -0.3122684061527252, 
                    0.7359107136726379}, {1.2977542877197266`, 
                    0.28099775314331055`, -1.060470461845398, \
-0.36558130383491516`}}], "Biases" -> 
                    RawArray["Real32",{0.22945696115493774`, 0., 
                    0.3949333429336548, 0.16519878804683685`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7585293650627136, -1.1807243824005127`, 
                    0.6534357070922852, -0.26351964473724365`}, \
{-1.112922191619873, 0.17868958413600922`, 
                    1.4414318799972534`, -1.1912803649902344`}, {
                    0.31313610076904297`, 
                    0.05311939865350723, -0.7185114026069641, 
                    1.1544849872589111`}, {0.7256407141685486, 
                    0.9326233267784119, 0.028320958837866783`, 
                    0.2747834324836731}}], "Biases" -> 
                    RawArray["Real32",{0.2263377159833908, 
                    0.09536410123109818, 
                    0.23931525647640228`, -0.015928028151392937`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.9092296957969666, 
                    0.7737902402877808, -0.5791275501251221, 
                    0.007331222761422396}, {-0.3860591948032379, 
                    0.7988179326057434, 0.483842134475708, 
                    0.7352887988090515}, {
                    0.19772590696811676`, -1.0622608661651611`, \
-0.7747647166252136, 0.07980397343635559}, {
                    0.5633371472358704, -0.814481258392334, \
-0.4070219397544861, -1.0397902727127075`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.26312559843063354`, -0.09947662800550461, \
-0.020687200129032135`, -0.03377986699342728}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.2686201333999634`, 
                    0.24814386665821075`, -0.27694377303123474`, 
                    0.5479679107666016}, {0.0696205124258995, 
                    1.102692723274231, 
                    1.0082558393478394`, -0.8493449091911316}, \
{-0.12962917983531952`, -0.6112529039382935, -1.1061062812805176`, 
                    
                    0.1692829132080078}, {-0.17391467094421387`, \
-1.1689257621765137`, 0.9973315596580505, -0.7050062417984009}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.093745157122612, -0.05702408775687218, 0., 
                    0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.7096297740936279, -0.3120685815811157, 
                    1.0470035076141357`, 0.19487692415714264`}, {
                    0.009518268518149853, -0.9735857844352722, 
                    0.15269295871257782`, 
                    0.2565949261188507}, {-0.11307663470506668`, \
-1.1760481595993042`, 
                    1.039278507232666, -0.01588474214076996}, \
{-0.8765694499015808, 
                    1.1391587257385254`, -1.179132342338562, \
-0.9810775518417358}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.09613307565450668, -0.031668826937675476`, 
                    0., -0.03938092663884163}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.5577342510223389, -1.0093947649002075`, \
-0.41194576025009155`, -0.3543873131275177}, {1.0553799867630005`, 
                    1.1880255937576294`, -0.30832621455192566`, \
-0.4425933361053467}, {-1.3836721181869507`, 0.09204135090112686, 
                    0.8451066017150879, 0.22725027799606323`}, {
                    0.7735462784767151, 
                    0.21771612763404846`, -0.5773540735244751, \
-1.2089533805847168`}}], "Biases" -> 
                    RawArray["Real32",{0., 
                    0.8894547820091248, -0.4685942828655243, \
-0.20228110253810883`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.07895833253860474, 
                    0.3609413206577301, 0.4526773691177368, 
                    0.37655872106552124`}, {
                    0.8290538191795349, -0.023191213607788086`, \
-0.12195669859647751`, -0.31643494963645935`}, {
                    0.7179055213928223, -0.08120162039995193, \
-0.26662132143974304`, -0.5745231509208679}, {
                    0.11935969442129135`, -0.5377625226974487, \
-0.52306067943573, 0.5917158126831055}}], "Biases" -> 
                    RawArray["Real32",{0., 0.037078045308589935`, 
                    0., -0.022038575261831284`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.8302268981933594, 1., 
                    1.316287636756897}], "Biases" -> 
                    RawArray["Real32",{0., 0.15166693925857544`, 
                    0., -0.45056086778640747`}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.39726001024246216`, -0.0194294061511755, \
-0.14308758080005646`, -0.48614558577537537`}], "MovingVariance" -> 
                    RawArray["Real32",{0.05312395840883255, 
                    0.002626831643283367, 0.01282864436507225, 
                    0.04547467827796936}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8055242896080017, -0.5046042799949646}, \
{-1.0678335428237915`, -0.9697098135948181}, {-0.561033308506012, \
-0.8877573609352112}, {0.9595621824264526, -0.0500657856464386}}], "Biases" -> 
                    RawArray["Real32",{0.33588457107543945`, 
                    0.07756032794713974, -0.09569449722766876, \
-0.11187814921140671`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.32993894815444946`, 
                    0.5002012252807617, -0.49956807494163513`, 
                    0.40580034255981445`}, {
                    0.07131551206111908, -0.16277313232421875`, \
-1.1159601211547852`, 1.1482741832733154`}, {1.2370935678482056`, 
                    1.6028075218200684`, -0.42574992775917053`, \
-0.755722165107727}, {-0.5497583150863647, 
                    0.5320141911506653, -1.025053858757019, 
                    0.9358385801315308}}], "Biases" -> 
                    RawArray["Real32",{-0.037944987416267395`, 
                    0.22707660496234894`, 
                    0.007558062672615051, -0.03027201071381569}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.1833183318376541, -0.5434562563896179, 
                    0.35900264978408813`, 
                    0.6587458252906799}, {-0.15809792280197144`, 
                    0.8733894228935242, -0.9908549785614014, 
                    1.045094609260559}, {0.7978456616401672, 
                    0.35350021719932556`, -0.2868674695491791, \
-1.0262768268585205`}, {-0.7124864459037781, 
                    1.0488007068634033`, -0.5228165984153748, 
                    0.926790177822113}}], "Biases" -> 
                    RawArray["Real32",{-0.04258950427174568, 
                    0.17276756465435028`, -0.12131209671497345`, 
                    0.27382320165634155`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.05914736166596413, 
                    0.47175294160842896`, 0.17754751443862915`, 
                    0.9169224500656128}, {-1.0569748878479004`, 
                    0.4991212785243988, -0.6323114037513733, \
-0.8411307334899902}, {1.0993962287902832`, 
                    0.18369415402412415`, -1.0187921524047852`, \
-1.3645762205123901`}, {
                    0.6631592512130737, -0.4769909679889679, \
-0.28027579188346863`, -0.49332156777381897`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.04119429364800453, -0.005328983999788761, \
-0.18500567972660065`, 0.14757290482521057`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.11408688127994537`, 
                    0.4024689495563507, 0.3531888723373413, 
                    0.9709101915359497}, {0.6454603672027588, 
                    0.6429744362831116, 0.6609175205230713, 
                    0.41047388315200806`}, {-0.021838761866092682`, 
                    0.7679307460784912, -0.9821698665618896, 
                    0.5330458283424377}, {-0.48661771416664124`, \
-0.8861293196678162, 0.2985672652721405, -0.24996596574783325`}}], "Biases" -> 
                    RawArray["Real32",{-0.029024148359894753`, 
                    0.10164622962474823`, 
                    0.22822213172912598`, -0.0643431693315506}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.25814053416252136`, -0.5698228478431702, 
                    0.9926735162734985, 1.1822365522384644`}, {
                    0.30227944254875183`, -0.5475373864173889, \
-1.221463918685913, -0.7576279044151306}, {-0.6261985898017883, 
                    0.32760244607925415`, 0.2221505343914032, 
                    
                    0.49372488260269165`}, {-1.0299720764160156`, \
-0.8712263703346252, 0.4709862470626831, -0.9809171557426453}}], "Biases" -> 
                    RawArray["Real32",{-0.05840636044740677, 0., 
                    0.34599795937538147`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.7178837060928345, 
                    0.0754539743065834, -0.07109770178794861, 
                    0.10907488316297531`}, {-0.39196500182151794`, \
-1.0391287803649902`, 0.5946069955825806, 0.3916831910610199}, {
                    0.5160495042800903, -0.4873242974281311, 
                    0.49311238527297974`, -0.24718569219112396`}, \
{-0.6341967582702637, 
                    0.36129269003868103`, -0.6919680833816528, \
-1.0163519382476807`}}], "Biases" -> 
                    RawArray["Real32",{-0.18687163293361664`, 
                    0.02596762776374817, 0.03363369405269623, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.2952757179737091, 
                    0.4504634737968445, -0.04413805529475212, 
                    0.18807938694953918`}, {-0.7450427412986755, \
-0.8215761184692383, -0.4584442377090454, -0.4913382828235626}, \
{-0.2416420727968216, 0.3537132441997528, 0.27950969338417053`, 
                    0.5292163491249084}, {-0.7373591065406799, 
                    0.36556029319763184`, -0.41158556938171387`, \
-0.2839217483997345}}], "Biases" -> 
                    RawArray["Real32",{-0.01831594482064247, 0., 
                    0.017417605966329575`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.2714173197746277, 1., 
                    0.9956449866294861, 1.}], "Biases" -> 
                    RawArray["Real32",{0.19552762806415558`, 
                    0., -0.39802759885787964`, 0.}], "MovingMean" -> 
                    RawArray["Real32",{
                    0.07385575026273727, -0.2899567484855652, 
                    0.16089841723442078`, -0.009371621534228325}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0014104446163401008`, 
                    0.011190064251422882`, 0.0026832493022084236`, 
                    0.00038680279976688325`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    1.0418953895568848`, -0.513334333896637}, {
                    0.1687389612197876, -0.3302590548992157}, {
                    0.495919793844223, 
                    0.8434527516365051}, {-0.5314626693725586, 
                    1.3900585174560547`}}], "Biases" -> 
                    RawArray["Real32",{0.3659566044807434, 
                    0.13351543247699738`, 0.10686391592025757`, 
                    0.15509799122810364`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-1.3263261318206787`, -0.27763131260871887`, 
                    0.3791273236274719, 
                    0.2657627761363983}, {-1.4778060913085938`, 
                    0.8390009999275208, -0.9616281986236572, \
-0.025680365040898323`}, {
                    0.6034183502197266, -0.43304872512817383`, \
-0.3603288531303406, 
                    0.9616199731826782}, {-0.49781331419944763`, \
-0.529888391494751, -0.09996475279331207, -0.051624953746795654`}}], "Biases" -> 
                    RawArray["Real32",{0.08929497003555298, 
                    0.05597096309065819, -0.15732471644878387`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.5539706945419312, 
                    0.7471994757652283, 0.46178996562957764`, 
                    0.25351831316947937`}, {-0.4265191853046417, \
-0.7486802339553833, -0.7460475564002991, -0.6947806477546692}, {
                    0.9243960976600647, 
                    1.1926639080047607`, -0.17698706686496735`, \
-0.6852891445159912}, {0.09440665692090988, 0.27125465869903564`, 
                    0.869486391544342, -1.0169434547424316`}}], "Biases" -> 
                    RawArray["Real32",{0.2866675853729248, 0., 
                    0.04700961336493492, -0.1856992095708847}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.8231660723686218, -0.8155822157859802, \
-1.1855549812316895`, 
                    0.29907849431037903`}, {-0.4099087715148926, \
-0.6159327626228333, 
                    0.3841255307197571, -0.5931782722473145}, \
{-0.24869844317436218`, -0.5106825232505798, -0.07572083175182343, 
                    0.9675281047821045}, {
                    0.14630478620529175`, -0.14799608290195465`, \
-1.059540867805481, -1.1832749843597412`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.18658752739429474`, -0.023231053724884987`, \
-0.24010439217090607`, -0.05971395596861839}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.23073528707027435`, -0.4012846350669861, \
-0.2839476466178894, -1.0680859088897705`}, {-0.3161003589630127, \
-0.20132650434970856`, -1.0062566995620728`, 0.19635431468486786`}, {
                    0.46060413122177124`, 
                    0.20692935585975647`, -0.08522094786167145, 
                    1.1850789785385132`}, {0.0030966363847255707`, 
                    0.2825815677642822, -1.091651439666748, 
                    1.1223691701889038`}}], "Biases" -> 
                    RawArray["Real32",{0.09239514917135239, 
                    0., -0.013500048778951168`, 0.2942027449607849}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1.1700756549835205`, 
                    0.13764449954032898`, 0.6639665365219116, 
                    0.5552995204925537}, {-0.4826156497001648, \
-0.8768376708030701, -1.0968669652938843`, -0.4557706117630005}, {
                    0.516022801399231, -1.1965264081954956`, 
                    0.3426477015018463, -1.1791882514953613`}, \
{-0.18313869833946228`, 1.1725883483886719`, 
                    0.6765085458755493, -0.4567888677120209}}], "Biases" -> 
                    RawArray["Real32",{0.0691957175731659, 
                    0., -0.052879009395837784`, -0.14714697003364563`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.3545922040939331, -1.0969960689544678`, \
-0.7072638869285583, -0.6124459505081177}, {0.5162127614021301, 
                    0.6238583326339722, 
                    0.34327301383018494`, -0.26791563630104065`}, \
{-0.5693504214286804, 1.2117674350738525`, -0.11955609917640686`, 
                    0.9526163935661316}, {
                    0.0004830145335290581, -0.6953133940696716, \
-0.8744909763336182, 0.5600712895393372}}], "Biases" -> 
                    RawArray["Real32",{-0.04417675733566284, 
                    0.016460709273815155`, -0.018018431961536407`, \
-0.003621066454797983}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.08364911377429962, -0.41293445229530334`, 
                    0.7456597089767456, -0.6112605333328247}, {
                    0.38328656554222107`, 
                    0.026827214285731316`, -0.6304061412811279, 
                    0.0014338655164465308`}, {
                    0.2936494052410126, -0.4953831434249878, \
-0.8156598806381226, 
                    0.7646706700325012}, {-0.037835653871297836`, \
-0.9449551701545715, 0.7161888480186462, 0.32395997643470764`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.004959477577358484, 0., 
                    0.018554257228970528`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.4236890375614166, 1., 
                    0.8259796500205994}], "Biases" -> 
                    RawArray["Real32",{0., 0.8121699094772339, 0., 
                    0.15723752975463867`}], "MovingMean" -> 
                    RawArray["Real32",{-0.12917044758796692`, 
                    0.05554655194282532, -0.09991323947906494, \
-0.25477808713912964`}], "MovingVariance" -> 
                    RawArray["Real32",{0.000266525661572814, 
                    0.00009923988545779139, 0.00010416119766887277`, 
                    0.0011296860175207257`}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "coupling_4" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "checker_w" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Input" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "checker_b" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "TLoss_jacobian" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Z_out" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "net_W" -> Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.4652402400970459, 
                    0.49676209688186646`}, {0.1175260916352272, 
                    1.2375682592391968`}, {-0.8456810712814331, \
-0.6227266788482666}, {-1.4109878540039062`, 0.37913620471954346`}}], 
                    "Biases" -> RawArray["Real32",{0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.9029104709625244, -0.7850021123886108, \
-0.45101794600486755`, 
                    0.5204910039901733}, {-0.18260669708251953`, \
-1.0518146753311157`, -0.006921728607267141, -0.26572009921073914`}, \
{-1.0894790887832642`, -1.0242424011230469`, -0.9082985520362854, 
                    1.1481907367706299`}, {-1.1608684062957764`, \
-0.9526859521865845, -0.5282173156738281, 0.20659083127975464`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6848381757736206, 
                    0.6082578301429749, 
                    0.7840158939361572, -0.5883799195289612}, \
{-0.9217560887336731, 
                    0.40544581413269043`, -0.33492571115493774`, \
-0.3102727234363556}, {-0.5688890814781189, 
                    1.046210527420044, -0.9115222096443176, \
-0.5828470587730408}, {-0.05852051451802254, 0.9531077146530151, 
                    0.32824960350990295`, 0.16221819818019867`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.9153900742530823, 
                    0.6633276343345642, -0.6811608672142029, 
                    0.19160978496074677`}, {-0.5331753492355347, \
-0.15094305574893951`, 
                    0.5140804052352905, -0.9406359195709229}, \
{-0.16569238901138306`, 0.47429540753364563`, -1.0168081521987915`, 
                    0.1246163472533226}, {-0.8730981349945068, \
-0.8632358312606812, 0.33973273634910583`, -0.3848488926887512}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6421592831611633, 
                    0.7852470874786377, 
                    0.9743026494979858, -0.5576608777046204}, {
                    1.029341697692871, -0.7168751955032349, \
-0.06433585286140442, 0.08959601074457169}, {0.27530547976493835`, 
                    0.5117119550704956, 
                    0.7906123995780945, -0.4385753571987152}, {
                    0.7723061442375183, -0.06683015823364258, \
-0.8859438896179199, -1.218153953552246}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    1.203736662864685, -0.25375401973724365`, 
                    0.7500302195549011, -0.22818173468112946`}, \
{-1.0999925136566162`, 0.9465587139129639, 0.3289337754249573, 
                    0.8465142846107483}, {
                    0.028109243139624596`, -0.03129323944449425, 
                    1.1834310293197632`, -0.44804665446281433`}, \
{-0.037871867418289185`, 0.010917437262833118`, -0.8484542369842529, 
                    0.20530910789966583`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.9259331226348877, 
                    0.37142977118492126`, 0.1256236582994461, 
                    0.04828003793954849}, {
                    0.9989590048789978, -0.2154754400253296, \
-0.016423378139734268`, 0.9485648274421692}, {1.040073037147522, 
                    0.12642869353294373`, -0.3693975806236267, \
-1.1077848672866821`}, {-0.5319598317146301, -0.4387214481830597, \
-0.534461259841919, -0.4620550572872162}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.0833996906876564, -0.46460387110710144`, \
-0.1812361478805542, 0.679459273815155}, {-0.8004432320594788, 
                    0.10009783506393433`, 
                    0.24950337409973145`, -0.41158491373062134`}, \
{-0.47476792335510254`, -0.3978653848171234, -0.15602312982082367`, 
                    0.8161223530769348}, {0.02307536080479622, 
                    0.14550918340682983`, 0.8530614376068115, 
                    0.5101252198219299}}], "Biases" -> 
                    RawArray["Real32",{0.011915917508304119`, 0., 
                    0.034721240401268005`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1.000890851020813, 1., 
                    1.0057798624038696`, 1.}], "Biases" -> 
                    RawArray["Real32",{0.2999424636363983, 0., 
                    0.3054947257041931, 0.}], "MovingMean" -> 
                    RawArray["Real32",{0.01201102789491415, 0., 
                    0.0346289798617363, 0.}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-1.007866621017456, -1.1302850246429443`}, \
{-1.1292991638183594`, 
                    0.32867714762687683`}, {-0.9661316275596619, \
-1.2228132486343384`}, {-0.35992372035980225`, 1.0590423345565796`}}], 
                    "Biases" -> RawArray[
                    "Real32",{-0.19781887531280518`, -0.052421003580093384`, \
-0.26478883624076843`, 0.10271609574556351`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.04167582467198372, -0.039781633764505386`, \
-0.026082627475261688`, 1.3676934242248535`}, {
                    0.8291130661964417, -1.4437823295593262`, \
-0.5611294507980347, -0.9822043776512146}, {-0.3967604637145996, \
-0.753619909286499, 0.362751841545105, 
                    
                    0.14525388181209564`}, {-0.9395437836647034, \
-0.5477266907691956, -1.133709192276001, 0.847710371017456}}], "Biases" -> 
                    RawArray["Real32",{0.07890690863132477, 
                    0.3761350214481354, 
                    0.3376272916793823, -0.1185382828116417}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.6026408672332764, 
                    0.3285408020019531, -0.41105180978775024`, 
                    0.8543686866760254}, {-0.11997757107019424`, 
                    0.8851994872093201, 
                    0.6833640336990356, -0.3456652760505676}, \
{-0.39565959572792053`, -0.3138121962547302, -0.6649273037910461, 
                    0.35737353563308716`}, {-0.4911477863788605, \
-1.1042778491973877`, -0.36274898052215576`, -0.11533467471599579`}}], 
                    "Biases" -> RawArray["Real32",{0.020833812654018402`, 
                    0.20892350375652313`, 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.9802055358886719, 
                    0.44653260707855225`, -1.1153992414474487`, \
-0.5422317981719971}, {1.0233982801437378`, -0.0626722201704979, 
                    1.0991966724395752`, -1.063027024269104}, \
{-0.6796855330467224, 
                    0.23226308822631836`, -0.3158417344093323, \
-0.5147196054458618}, {-0.8717750310897827, -0.3191491961479187, 
                    0.4369300305843353, -0.6443153619766235}}], "Biases" -> 
                    RawArray["Real32",{
                    0.16314755380153656`, -0.009577592834830284, 
                    0.18332423269748688`, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.18324266374111176`, -0.5023815035820007, \
-0.7085782289505005, 
                    0.20978394150733948`}, {-0.8939442038536072, \
-0.6249310970306396, -0.21290069818496704`, 
                    0.979325532913208}, {-0.5504775643348694, \
-0.05832118168473244, -0.11689189821481705`, 0.053812094032764435`}, {
                    1.0853383541107178`, 0.0061812330968678, 
                    0.5580741763114929, -0.3068590462207794}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.05754492059350014}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.36064276099205017`, 
                    0.6194612383842468, -0.27823686599731445`, \
-8.196585440600757*^-6}, {0.4804772138595581, -0.165147066116333, 
                    0.9228812456130981, 
                    0.7461766004562378}, {-0.3477061092853546, \
-0.09727273136377335, 
                    0.4745616912841797, -1.1461161375045776`}, \
{-0.9887083172798157, 0.6576195955276489, -0.8700469732284546, 
                    1.0412739515304565`}}], "Biases" -> 
                    RawArray["Real32",{0.07557635009288788, 
                    0.018580619245767593`, 0., -0.030154014006257057`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{9.325220162281767*^-6, 
                    0.8228119611740112, -0.4993772506713867, \
-0.21248407661914825`}, {0.07443057745695114, -0.26470720767974854`, 
                    0.2867298722267151, -0.2581230103969574}, {
                    6.920875421201345*^-6, 
                    0.09026002883911133, -0.5431668758392334, 
                    0.31951263546943665`}, {-0.8487663269042969, \
-0.5759012699127197, 0.33831918239593506`, 0.3584586977958679}}], "Biases" -> 
                    RawArray["Real32",{-0.05139141529798508, 
                    0., -0.0088221849873662, 0.004635503049939871}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8246548771858215, -0.2259514480829239, 
                    0.3128778040409088, 0.3548484742641449}, {
                    0.03844049572944641, -0.7165543437004089, \
-0.6533167362213135, 0.02939617820084095}, {
                    0.8554775714874268, -0.7347059845924377, \
-0.7679096460342407, -0.06620988994836807}, {1.0089783668518066`, 
                    0.7805302143096924, 
                    0.42812126874923706`, -0.013497886247932911`}}], "Biases" -> 
                    RawArray["Real32",{0., 0.015746716409921646`, 
                    0., -0.005764590576291084}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 0.35106638073921204`, 1., 
                    2.100911855697632}], "Biases" -> 
                    RawArray["Real32",{0., -0.12786923348903656`, 0., 
                    0.05423612520098686}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.10744404792785645`, -0.13281498849391937`, 
                    0.005403124261647463, 0.32040634751319885`}], 
                    "MovingVariance" -> 
                    RawArray["Real32",{0.0011073986534029245`, 
                    0.0017343112267553806`, 0.000022023315978003666`, 
                    0.009115437045693398}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_w" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.6304361820220947, -1.0520421266555786`}, \
{-1.2773617506027222`, -0.5163175463676453}, {1.0575640201568604`, 
                    0.4758467674255371}, {-0.2984674572944641, \
-0.5416990518569946}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.02016102522611618, -0.020137911662459373`, 
                    0.009103432297706604, -0.020071636885404587`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.05553991347551346, 
                    0.4838116466999054, 0.6280455589294434, 
                    0.9579535126686096}, {
                    0.4094116985797882, -0.7297202944755554, \
-0.5407580137252808, 1.0920393466949463`}, {0.3416574001312256, 
                    0.8166967630386353, 0.027458971366286278`, 
                    0.5231937766075134}, {-1.0214983224868774`, 
                    1.1557561159133911`, -0.73240065574646, \
-0.3085293173789978}}], "Biases" -> 
                    RawArray["Real32",{-0.005659567657858133, 
                    0.018651708960533142`, -0.027242522686719894`, 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.7295066118240356, -0.9585456252098083, 
                    0.4683768153190613, 0.013072196394205093`}, {
                    0.7268832325935364, 1.0297549962997437`, 
                    0.13010364770889282`, 0.8511728644371033}, {
                    0.5311985015869141, -0.7490038275718689, 
                    1.1106948852539062`, -0.783568799495697}, \
{-0.11016649007797241`, -0.7793685793876648, 0.7892118692398071, 
                    0.6283679008483887}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.02789856493473053, -0.0267933439463377, \
-0.020013725385069847`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.8662037253379822, -0.7305806279182434, 
                    0.5959702134132385, 
                    0.15533588826656342`}, {-0.16451825201511383`, \
-0.9961524605751038, -1.136181116104126, 0.4645577669143677}, {
                    0.3575422465801239, -0.3326648473739624, \
-1.0992751121520996`, 0.055531591176986694`}, {1.0984028577804565`, 
                    0.4548112154006958, 0.666391134262085, 
                    1.1845535039901733`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., -0.028072068467736244`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.8098240494728088, 
                    1.155951976776123, -0.6447374224662781, 
                    0.45518845319747925`}, {-0.6766847372055054, \
-0.47551292181015015`, -0.3867071270942688, 1.1213455200195312`}, {
                    0.9464103579521179, -1.1102110147476196`, 
                    0.7772281169891357, 
                    0.23293203115463257`}, {-1.182234764099121, \
-0.47915083169937134`, -1.1138650178909302`, -0.3971502184867859}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0002449585881549865, -0.004986758343875408, \
-0.03427859768271446, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-1.1852563619613647`, 
                    0.7036933302879333, 0.8977159857749939, 
                    0.928520679473877}, {-0.9681017994880676, 
                    0.7755762934684753, 
                    0.1256440281867981, -0.6624584197998047}, {
                    0.6240013241767883, -0.14710289239883423`, 
                    0.5384515523910522, 0.6343113780021667}, {
                    0.6885873675346375, 0.07010910660028458, 
                    0.09267108887434006, 0.12848487496376038`}}], "Biases" -> 
                    RawArray[
                    "Real32",{-0.0070115430280566216`, \
-0.015095503069460392`, -0.009009095840156078, 0.003930181264877319}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.6698826551437378, -0.29908081889152527`, \
-0.2068452537059784, -0.30872347950935364`}, {0.6599966287612915, 
                    0.04333231970667839, -1.0408837795257568`, \
-0.306166410446167}, {-0.9370322823524475, -0.3536984920501709, \
-0.6001484394073486, 0.02215658314526081}, {-0.1800127923488617, 
                    0.8332293033599854, -1.1162543296813965`, \
-0.6609154343605042}}], "Biases" -> 
                    RawArray["Real32",{
                    0., -0.008087989874184132, -0.011284451000392437`, \
-0.02397492341697216}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{0.5182785987854004, 
                    0.6566182374954224, 0.5928246974945068, 
                    0.12140579521656036`}, {
                    0.1699356734752655, -0.27175694704055786`, 
                    0.7886574864387512, 0.6768583655357361}, {
                    0.5189081430435181, 
                    0.2447454184293747, -0.5930821299552917, \
-0.08741005510091782}, {0.0417998731136322, -0.3245701491832733, 
                    0.5038024187088013, -0.023459866642951965`}}], "Biases" -> 
                    RawArray["Real32",{-0.008279794827103615, 
                    0., -0.01587769389152527, 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{0.9806042313575745, 1., 
                    0.9761574268341064, 1.}], "Biases" -> 
                    RawArray["Real32",{0.5513590574264526, 0., 
                    0.12312658131122589`, 0.}], "MovingMean" -> 
                    RawArray[
                    "Real32",{-0.008144805207848549, -5.605193857299268*^-45, \
-0.015940163284540176`, -5.605193857299268*^-45}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_w"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "exp_1", "Inputs", "Input"]
                     -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "checker_b" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT],
                    "Y_out" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Nodes" -> 
                 Association[
                  "thread_0" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "core_net" -> 
                   Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.47400811314582825`, -0.8142053484916687}, \
{-0.9381108283996582, -0.9096481204032898}, {-1.2824023962020874`, 
                    0.06401971727609634}, {-0.07836522907018661, 
                    0.48831385374069214`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    
                    0.10472651571035385`, -0.899893045425415, \
-0.8831688165664673, 0.841711699962616}, {
                    0.639081597328186, -1.0726513862609863`, 
                    0.016854742541909218`, 0.6379846930503845}, {
                    0.29376646876335144`, -1.0531771183013916`, \
-0.7469577193260193, -0.6804822683334351}, {-0.3903186321258545, 
                    0.41556766629219055`, -0.44766518473625183`, 
                    0.5781077742576599}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.1779835969209671, -0.7659265995025635, \
-0.6955357789993286, -0.46534663438796997`}, {
                    0.40920573472976685`, -0.5140355825424194, \
-1.0458946228027344`, 1.022903561592102}, {
                    0.6857390999794006, -0.1890314221382141, \
-0.9970906972885132, 1.1968910694122314`}, {
                    1.0493556261062622`, -0.5241221189498901, 
                    0.996066153049469, 0.6140029430389404}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.09778854995965958, -0.08884620666503906, \
-0.981550395488739, 0.14494751393795013`}, {-1.1741719245910645`, 
                    0.5936166644096375, -0.8853036165237427, 
                    1.1288560628890991`}, {1.0192004442214966`, 
                    0.45757684111595154`, 
                    0.4314703643321991, -0.4057874381542206}, {
                    0.34138989448547363`, -1.2073633670806885`, 
                    0.6353721618652344, -1.1829006671905518`}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.7903922200202942, 
                    1.0306997299194336`, -1.094161868095398, \
-0.23096758127212524`}, {0.5526812076568604, 0.24305129051208496`, 
                    0.5017563104629517, 
                    0.14767198264598846`}, {-0.6947301626205444, 
                    1.087038278579712, -0.9804190397262573, 
                    0.5635855197906494}, {
                    0.838047981262207, -0.9405266642570496, \
-0.47020044922828674`, 0.298164427280426}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray[
                    "Real32",{{-0.3400888741016388, -0.1795671135187149, 
                    0.29517868161201477`, -1.0533629655838013`}, {
                    0.5913594365119934, -0.9476831555366516, 
                    0.1860104650259018, 
                    0.02964492328464985}, {-0.28369805216789246`, 
                    0.2887578308582306, 0.6344670057296753, 
                    0.21172834932804108`}, {0.7833213806152344, 
                    0.15075556933879852`, 0.19456005096435547`, 
                    0.9793469309806824}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{
                    0.5568111538887024, -0.2508641481399536, \
-0.8237136602401733, -0.2236444056034088}, {-1.0766154527664185`, \
-0.14689864218235016`, -1.129744529724121, 
                    0.4696337580680847}, {-0.082916259765625, 
                    0.3892093598842621, -0.8197648525238037, \
-0.99456787109375}, {0.9241390824317932, -0.8137200474739075, 
                    0.5294305682182312, -0.8215039968490601}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0.}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{-0.5217711329460144, 
                    0.7797710299491882, -0.41279080510139465`, 
                    0.5107153058052063}, {-0.22225850820541382`, 
                    0.27820247411727905`, -0.8235942125320435, 
                    0.6491014361381531}, {-0.2466532438993454, \
-0.6058765053749084, -0.5460322499275208, -0.7440249919891357}, \
{-0.7497199773788452, 0.5091549158096313, -0.8626350164413452, 
                    0.23669159412384033`}}], "Biases" -> 
                    RawArray["Real32",{0., -0.008660465478897095, 0., 
                    0.020563967525959015`}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> 
                    RawArray["Real32",{1., 1.0004466772079468`, 1., 
                    1.0005074739456177`}], "Biases" -> 
                    RawArray["Real32",{0., 0.9064932465553284, 
                    0., -0.1170889362692833}], "MovingMean" -> 
                    RawArray["Real32",{0., -0.008652647025883198, 0., 
                    0.020534871146082878`}], "MovingVariance" -> 
                    RawArray["Real32",{1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10, 1.8310561400447511`*^-10, 
                    1.8310561400447511`*^-10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 4, "$SpatialDimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "wb_convert_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "exp_1" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_in" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "partLayer2" -> 
                   Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_2" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_1" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "thread_3" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Times]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "plus_f" -> 
                   Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "thread_0", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "checker_b"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_2", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
               Association[
                "Type" -> "Threading", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                 "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_WW", "Inputs", "checker_w"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_w"], 
               NeuralNetworks`NetPath["Nodes", "net_W", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "net_B", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "net_W", "Outputs", "Loss"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_B", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath[
                "Nodes", "net_BB", "Inputs", "checker_b"] -> 
               NeuralNetworks`NetPath["Inputs", "checker_b"], 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "net_B", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "3"] -> 
               NeuralNetworks`NetPath["Nodes", "net_WW", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Y_out"], 
               NeuralNetworks`NetPath["Nodes", "Total_loss_j", "Inputs", "4"] -> 
               NeuralNetworks`NetPath["Nodes", "net_BB", "Outputs", "Loss"], 
               NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "Total_loss_j", "Outputs", "Output"]}], "square" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
               "$Dimensions" -> {2}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]],
            "summation_z" -> 
           Association[
            "Type" -> "Summation", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "minus_half" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "gaussian_coef" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.8378770664093453`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "Total_loss_jac" -> 
           Association[
            "Type" -> "Threading", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
             "Inputs" -> 
             Association[
              "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]],
            "summation_jacobian" -> 
           Association[
            "Type" -> "Summation", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "plus" -> Association[
            "Type" -> "Threading", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
             "Inputs" -> 
             Association[
              "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], "2" -> 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "density_coef" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.3862943611198906`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "minus_prob" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
           "perpixel" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]],
          "Edges" -> {
          NeuralNetworks`NetPath[
            "Nodes", "coupling_1", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4", "Inputs", "checker_b"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_b"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4", "Inputs", "checker_w"] -> 
           NeuralNetworks`NetPath["Inputs", "checker_w"], 
           NeuralNetworks`NetPath["Nodes", "coupling_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "coupling_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_1", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "1"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_1", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Nodes", "coupling_3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_2", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "2"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_2", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Nodes", "coupling_4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_3", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "3"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_3", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_4", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "square", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "coupling_4", "Outputs", "Z_out"], 
           NeuralNetworks`NetPath["Nodes", "Total_loss_jac", "Inputs", "4"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "coupling_4", "Outputs", "TLoss_jacobian"], 
           NeuralNetworks`NetPath["Nodes", "summation_z", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "square", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "minus_half", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "summation_z", "Outputs", "Output"], 
           NeuralNetworks`NetPath[
            "Nodes", "gaussian_coef", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "minus_half", "Outputs", "Output"],
            NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "1"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "gaussian_coef", "Outputs", "Output"], 
           NeuralNetworks`NetPath[
            "Nodes", "summation_jacobian", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "Total_loss_jac", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "plus", "Inputs", "2"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "summation_jacobian", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "density_coef", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "plus", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "minus_prob", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "density_coef", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "perpixel", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "minus_prob", "Outputs", "Output"],
            NeuralNetworks`NetPath["Outputs", "Total_Loss"] -> 
           NeuralNetworks`NetPath["Nodes", "perpixel", "Outputs", "Output"]}], 
        Association["Version" -> "12.0.10", "Unstable" -> False]], "Method" -> 
      "RealNVP", "Options" -> 
      Association[
       MaxTrainingRounds -> 
        Association["Value" -> 500, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> Ramp, "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 8, "Options" -> Association[]], 
        "CouplingLayersNumber" -> 
        Association["Value" -> 4, "Options" -> Association[]], "NetworkType" -> 
        Association[
         "Value" -> "FullyConnected", "Options" -> Association[]]]], 
    "TrainingInformation" -> Association["Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "RealNVP", "Options" -> 
           Association[
            MaxTrainingRounds -> Association["Value" -> 500], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "CouplingLayersNumber" -> Association["Value" -> 4], 
             "NetworkType" -> Association["Value" -> "FullyConnected"]], 
           "NaiveImputer" -> MachineLearning`MLProcessor["ImputeMissing", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Mean" -> {-0.00011694978920027098`, 0.00007700457069977347}, 
              "StandardDeviation" -> {0.9999923764062054, 
               1.0000250705186169`}, "Method" -> "NaiveSampler", 
              "VectorLength" -> 2, "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
              "NumericalVector", "Version" -> {12., 0}, "ID" -> 
              6728614895511755230]], "EMIterations" -> 1] -> Association[]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{
          "Value", "Options", "NaiveImputer", "EMIterations"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
           TypeSystem`AnyType, 
           TypeSystem`Atom[Integer]}], 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 1], 
        Association["ID" -> 251092553336860]], "BestModelInformation" -> 
      Dataset[
        Association[
        "Configuration" -> {
          "RealNVP", MaxTrainingRounds -> 500, "ActivationFunction" -> Ramp, 
           "NetworkDepth" -> 8, "CouplingLayersNumber" -> 4, "NetworkType" -> 
           "FullyConnected"}, "ModelUtility" -> Missing[]], 
        TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`UnknownType}], 
        Association["ID" -> 251096848304156]]], "NaiveImputer" -> 
    MachineLearning`MLProcessor["ImputeMissing", 
      Association[
      "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Mean" -> {-0.00011694978920027098`, 0.00007700457069977347}, 
       "StandardDeviation" -> {0.9999923764062054, 1.0000250705186169`}, 
       "Method" -> "NaiveSampler", "VectorLength" -> 2, "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Type" -> "NumericalVector", "Version" -> {12., 0}, "ID" -> 
       6728614895511755230]], "InputDimension" -> 0, "OutputDimension" -> 2, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{-0.48249699075707647`, 1.4091840047834874`}}, "ID" -> 
           5216113400745425930]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 366.848324009674, 
      "MaxTrainingMemory" -> 13947480, "DataMemory" -> 160152, 
      "FunctionMemory" -> 4317032, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 7, 22, 16, 21, 48.5664587`9.438911295598352}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}], "LogPDFDistribution" -> 
    MachineLearning`TailedQuantileDistribution[
      Association["Quantiles" -> CompressedData["
1:eJwBNQPK/CFib1JlAQAAAGUAAAAvleaX7zb9v7GF6RQCovS/AJxTa6IZ8b+d
dGTGHGbvv+UVeMNqVe6/NRyyt7I97b+Aw6cz0fLrv0VJ9eXmzeq/o/so4V1n
6b/z7czD/NDov8Xt7Z6EiOi/YJpX/y7J578GR7WOEOnmv0O5NWUPeOa/r0N4
VSMa5r9ppEwUyJzlvysJd9fk/+S/2EjWhNON5L/xqCMGyB7kvyuCpVuHseO/
sIe+vKNW4782PxTCV9Xiv33CkgsLceK/tHShresH4r87JIUbEbPhvxBr9J2r
f+G/3JptanVC4b9IQkjQIAjhv87v4aJ10eC/4HQquMKk4L8RQLHYEVDgv5un
6sdzM+C/vOqxFGS237/olF/mRTffv+ErnoJE8d6/Oa33dd+23r+y4kQIaYXe
v+YXOodqNt6/DVd1PBb93b/R8A4Eu6fdv+trp5F+WN2//y+jhC3l3L/sVtO4
47Xcv54snC0bYty/rKPaKQYQ3L8bBvytFdDbvz+oHrS5qNu/1x1DIUps2794
3Dq3lz7bv99SpHP6INu/GrBija7x2r8zCPqiuMTav7Uifnf2lNq/AarCx6pu
2r+JTXP0F1Dav27s/ObdKtq/CzzIufMW2r/Sw8cIJ/fZvy039OJWwNm/aGCO
2w+O2b94OdZjATfZv1/Z768l7ti/GyxxRCe/2L+wjd0K7nTYv004RLzyD9i/
p0C7kB7O17/GTzKPLLDXv7uL+vHga9e/89zFFGgN17+RUljF6OrWv/C/bK8t
tta/1zQ9yC+F1r9iwhQA2VfWv78unnd2K9a/WZQRQKwK1r/WwaFHfeTVv3wc
tCdsuNW/9IcX/XiT1b9uRFrtD13VvxSjPMYGO9W/hhWrEjIO1b9gi1yvjNzU
vyeNe2VpvdS/mSEyLYKK1L/xVyYHxTvUv9aWs4KADNS/pZ6u2BjJ07/Gv+RP
W2bTv71+fXwXTdO/yDVCbnMT07/5APl0msbSv318mTyoRtK/RvYeaFbW0b98
EYV5Lp/RvxzHhj2DO9G/UJPmAgO70L/Ma5wrugLQv2OekHYkjc6/LSA7zR9E
zb/Gb+BTxLvIvxB0VNvNacO/ECfTTA==
        "], "LeftBoundary" -> -1.2666992147795368`, "LeftScale" -> 
       0.20060917237550235`, "LeftTailNorm" -> 0.011]], "Entropy" -> 
    Around[0.9592977740892532, 0.013404012495377662`], "EntropySampleSize" -> 
    1000]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{
  3.7728145984700885`*^9, 3.7728146354628344`*^9, {3.772814829376995*^9, 
   3.7728148442302847`*^9}, {3.772814907492152*^9, 3.772814933111657*^9}, {
   3.772815048821305*^9, 3.772815073569142*^9}, 3.772815200470866*^9, 
   3.772815708598374*^9},
 CellLabel->
  "Out[259]=",ExpressionUUID->"66865cd8-df89-4960-b728-8f0d351d30ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "@", 
  RowBox[{"RandomVariate", "[", 
   RowBox[{"ld", ",", "5000"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7728147738793707`*^9, 3.772814791942112*^9}, 
   3.772815077427827*^9, {3.7728159955828395`*^9, 3.772816001870055*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"e141c67f-00d0-4e4a-9123-6ea44749aedb"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
09E4s++s1dYJeHrpl4eE6zConP0Q94tnAB9Huls929UOx9abSH3m6gMWO8Zp
hc4VXHWKSn426oY3VFTH+nrpQJ62Z3fQG8F1BTHJqaKt6PpEN820pRstU3Jn
3iSWotqxD9pyO0YxK/SJzQzT5+3EQ+43/EdCxWbuW2N7xiD25/vfidwMdMuP
+HI9nowHtC4NSMhTwHByqlR6axqe/6EqaNoyBxuP6pSJiBfibrV3Jv5ZJBAO
PKBz8MwwbFTt9VCuJ+K6Xzy6lw0I+O4sf9bN6gVoIwx0DBOJ8NaLzfwiOx0L
Pn23MvjZifOSL/IuHq3D0w/G/N5HjaOArAV882HAmbt75SqzZsGrXftxzSgV
t7FwyrlotMErGfvVyLs09J4s4iF2/8THlptY1RKZfO9xxSi5mgT6TkPubl/I
2Oumtyc+qhaeZOs95rOhomTCos/NkhGskflRTWTyMYuLgvOHa4Owl4XttOZo
O77jd0jZad0Ga21CgXJ8nXDQR5ltJ/N8om7VPK+omMFPr7exHfreBZaJjXal
SjQ0CLnqqaTC5PjAK5HWHHNgts//IqOCCg4mPB2Oz6ZxTHm3taEK05cjqRyd
6tMotjP/y4nby5ias+gY/K0FNuqrvtsfNIJv/f44qTgMgIvpyWYb7SGYlv2S
sk90ACWq9WR+roRApJnPYELVFHAwPlzreDQB1aQa76PM/P8ckKo4xt4Evxvt
+NQeUVBoiuH6u2ABNlpnxYrr9KNm8ew0IYYIo8oq5iMn21DglF53ElsPkgpv
8Wn+KkO4uPXMPa0BSCU8eto1TUNO7WjiyPMJ+C7c/li1gobJzQL/bR4fhY3P
u5LkmX3Fna3EQjV1CjL8Nc63qdOQ5n1721nrJZwgbBaxvUsAvUuNf4L8u0GO
fdjwDEcqzDJefD/zYgjWMtf8/O/24Utlxzf7r6xhTLZ7+OTOAfxs/UZdJGcI
3+xIfNrF1gUH3qnUFm1ox8rP27cMX/yHGz6qv9RT/QhWug8W7ptNg8z9PlJi
Wy+sae0d/PiqBBU5n/PF7uoF/97LNwsT48A51Ko1sZeELS02W7/wUkFgU45y
zwqbLvFEhamPLRlAfOHCGc1hNHGfPs7KXQv05+HrnonVgEiRRIeJIAG2y7Xe
0OmcA9fhTBN1aWZO39IavJU3DpqiVZNtzXQsPLnMZfTXFSv2fAXupjnYsLFr
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
k99dX47AkNS8ypdrLHQOMJ5v6OoAgXa2yo06Jv6ICvsis7YNL5UZv1haPYCB
rDi64rJvln2g7HliPQ0y+tG080556Nnz6rbB0DBKPwm7uGNgBMoDnR6OnyPg
LP93UmJRJU5SUuQDl3NiZ0CuiZUOFYyfHi8nztMx492BY/b7h/De2d1ajvfm
4P2tAV29NzX46btS02UTBhzLCFwZv5WDGV43bA+MDwGtVbocLzGg0CpEcXUX
DS3Dd2xYH8XEXvdcg3XmNJA9ytB4ojqNWZL3CIYENiS4TvoZ5E9DLOerTrYs
E099TRJ0sPmHyhkLJ779qce7PuffR8SMYNfYcKzs61mY7evzJyQT4G6kgvbx
L2wcCrhvtvr0CHKbCS59KuHAuY/8nj9WDaCUPZmPIZSFqnV2d56HTeKJKS13
O/dZaF54NLkluR3HuwvFz7gxQSMuT/3dpgVw/UAx29tfi8nJN7InXcuhm05t
j3Ecg+lQpQTf/4jQbn1353s3Nv6TbCPo8C6B5uq7KpoPmiFo5PIDbvEBMNq7
7gwnNgFl7tKkzDnl8DVxePi69jDYS5t+/2+mEy0Wuc6uI7bjWEg0ptixYN5I
vHun9CjKhKg7ykbPQ1ip1TO5yzXYkjRnGmpJhhY1nj9iomzkNm8XtBrLBNfH
vfqUDBpKLw2OZXfHwwSv5ecePRqWOpcd1Vu9rOdPD/5sTirGH3aWpdVqXdiT
bn5JNqEJz9xaOKkjQYZcwxe5DCE2XntW5a59mAlp/JsHHmpR8aj3gNXCowSM
y7264qYqFe/9KzMfPDgIKokv6rnXslF3fd2OHNkqKHxgUr20dRj2pfQIDTAp
cPhp04dx7j68vI4S6zJIhScjZyZe6DPwvXSwkt+Vf7j16c+ukytL8UBi/mW9
+X7sk6UweMZScfwOJOgVEvE//0s3wgz+QNBs2cjwIg20L01dV0ibQe/ohONO
f+jwmW8jNc2OgX4LKcyxCwvYXHFv9EN6DXTUus1HrIqH7E+i/3jPTuO95Lue
LNG/4Mxy3dZSkowfj587KaBRDQHNJzU+SDFQ1P1Fl93JMXi/T+ItL42Fmw5k
dnKH9mNLUb5wVBsLZrMcPRKeU/A/RRnahfcDoCzaEo/tbNCsjC1eTyCjieD5
6O6ONlSP7/9VTWjDzvODaTrLefVpOSGMKUsCT+LNC0yPYhTUzF/VJDmCt3gq
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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{491.9999999999861, Automatic},
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.292200989132774, 2.6839460302673532`}, {-1.590765091604971, 
   1.7016957002537711`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.772814792463683*^9, 3.7728148042342153`*^9}, {
   3.772814844918444*^9, 3.7728148511936674`*^9}, {3.7728149082281837`*^9, 
   3.7728149350544634`*^9}, {3.7728150514921637`*^9, 3.772815078257606*^9}, 
   3.7728152023179274`*^9, 3.772815709510934*^9, {3.772815996042604*^9, 
   3.7728160026639013`*^9}},
 CellLabel->
  "Out[267]=",ExpressionUUID->"71a05f65-309c-4833-a601-3b4577176481"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"PDF", "[", 
      RowBox[{"ld", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7728157230128374`*^9, 3.7728157428009334`*^9}, 
   3.7728160243997917`*^9},
 CellLabel->
  "In[268]:=",ExpressionUUID->"6680d8c5-1215-4e66-a79b-aed9fc20309f"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.7728158267930965`*^9, 3.7728158992214584`*^9, 
  3.772816029820298*^9},
 CellLabel->
  "Out[268]=",ExpressionUUID->"c08b4f3b-583e-421b-8342-8f2eebe4b0a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "\"\<Model\>\""}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.772815866321417*^9, 3.7728158723124*^9}},
 CellLabel->
  "In[265]:=",ExpressionUUID->"2e867fff-85d9-4503-80e9-b7ff53759bdc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Sampler\"\>", "\[Rule]", 
    TagBox[
     TemplateBox[{RowBox[{
         StyleBox[
          TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
         StyleBox["[", "NonInterpretableSummary"], 
         DynamicModuleBox[{Typeset`open = False}, 
          PanelBox[
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["3", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"X_out\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["16", "SummaryItem"]}}, 
                  BaselinePosition -> {2, 1}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 3}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    LineBox[CompressedData["
1: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
8F8IhPH5
                    "]], 
                    LineBox[CompressedData["
1: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
btZs6g==
                    "]], 
                    LineBox[CompressedData["
1:eJwtlHk41HkcxweDDskV2VS/OcyMmTHzS0WE7zrGkVuUUlt0I4WpKXTZHCtK
2Rzl7pBqaysqxvb9oCRNqbaH3FdICDnKYtvaej/P+3k/7//ez/uPF81/j+c2
eQqF4vvV3/K7lsDjXFFKHLwyj7+VE9g0QoJdkC2n63kqSo5N/2lpNwk6+w8t
1XEpQAui3qtQ60hY0TZjcP/8QsTMTbZ2qyQhLX7QMcKxFF17+7tUq5AE7Y2m
3rKMcnTb+YPEK4eEAyaOcTvEj5FpfbZE9QQJYi+25alrMoTiC0qsxSQoNuyS
0mgv0cNNs62GfUlYyGPrWuu9RpUJRXf87EmwJv+9KDtYi5R6uSpJRiTUerbe
1U16g2LEgasiF5JQf6ba1WBTA7ISSoJZM0iwH8JBk92NKNwoY0ivSwjMQKyW
xG5G/VvbanYWCyFY4YlZD9GCmsZKwslEIbCKm95T/m5Bq7p4w2GbheCU8A/R
bNGKnsm+SQAiqX1jhF8rUvCaT92fLQCHxrvpTNtW5DPovV4SKoBy86u1i/pb
UHVWdM0LkQD+bKWdCVjXgtb452+J0hWA+sOFMuWEZkQ1k2onDBhCd2/m8fFf
m9Bz/bJ3A2WGQHrkSY2tGlGRfnF9foohDE1wQ6oq6lGJ6YXe4kBDYLw1uXRt
9psfe/igRrR3GO59gSjSfKpzNh/Kwm8ROSEy5HYieUNNCB8SOtep2lGqUJFF
0us1tnw4FC496ZJQgYxeZQZ1aPPB4Mh1m928B+ipQykztJcHBdu8TsmbFqHI
3L4pxVIejLo3U+5GXUGiJt5Y5kkelJo33CtkxCPOROQcMz8edI9oF14dT8Hf
93DBsbKv/97lMizRotO3ZnNhaAmjvs2iEusPR74ShnJBoBXgMTFcjRv8m5uF
Ii5Qd4O3XEUNTtplY7t1PhdWLNIMi/R5hZ0Ubyo+6zMAszIXuaHm11jFmKAH
YAOIW5zk3RhSh19OpqSvTDYAwrRhj6VWAz63RjPIaocBKKry3XUfNeHI8AWp
Xk85MKrOic3y7MR1As1CIosDN5QT7PLK3uL1UUqxnXs54OKStztS2I2p+8bm
Ztpw4EVHwBQ/owe/VmpzddHmwPKqro93lHvxM5NKm9F3bDg6reGhHvoe9ytf
+XBayoYbUR+1RY192EgS7cY6yYbytcdt3WwGcFb0L9tvbWbD/ciqeuHVDz/+
YQE507GjOH0Yp/h3Hg7JZoFlymjTIdePONcgSrQtlAXZOeyMfOURPEQrIK6I
WODB6Vhs8mgEH3byUTPT/doNmTv5saPY4/IprQUD+nDx5oA41mUMbzdyM3Qq
0wf7m5Z2DvPHcelgyvrqs/pgztdpCu4Zx94t2zPSAvThGEtiPFnyCWtQZ83z
K2dCY05EK2hM4v5mVZpqKhPk9SISIwYm8Y5lEteDgUwIWqJz8cLDKXxU2SYz
DzFBp92NYZo2jU3Xhs6J12SCHE9/tvnOf/FphmK2sIcB/LmpvteXfcEngiY9
kksYcC7xklb89BfMMPJmFSUygLGacz7AjwIbxBp6Zzcz4Dzfuc2unAL/3yOj
g+znunnWY3JQlHfbMTOHDiqjoZ9jfOSBwcV7tSR0OBKmOfH5kTzM2/LRysid
Dkx8XyfNQgF+c3H+a5xHh4laf6+tWAGO9so6/GbRQU6qfnOjExWmjcW3w/po
sDLwEft4OxWmllvz+TU0uNxz6EHdMUU40m3sfqKI9pUvK8N8+EoQ7eC56HQW
DdRF0yKldiVI7HO1fuJLg/O8mMNTC2dCqrePt3ARDa6JxXFRgtmQFxO8tqKL
ADuiakuaxhy4cfi0Q/RtArYLjqlZVquC1KKMs+84AXE1bo+LuWpQXTH96Ywv
AUSx+h69BjVoVLO/22JCwNTqmC92YeowwMzc4qNLgF7OHwdMx9XhO58JOJIZ
2zDirwH/ATy2yyg=
                    "]], 
                    LineBox[CompressedData["
1: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
WfHaC/8FNcGCVA==
                    "]], 
                    LineBox[CompressedData["
1:eJwBgQN+/CFib1JlAgAAADcAAAACAAAAAAAAAAAAMcDHoUWWiMDSPF5/745s
8zDAmgDvkE/8sr/lvtSnc+QwwDSlz89fy8S/lL6vShXTMMBINwQL1PPQv2x+
gHdRvzDAMO6QTYBp2L9q/kYuKKkwwKn7xldaY+C/kz4Db5mQMMBWqX2YuAXl
v+Q+tTmldTDAIoDs6Nob6r9d/1yOS1gwwAmAE0nBpe+//n/6bIw4MMCHVHnc
tdHyv+MBaYdqKzDAQADgemLw87+xTkDOJh0wwMUSyCRV7fS/ZmaAQcENMMAZ
jDHajcj1vwOSUsJz+i/ANmwcmwyC9r8I7XVaIdcvwCKziGfRGfe/3t1qS4ux
L8DYYHY/3I/3v4BkMZWxiS/AXHXlIi3k97/ygMk3lF8vwK3w1RHEFvi/zczM
zMzMLsAvo7kMoSf4v0SuQ6Omny7AE2HQEQ8y+L9bWAPXOXMuwLtvryBZUfi/
EssLaIZHLsAkz1Y5f4X4v2UGXVaMHC7AUH/GW4HO+L9bCvehS/ItwD+A/odf
LPm/7tbZSsTILcDw0f69GZ/5vyFsBVH2ny3AZHTH/a8m+r/zyXm04XctwJ1n
WEciw/q/MBO38768LMDz1dOu6Tv+vzndEquakizAcnyDfaQC/7/dQyLoEGgs
wAxP/aD2wv+/HEflqiE9LMDgpqAMcD4AwPLmW/PMESzARrwnczCYAMBmI4bB
EuYrwLjnE4S87gDAcvxjFfO5K8A2KWU/FEIBwBhy9e5tjSvAwoAbpTeSAcBZ
hDpOg2ArwFruNrUm3wHAzczMzMzMKsD+UgqzKssCwPK8QJukoCrAFi/+WhkZ
A8AUk/e2MXcqwAqmczOkcgPAMk/xH3RQKsDat2o8y9cDwEnxLdZrLCrAhWTj
dY5IBMBdea3ZGAsqwAys3d/txATAbudvKnvsKcBujll66UwFwHk7dciS0CnA
rAtXRYHgBcCAdb2zX7cpwMUj1kC1fwbAg5VI7OGgKcC61tZshSoHwI561aWd
XSnA9CtOepZcCcAUW4vxlR8pwNy4Tf/lYgvAFDdqz8rmKMBufdX7cz0NwIsO
cj88syjArXnlb0DsDsB84aJB6oQowMzWvq2lNxDA56/81dRbKMCYDE9fSuMQ
wMx5f/z7NyjAOV6jTA55EcApPyu1XxkowLHLu3Xx+BHAAAAAAAAAKMD/VJja
82ISwAGgyZE=
                    "]], 
                    LineBox[CompressedData["
1:eJwtlGs01HkAhmdGWClFo5ZSixnD3PzZOqWmw6rU1maxq7PlKFGy6SJWMnF2
x8qtVC472aToIqmtpLQu+b10YeQSoqLRZOwsytQ0NIOV3U77nPOc9/vz4bUN
3uu3nUGj0b7+z4/7CRfUFaySpqBNlHvPWtilpWDmG/X7xN0c0tkuYXFVFDyv
eczr9C8mNwSLlG86KTSlrtXVDt0kVNvCnbwHFOp2dtsmx94h3jW/lD8vpbAm
fuDB3B13idn4560G+RSyT+XYDEbXkz0/T1zPT6PgNWs8WzjQRCK8hRtLoyiU
RKRIf1K0Eouwy7JlART2GQy9O/LhMdH5LPVr86IQbXW22W7vE7LsWMoqO1cK
Ya4ZZ5ZLn5GXdtJzPBsK67wrtsujuslfpiG71MYU5u62sWV8JieZ2T3uHX3O
eHa0ovWyXw+xroqO8yh3RlJpRkzXdy9IyNHDR+enO+P4bl+TOkMFCTf9Yv/e
IGd0MGJ8lSIFaWr8iBCbzYKYnt8qyP6xrPi0M0IcWBCqkQcpCCt1pYcsUohu
+w0pJb8pSMeBHmaqlxC/zqWeVQ0pSJJs67jMWohIo2HlZNhL4nGwWXv4jQBF
fQVFYuNeMpbO+tB8TwBWmRtHIOslt+nbrLNOCtAvrtwy56qSxHYeWfM0QgCN
K8fPrayP3GfQDVvq+Hi63vjW6uoBcsX71cYfcvm4w5o9kjHrFSkfm7St3cNH
nH5LqXjba/LayD1wmicfFrK+N/SSIbIyqsh0sSUfEun5Ys6omtS6iwSe/Txs
u96iiZ7/loTuGqsRVPIwnLVzPaf6LaFGe2Wj6TxoRuz6LwZoyALVyMrCIB42
deprdO81//fhQqafOcZWaYleVFAsOcPFkdSCxxLJMBFkxQ5fiOSietJbm2w/
QsJb/IvdvLjYGmC1YUnjCLmqWdQosuYi8hRtIvPgezI2arXpmtoJ72qn9J9w
0RGffvr3GXed0NvMnrNarSNXqobKe3Oc4IGQtPwSPZkVIz98bo8TZpyo/ur8
wVEy2/9ipbTKEXLdoYU1jAnCHR9QijMdkbgic2BzxwRpeF+Ypd/hiGN/JKb9
U/CBDK/uaZix3BHjiwLnnAybJBfUx1Jh7ohg9fT6XCYNLwcrW6aqOND7BIkH
99FQJArOU5dzUF17wc6tkQadMuFdeDoHN1f0INmejkcKm5aEIA662k38O2Po
+NTHAQ8bTqfdimOgsCIm52y+A5J866/NaGNAmdp+2SnGAfITTEuJqwESlyqM
gn0c0JT3a4XJaQMkNeZdWsd3wIYQy/xLzCkYcp+WrZrqAHG/7H6QdArKsnkP
XF+zsURQwHO2N4SyYdydesTGcZfcVmalIaJ64+gvythIGLl923yzEUK7r051
z2fDLFYnZ08zhuTvbO28QDbCbtQ/6fI0Qfyg+Y9fLmAjtF21Nn69KQL62OEJ
KhaMnvsuns6fDquOR6MmpSx4NZrkpfWY4c8qC8uGRBaYfsbVYteZWJr7qqo2
gIVOF2qw8MVMnIwI0GgXsxB2aLJNtt8cclHwjUArFh5+E31AqTPHp/9hYTI5
o0sbbIF/AcMEc4Y=
                    "]], 
                    
                    LineBox[{{-17., 
                    1.0409497792752501`*^-15}, {-16., -3.509675075268432}}], 
                    LineBox[CompressedData["
1:eJwBYQKe/SFib1JlAgAAACUAAAACAAAAAAAAAAAAMcDHoUWWiMDSPLga06Ex
8zDAMS+LrtERwL9MLGPzh+MwwGWwqK2o3NG/vDSw9ALRMMBQSimDP3vdvwg0
uqWiuzDArrLjq1Zy5b8wKoEGZ6MwwMWAwRV5DO2/NBcFF1CIMMC1B5d/A8by
vxT7RdddajDAUa8UNIB497/Q1UNHkEkwwDO3Waiynfy/aKf+ZuclMMCvDzNu
zRoBwFbYT0CvHDDA7MKJY4W6AcDiCtFr3xEwwNodx/9yRwLABz+C6XcFMMB2
IOtClsECwIzpxnLx7i/Avcr1LO8oA8BDWOm2w88vwLYc5719fQPALsprn2at
L8BcFr/1Qb8DwE8/Tizahy/AsLd91DvuA8Cmt5BdHl8vwLMAI1prCgTAzczM
zMzMLsCYS62G0BMEwE+0SokHoC7A2kKXR/caBMCKcB9vvXQuwI2fVoprMATA
egFLfu5KLsC1YetOLVQEwB5nzbaaIi7ATIlVlTyGBMB8oaYYwvstwFcWlV2Z
xgTAjrDWo2TWLcDUCKqnQxUFwFeUXViCsi3Aw2CUcztyBcDXTDs2G5AtwCQe
VMGA3QXADdpvPS9vLcD4QOmQE1cGwORRUyhZNi3ACtta5Ws6B8Dxs3OBhQEt
wM3V2IC6DQjANADRSLTQLMA6MWNj/9AIwKg2a37loyzAVO35jDqECcBSV0Ii
GXsswBwKnf1rJwrALmJWNE9WLMCRh0y1k7oKwEBXp7SHNSzAs2UItLE9C8CG
NjWjwhgswIKk0PnFsAvAAAAAAAAALMD+Q6WG0BMMwFETHDM=
                    "]], 
                    
                    LineBox[{{-17., -3.509675075507629}, {-16., \
-3.509675075268432}}], 
                    
                    LineBox[{{-16., -3.509675075268432}, {-15., \
-3.509675081307818}}], 
                    LineBox[CompressedData["
1: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
                    "]], 
                    LineBox[CompressedData["
1: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

                    "]], 
                    LineBox[CompressedData["
1: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
xA9f+anhfw23Wxk=
                    "]], 
                    LineBox[CompressedData["
1:eJwtlAtUzAkUxntIihymmmY0M///TE0zzbMXemlLLwrlzVqikEJercnmUTu1
SaXHJOFksqksoRStMcvnFFmKVqGt9dhSHpNEU82KtWP1nXPPPfece+79ne/c
c9mRWxasMzIwMFihjy/5q5ywr/dwR86ILXRVqui2HimMVw2MUQczcDmEJnt+
S4ro8FRl3M8MzLxNk9iXSVFeN/fMqfFM5DmpMw/vlaKudg4/Vs7E6T1GCp8F
UlwV/UitNmPhQJXGl86WooDT9738OAuujbICnkaCkCM5QR1+BE42lSliKiV4
nBOzXzVA4PHFBPenWyUoS1EXTfqWROX9q6nlSyRYaV3q3LeHxF1N1jWBpwSm
6nEFiiISUsOe7g22EpQmvLhtcJnEI0qDbs0HMVxD/ZqnNpOoJ5111o/EqHGl
lrl0kRgW2D9PqRKD77J+zvA7Eludi9Xn0sU4GORcJ/+on+dWmqyIEOPFVpl5
mxEbTY1fJELmh6kc7Rg2Jn7MPhCjFOGqV0e0SF+nZbvFB24X4e6GJvcHhmy4
panSVweKcCV5wqG+TySsuth3VDQR5D8V7k7QkRCWxLov6hXCUbbt7Xb9fllD
/h8iCFGx8PCbxy/1fGHFBQH5QpgzzGWXn5A4652VdmyDEEHNv2eYtJCjPAJo
fd1855wgcXpZ7qZQpQBeayxmpOSR0Bp6fmzcJoC4kxtcLSdRcetm4vwAAW7U
7Vn1ZzyJxorpmjaqACZjreVD60gsP5cZEvXKEb2nNDXmS0ksarpxpP+KI3ZX
GGqtZ5FQmXW1JR10RM2kpb40DxKZUc9NrdY4Iv+B5shkgX7e/+Kj5/J0SfU7
AqK1kcORSj44PTeGdPcJfJbu5Qm382FsaVI7o5qAvxO5khvIR4bvYFxyHoHh
tbMK59P4+DWugFW/lQDr7lDbeQ0P6UUvb5jMI3Bpo5DwvcaDQZNmbZCAAGb0
xBopeGB8Uo6kmhDwDOCph9bz8ERscqD+KWvUHwdc2Fm/ecwSFoSOYXfClA6o
SMqmWYlZGPZ3lj3Z5oA+d4XFO2MWnJg7mhMCHLBDeW/OsXYmHtRYPWLZOOCb
moCHlComXplTM5pfcREue//L0jQmYghZb5aai7KXbQ0xK5lY8n76yJJsLnzH
6aSzXZmoki+rFUZywXkY1jk4jjnKYw8X+83PXicyMMXimwmblfYIr4o6vi6c
geqW/h8WbrdHmYe9R4cdA4VkJy0pUN//27nK0CFbNAxQet7T7DHoZWxS22AL
v7nyzjO9dui/yJ7GLLTFOLHrxDOwAyk0D9gbbQu6ghPTn2+H/cfUkvaptti5
b/5AYowd+KYeQ07GtlDPLP/rn5scvA6vfn3fZwpy46V9549yYEfncneaTcFV
XorUL46DeO9dJkdb6fD5rrT4rB8H7arzGT7FdEymKPwGrThYlH+rNmoTHV6z
51JoL9novlWXbuZBh8qwlUK9wkbmshOGTmPpOOjF83+bxUaQ/xriUQsNl4aC
SkpWs0FLN+769wRt1B8S+zxztS5GNDwLWzhRpyRh1N3ydss9GzQ+8ZPv09/t
2eDKDYuP2CBnV6EwKoTErkiHiK4IGwjJpaYlbBIbp05rodvZwLt0RLRXSyAZ
T+t1nVTcZ9MvxJ0ioDK2c0tSUkG9NPa4TQSBKZ8/k5XLqBgfWd+fQCNw/MLO
jP0TqTjPXXA6r5WFIFbaDrPr1uBv0rZq17IQ3a654+1tjdBBl37mJ6aeL/VN
JazAuG7x0aKICRufxW3r5lnh0L0UXX0AEye7l2eu6LaEiizsnqll4HSHwiwv
1RIZNcF1aWcYEJDG4WZSS5hmKHIVsQxwqssjrv9NgeRkYvh6ZwYO5Se7q4oo
+PqfGUiqz2kfiKTgP+zUwGA=
                    "]], 
                    LineBox[CompressedData["
1:eJwtVGlQUwcYhOo03mggyePlPZRcBHJREFArMhxBoFYRtMoMlcilTctRxDgF
kcODSkDFqRiPKTRSxVZEQOKBU9agpWigYBGNONIRgchl5fAAxWLtzuzsj93Z
H998s47RSWFxH1lZWQVP8b1+gCsyB452HJrg4mKpU0R1rwJ+815Aa0ehjGVa
HmpSoCPznU+1K4WHYYO/tJcrsMr34kZGKIXVkdpTgfkKHA6zm/19CgUrt9Oi
ki0KVFQv3OChozD8l/fiLh8F9LHty22uU+D7hZlsWAqo45ZcYw1SOLKza0jY
K8csg/JuEEUjcPfzE0KDHJlfTOaWraahz574O6ZAjvGIN/TYdhp1m7eOMWPl
SBD9Sep1NI7yl5jdlsnRXqvZVWGgIW1Q59fbyLGEHAmiW2hkrbKyuflEhkO+
AWn9T2gUVr9SeV2RofMTNZMcoxH1JjyHLJBB1B+74KyVA/pFzG2JKhliExbv
0DEc0GR6Dyl66l/7W2Y6QGUcH88oluLbL/Nv9k/5LWWdHkdTpDDcEoW8sHYA
Jys9gwiUonp2YyvjFQ3PoOZWa1KKuEXbIhf10XC1vu8WPiRBywxhn899GtN/
1ZXMqZdg9MajtHgjjUrlfK5cJ0HTupJ5P5TR8Gpdob+UIIHq8lc//5FHQ9Ly
/McVDS44T+bvq52kcEEk8es57oL4TRdq/M0U6IctDepEF+SS7oycixSS/nms
MPm6YMEau3TNIQqnYzanzWK5YPqb8AWOCRTqPVadEVqcoXIcbswOofB7/CkD
XesMQd1QqU481f8ivmy4wBmhd4P1cQwKmd1FO0tVzuiNmWa09HDx33lMYtgb
0+uSsrhQdypDdxeLUVqSfHi2iosJao72XIoYXTWINXhz8d3ehRlBgWLctf7G
M9mei24iS7SBFEOzJ4WxdISE/z1Z7v0hJ9zybrs3/zaJAxAXm+qd0CorPPOy
hERjW3Ki+zEn7F93VjOYSmLE9uOxOUlOGK2klMOBJGoCNG9TIULAPvZgVJo9
ZFWm0P1HROidqDUfCLKHJW968Rq1CG3+j356xrFHdzNtaVghwqxNGcocCwHe
LkI6zBQhL+TYjcCrBPS6UXVzjxChM90WehcQiHWoKo28KkT08ZXr4zYT2Gqz
1nyyQIhrb83xdZ4Ezn3dOuOgSgiV+9Pwz+YS//+PAFVXTnqatBxotKbR18UC
sIu6sz+N5kDQJKJzUwUQBktedizmoL2wQ5kaIsDDOwlF5dM4yDP3JV53FMDL
vTzqQjMbfqXrdInjfPion4Y9OcLG5HPCmN7Gx8AOXnJwBBu/Gb0GLBV8BERu
vNRJsJHNrmQb8vnw42jFZ9pYCBrc49ul5uNp2dX64nwWDnIbZ4y68TF/PKPj
jg0LGx9/zhqY5GF978rdtSfscMrXdsvtZh6qkonaCFc7JC21nyzU8yAuepZT
3mSLa41RD3zSeLi8oemBYZsttMM9E23reYipqTRu59mio/p89FqPqXzFyWV9
ZibK516aV0PwwFAe8LM7zsSH/eHhnWbfg5FoJv4F1GI+KQ==
                    "]], 
                    LineBox[CompressedData["
1:eJwlk39QkwUAhgd2qCkX7Pe+j5Fx8e33loSRUsZEJOgoECFZizjvhrsFJwME
4nZwSQVXONB0kzzniFJiiIFwx9Zwr53KxAFeyJWNimKodBgb81CHSpnP3XvP
/+/d88KefTs14TQaLem/PfFTXkL9vNnbukzCIy+ftN9SYMvlqAv3Z0is2bok
03kUeHAX/pIrJAZkzWujexQYqunU3bGRGH/0sranWYGGnGF57RckVD13MrZp
FXinnv86Q0ti1xv2Hk+KArHhtqODShKu702mLLYC/hv7XtVxSXwV/lnYpdty
uCNK4oXzBHyJjQsJg3J0NJ1ULzoJnF5tCYa3yGH1xk8VmgmornW7sjVyNJ8r
jUqqIhAynsuNSZZDE1X9oLaAQGNq31lNlBySRaVZrCQQ9k/nhHRWhundY3Np
MgI6o9mlt8vQsD0m4OETwIt1FYkHZWAOSM646ARW9aoXKotkONz1kB+7nsCo
5wlSrJSWp95eSyCjO3Px+EkpNkTilH41AX3284znKqQ4X/bjtUgaAaU9U0Gl
S/HzsY8uOIM8OG56dvxJSqH7dLam7i8e/vjl24KUgAS1r0Tc2+nh4UzL5N7U
YQkiur3JW3p5iF+n1v99QoLIm5r0xEM8pL+1uWrTfglafd/wlCU8rOkdW2xy
iOFushVOWLgwuq2V3lYxOi1kxWk9F8/Olx9wFIvxu3z/RusOLgxkWgz1mhi6
zYNtQ3wupvM522Kjxcg477OtLHGQbJkLfj0rgmEotLf4Jw4+D/ywsd8uwjNJ
odHAWQ7Gso3LOQdFmBbP/NbewkGEsyjHUCQCvW3AXKXn4P97PEIULz1WjXA5
MGQ0XgmzCnF1+LqrfpmNlEvRZacqhbD47xqabrDBSimBI1MIb9kHh319bITs
JsfWOCEa3mTSjjSyEUw4VJiwLICpmnHZ9C4bD7ve6z46KQDrsdo3H8cGN26p
Q9srAG3KrzLNsZB2rCjNZhQgP3pc9KWNhU8ij7e+XyoAx3Ive0bLQu6JmqS5
RAGq9d+1ZwWY6FOuH/2QJkBWnXuCf4CJ9lBezuw4hbaLu27lkkzEuvMu5nVQ
2L397akFJwOyrnXUUC2Flkf9fYFiBkas1VVkPoVkf5OugMfAfVvbQNkmCuqY
kVWC63T0X9XPOLkUgh/X1KnMdDzti8LKhiO/BvfQ8S9TiLRO
                    "]], 
                    LineBox[CompressedData["
1:eJwlkv0vlAEAxw+57pzdOPc87m0Vo+l57oXo5aRC/CDd0skoM7rlbdPYVSpN
1syWrLqa4dhOXdHS3GE2IuuLpMmtQodTW9Y46apb1wvKKvPZPvv8A58ATaE6
253BYAT/d63rhKLMUTuj+y3GCOHh/W5eAa6bdd/bNjEYNiXr13MFvD0j6xhp
YhgP3fuualbg/NKgfdUpgulU7OvZSwqoZ07LJi6KsHUv39ChVqC+NSG/fEkI
r15hOgIUSCqMb+DkCnHMrmZxHHKc3ZI7WDAsADHwpOlWuxysftNss1CAqMSs
8FStHOwjkp+PMvwRODxZ+ypVjjRrMjOP9IeLmR/G3SPH8nUjv2SShNmLz/CR
yLFYwgpw3iahHpvysK7IQNVX0CNaEu8zuqKyJmXocQgjWCoSqa3mFlO7DPXa
ocgWBYku9Kv6K2UYoa/sbxORcKv7HFyXKUOCQBMr4pKwjK4hRfZ04oEFNoly
WafS1SiFvaIou4xJIj1lKLTgjBSlgrkXcX8IHI5jdOw6KEXIzQfFuz8ROLFy
si8lQIr5r33Zx8cJVJ9zqZ8t0+iJCNS3dBKY632orRynYcy0+my7QeDo8DVJ
o4mGocg2+kZD4INen7SxioY5V25pUxDQhb/kDuTRGI8b8+35wYfT0B4bH0Yj
SH/fkaPj48v83XjjKoUptuWbeDsfVZxm/2kLBWdNbNC0zQ8D3t3dH+9QyIlm
XTZc9UP14nTIxAUK0cxN7IIYP2xo4uTVpVAoXSh/HPOXB98oVfHOHRTEdmXD
5qc89JoNySYBBYl7dJOnjof1fyiUKWtsLg0P/wD/ZBgj
                    "]], 
                    
                    LineBox[{{-16., -6.995669776103681}, {-15., \
-3.509675081307818}}], 
                    
                    LineBox[{{-15., -3.509675081307818}, {-14., \
-3.509675075453287}}], 
                    
                    LineBox[{{-14., -3.509675075453287}, {-13., \
-4.596633353632909}}], 
                    
                    LineBox[{{-13., -4.596633353632909}, {-12., \
-4.5966333537555775`}}], 
                    
                    LineBox[{{-12., -4.5966333537555775`}, {-11., \
-4.596633353510923}}], 
                    
                    LineBox[{{-11., -4.596633353510923}, {-10., \
-4.59663335335972}}], 
                    
                    LineBox[{{-10., -4.59663335335972}, {-9., \
-4.59663335271557}}], 
                    
                    LineBox[{{-9., -4.59663335271557}, {-8., \
-4.596633352782532}}], 
                    
                    LineBox[{{-8., -4.596633352782532}, {-7., \
-4.596633353315269}}], 
                    
                    LineBox[{{-7., -4.596633353315269}, {-6., \
-4.59663335191226}}], 
                    
                    LineBox[{{-6., -4.59663335191226}, {-5., \
-4.5966333517102385`}}], 
                    
                    LineBox[{{-5., -4.5966333517102385`}, {-4., \
-4.596633351789706}}], 
                    
                    LineBox[{{-4., -4.596633351789706}, \
{-3.0000000000000004`, -4.596633353828679}}], 
                    
                    LineBox[{{-3.0000000000000004`, -4.596633353828679}, \
{-2.0000000000000004`, -4.596633355211679}}], 
                    
                    LineBox[{{-2.0000000000000004`, -4.596633355211679}, \
{-1.0000000000000002`, -4.070744762183153}}], 
                    
                    LineBox[{{-1.0000000000000002`, -4.070744762183153}, \
{-2.4926122716790574`*^-16, -4.070744762350273}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.266849002507401`, 
                    2.079283430529795}, {-0.25, 0}, 
                    Offset[8], {0.08867008588000758, -0.024858466579425365`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.823778921606099`, 
                    3.2100458292197636`}, {-0.25, 0}, 
                    Offset[8], {0.08841272201852668, -0.015816350815419433`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.555201387965674`, 
                    0.3162795939006472}, {-0.25, 0}, 
                    Offset[8], {0.3104027759313457, -0.11886543253336973`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.9571397952037, 
                    1.1664366122916179`}, {-0.25, 0}, 
                    Offset[8], {
                    0.17655913189458872`, -0.058037594443174134`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.80784941629153, -1.4829146309918486`}, \
{-0.25, 0}, 
                    Offset[8], {0.07783288432682056, -0.02058495370263902}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.138256961847825`, -0.5311702306286505}, \
{-0.25, 0}, 
                    Offset[8], {0.17186942356039125`, -0.02579419988531384}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.523701904685602`, -1.6716515535227614`}, \
{-0.25, 0}, 
                    Offset[8], {1., -3.509675075268433}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.902679714531525`, -2.431687484333514}, \
{-0.25, 0}, 
                    Offset[8], {0.12801228034339474`, -0.07340008606247705}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.4, -3.509675075364111}, {-0.25, 0}, 
                    Offset[8], {1., 2.3919710656628013`*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.4, -3.5096750788920636`}, {-0.25, 0}, 
                    Offset[8], {1., -6.039385880285408*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.822222222222223`, -3.596633353315102}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.08888888888888857, -2.3661961279231036`*^-11}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.266812112029669`, -10.290659201810383`}, \
{-0.25, 0}, 
                    Offset[8], {0.08871435445328046, 0.015537846904745578`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.957072050604559`, -9.269959482794954}, \
{-0.25, 0}, 
                    Offset[8], {0.17661124312469845`, 0.04445264938979321}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.55215579795401, -8.3635932802029}, {-0.25, 
                    0}, 
                    Offset[8], {0.30431159590801826`, 0.09711681557351781}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.137302513114497`, -7.490277577945916}, \
{-0.25, 0}, 
                    Offset[8], {0.1730147620403848, 0.023277010050677838`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.54419607165569, -6.510754357531432}, {-0.25,
                     0}, 
                    Offset[8], {0.2883921433113805, 0.0021585604546485726`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.72788029439669, -5.519917502366761}, {-0.25,
                     0}, 
                    Offset[8], {0.08234524216491579, 0.012290912102685958`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.521994291196185`, -5.329344411131446}, \
{-0.25, 0}, 
                    Offset[8], {1., 3.4859946947958633`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.4, -3.5096750777950994`}, {-0.25, 0}, 
                    Offset[8], {1., 5.854531082150061*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.4, -4.16185004236106}, {-0.25, 0}, 
                    Offset[8], {1., -1.0869582781796225`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, -4.59663335370651}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.226680979016237*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.4, -4.596633353608785}, {-0.25, 0}, 
                    Offset[8], {1., 2.446540747769177*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.4, -4.596633353420201}, {-0.25, 0}, 
                    Offset[8], {1., 1.5120349416974932`*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, -4.59663335297323}, {-0.25, 
                    0}, 
                    Offset[8], {1., 6.441496225306764*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -4.596633352755747}, {-0.25, 0}, 
                    Offset[8], {1., -6.696154741803184*^-11}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -4.596633353102174}, {-0.25, 0}, 
                    Offset[8], {1., -5.327374097419124*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -4.5966333524734635`}, {-0.25, 0}, 
                    Offset[8], {1., 1.4030092643224634`*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -4.596633351791047}, {-0.25, 0}, 
                    Offset[8], {1., 2.0202151063131168`*^-10}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.4, -4.5966333517579185`}, {-0.25, 0}, 
                    Offset[8], {1., -7.94670995674096*^-11}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.4000000000000004`, -4.59663335301309}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.0389734345371835`*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -4.596633354658479}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.383000380883459*^-9}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4000000000000004`, -4.281100199394563}, \
{-0.25, 0}, 
                    Offset[8], {1.0000000000000002`, 0.525888593028526}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.4000000000000003, -4.070744762283425}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.6711965145077556`*^-10}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-17., 1.0409497792752501`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., -4.596633351789706}], 
                    Offset[{12, 12}, {-4., -4.596633351789706}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-4., -4.596633351789706}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-2.0000000000000004`, \
-4.596633355211679}], 
                    
                    Offset[{12, 
                    12}, {-2.0000000000000004`, -4.596633355211679}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-2.0000000000000004`, -4.596633355211679}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-8., -4.596633352782532}], 
                    Offset[{12, 12}, {-8., -4.596633352782532}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-8., -4.596633352782532}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -4.59663335191226}], 
                    Offset[{12, 12}, {-6., -4.59663335191226}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-6., -4.59663335191226}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., -4.5966333537555775`}], 
                    Offset[{12, 12}, {-12., -4.5966333537555775`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-12., -4.5966333537555775`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., -4.59663335335972}], 
                    Offset[{12, 12}, {-10., -4.59663335335972}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-10., -4.59663335335972}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-16., -3.509675075268432}], 
                    Offset[{12, 12}, {-16., -3.509675075268432}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-16., -3.509675075268432}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_BBcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_BBcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -3.509675075453287}], 
                    Offset[{12, 12}, {-14., -3.509675075453287}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-14., -3.509675075453287}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_Bcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_Bcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-17., -3.509675075507629}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., -3.509675081307818}], 
                    Offset[{12, 12}, {-15., -3.509675081307818}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-15., -3.509675081307818}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-16., -6.995669776103681}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-1.0000000000000002`, \
-4.070744762183153}], 
                    
                    Offset[{12, 
                    12}, {-1.0000000000000002`, -4.070744762183153}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-1.0000000000000002`, -4.070744762183153}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-3.0000000000000004`, \
-4.596633353828679}], 
                    
                    Offset[{12, 
                    12}, {-3.0000000000000004`, -4.596633353828679}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-3.0000000000000004`, -4.596633353828679}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_1net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., -4.5966333517102385`}], 
                    Offset[{12, 12}, {-5., -4.5966333517102385`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-5., -4.5966333517102385`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -4.596633353315269}], 
                    Offset[{12, 12}, {-7., -4.596633353315269}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 
                    1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-7., -4.596633353315269}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_2net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., -4.59663335271557}], 
                    Offset[{12, 12}, {-9., -4.59663335271557}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-9., -4.59663335271557}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., -4.596633353510923}], 
                    Offset[{12, 12}, {-11., -4.596633353510923}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-11., -4.596633353510923}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_3net_WWcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3net_WWcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., -4.596633353632909}], 
                    Offset[{12, 12}, {-13., -4.596633353632909}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-13., -4.596633353632909}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"coupling_4net_Wcore_net\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4net_Wcore_net", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[12], 
                    Skeleton[20]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.4926122716790574`*^-16, -4.070744762350273}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"X_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["X_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"checker_b\"", TraditionalForm], 
                    Offset[{0, -7}, {-17., 1.0409497792752501`*^-15}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-4., -4.596633351789706}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -15}, {-2.0000000000000004`, -4.596633355211679}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-8., -4.596633352782532}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-6., -4.59663335191226}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-12., -4.5966333537555775`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-10., -4.59663335335972}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_BBcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_BBcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-16., -3.509675075268432}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_Bcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_Bcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-14., -3.509675075453287}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-17., -3.509675075507629}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-15., -3.509675081307818}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"checker_w\"", TraditionalForm], 
                    Offset[{0, -7}, {-16., -6.995669776103681}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -15}, {-1.0000000000000002`, -4.070744762183153}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_1net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_1net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -15}, {-3.0000000000000004`, -4.596633353828679}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-5., -4.5966333517102385`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_2net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_2net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-7., -4.596633353315269}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-9., -4.59663335271557}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_3net_WWcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_3net_WWcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-11., -4.596633353510923}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"coupling_..\"", "\"coupling_4net_Wcore_net\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "coupling_4net_Wcore_net", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-13., -4.596633353632909}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"X_out\"", TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-2.4926122716790574`*^-16, -4.070744762350273}], \
{0, 1.}, Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4846726653225846`, 
                    5.295823550387978}, {-13.266849002507401`, 
                    2.079283430529795}], {0., -0.17}, Automatic, {
                    0.9628770091614506, -0.2699404846041063}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0.9685317354845713, 
                    5.41405081961365}, {-12.823778921606099`, 
                    3.2100458292197636`}], {0., -0.17}, Automatic, {
                    0.984372876293391, -0.17609667917901295`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.9668835321657727`, 
                    5.136279701388457}, {-14.555201387965674`, 
                    0.3162795939006472}], {0., -0.17}, Automatic, {
                    0.9338690366160831, -0.35761518766650413`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.7175190497621067`, 
                    5.224952469994753}, {-13.9571397952037, 
                    1.1664366122916179`}], {0., -0.17}, Automatic, {
                    0.9499913581808642, -0.3122761908658376}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4062682811250309`, 
                    5.317180598917217}, {-15.80784941629153, \
-1.4829146309918486`}], {0., -0.17}, Automatic, {
                    0.9667601088940394, -0.2556851420227329}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0.8162991794478593, 
                    5.439085920412801}, {-15.138256961847825`, \
-0.5311702306286505}], {0., -0.17}, Automatic, {
                    0.9889247128023273, -0.14841803262688352`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{5.2894807955802055`, 
                    1.5071141009187714`}, {-16.523701904685602`, \
-1.6716515535227614`}], {0., -0.17}, Automatic, {
                    0.2740207456215948, -0.9617237810145828}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{2.735791547565353, 
                    4.771314767259646}, {-15.902679714531525`, \
-2.431687484333514}], {0., -0.17}, Automatic, {
                    0.8675117758653902, -0.4974166450118824}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3155840861145407`*^-9, 
                    5.5}, {-16.4, -3.509675075364111}], {0., -0.17}, 
                    Automatic, {1., 2.3919710656628013`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3216622341569746`*^-8, 
                    5.5}, {-15.4, -3.5096750788920636`}], {0., -0.17}, 
                    Automatic, {1., -6.039385880285408*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4640838541524257`*^-9, 
                    5.5}, {-11.822222222222223`, -3.596633353315102}], {
                    0., -0.17}, Automatic, {1., -2.6619706439135014`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.9488523145076093, 
                    5.41753442861728}, {-12.266812112029669`, \
-10.290659201810383`}], {0., -0.17}, Automatic, {0.9850062597485963, 
                    0.17251860263774715`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3424666865668047`, 
                    5.333646332056367}, {-12.957072050604559`, \
-9.269959482794954}], {0., -0.17}, Automatic, {0.9697538785557032, 
                    0.2440848521030554}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.672159910889413, 
                    5.239645143749175}, {-13.55215579795401, \
-8.3635932802029}], {0., -0.17}, Automatic, {0.9526627534089409, 
                    0.304029074707166}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.7333502100583538, 
                    5.450889603487432}, {-14.137302513114497`, \
-7.490277577945916}], {0., -0.17}, Automatic, {0.9910708369977148, 
                    0.13333640182879158`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.04116530300390593, 
                    5.499845944917785}, {-14.54419607165569, \
-6.510754357531432}], {0., -0.17}, Automatic, {0.9999719899850518, 
                    0.007484600546164714}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-0.8119394076200448, 
                    5.439738449443467}, {-14.72788029439669, \
-5.519917502366761}], {0., -0.17}, Automatic, {0.9890433544442667, 
                    0.14762534684000814`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-5.286775708708193, 
                    1.5165759479211662`}, {-15.521994291196185`, \
-5.329344411131446}], {0., -0.17}, Automatic, {0.27574108144021203`, 
                    0.9612319470378532}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.2199920951825334`*^-8, 
                    5.5}, {-14.4, -3.5096750777950994`}], {0., -0.17}, 
                    Automatic, {1., 5.854531082150061*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{4.047623562957408, 
                    3.7238076605259804`}, {-13.4, -4.16185004236106}], {
                    0., -0.17}, Automatic, {
                    0.677055938277451, -0.7359315569013469}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{6.746745384589303*^-10, 
                    5.5}, {-12.399999999999999`, -4.59663335370651}], {
                    0., -0.17}, Automatic, {1., -1.226680979016237*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3455974112730473`*^-9, 
                    5.5}, {-11.4, -4.596633353608785}], {0., -0.17}, 
                    Automatic, {1., 2.446540747769177*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-8.316192179336213*^-10, 
                    5.5}, {-10.4, -4.596633353420201}], {0., -0.17}, 
                    Automatic, {1., 1.5120349416974932`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.5428229239187203`*^-9, 
                    5.5}, {-9.399999999999999, -4.59663335297323}], {
                    0., -0.17}, Automatic, {1., 6.441496225306764*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.6828851079917513`*^-10, 
                    5.5}, {-8.4, -4.596633352755747}], {0., -0.17}, 
                    Automatic, {1., -6.696154741803184*^-11}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{2.9300557535805183`*^-9, 
                    5.5}, {-7.4, -4.596633353102174}], {0., -0.17}, 
                    Automatic, {1., -5.327374097419124*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-7.716550953773549*^-9, 
                    5.5}, {-6.4, -4.5966333524734635`}], {0., -0.17}, 
                    Automatic, {1., 1.4030092643224634`*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{-1.1111183084722143`*^-9, 
                    5.5}, {-5.4, -4.596633351791047}], {0., -0.17}, 
                    Automatic, {1., 2.0202151063131168`*^-10}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{4.3706904762075283`*^-10, 
                    5.5}, {-4.4, -4.5966333517579185`}], {0., -0.17}, 
                    Automatic, {1., -7.94670995674096*^-11}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.1214353889954514`*^-8, 
                    5.5}, {-3.4000000000000004`, -4.59663335301309}], {
                    0., -0.17}, Automatic, {1., -2.0389734345371843`*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{7.606502094859025*^-9, 
                    5.5}, {-2.4000000000000004`, -4.596633354658479}], {
                    0., -0.17}, Automatic, {1., -1.383000380883459*^-9}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-2.559976780619099, 
                    4.867907033078084}, {-1.4000000000000004`, \
-4.281100199394563}], {0., -0.17}, Automatic, {0.8850740060141971, 
                    0.4654503237489271}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{9.191580829792656*^-10, 
                    5.5}, {-0.4000000000000003, -4.070744762283425}], {
                    0., -0.17}, Automatic, {1., -1.6711965145077556`*^-10}]}, 
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin", StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    Part[CompressedData["
1:eJxTTMoPSmViYGAQAWIQDQGGB44vdJ3WceCSDYQvcIChv+zW5yShA4wQgQMM
kRvBfAhX4UD93HYkvsQBhlUVSHyNA/9DZiDxVQ78b5+IxDc48O/lvLYLwjxQ
vs6Bf85LkfiGB/4pLkfi6x34l5PXjuAbHKh/M/32hN/SUPd92N9waH5AoYcA
lM9xoGHaTCT7RA40GJYi8WUONByZgMRXOvC/rA2Jr3bgv8IUJL7WgXrLaWD+
GeWou3zfNu5pWLgIbB8AQrVwfA==
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 24, 24, 24, 24, 24, 8, 24, 8, 24, 24,
                     24, 24, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {998.5000000000001, 788.5387767066582}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35.50000000000007, 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, True}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, 500}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_Bcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_BBcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_Bcore_net"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_WWcore_net"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_1net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_2net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_Wcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_3net_WWcore_net"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "coupling_4net_Wcore_net"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "X_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_4net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_4net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_4net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_4net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "thread_3", "Inputs", "1"]
                     -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_3net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_2net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_BBcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_WWcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_Bcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], 
                    "coupling_1net_Wcore_net" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "X_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "trainedNet" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"]}], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "subtract" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "trainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "subtract", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "X_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"X_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}]}}, BaselinePosition -> 
                  Automatic, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
           Baseline, 
           BaseStyle -> {
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
         StyleBox["]", "NonInterpretableSummary"]}]},
      "CopyTag",
      DisplayFunction->(#& ),
      InterpretationFunction->("NetGraph[<>]"& )],
     False,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Processor\"\>", "\[Rule]", 
    TagBox[
     TooltipBox[
      FrameBox[
       StyleBox["\<\"Center\"\>",
        StripOnInput->False,
        FontFamily->"Helvetica Neue",
        FontWeight->"Light",
        FontColor->GrayLevel[0.]],
       Background->Opacity[1., 
         RGBColor[{0.98, 0.98, 0.9702}]],
       FrameMargins->{{3, 3}, {0.5, 0.5}},
       FrameStyle->{
         Thickness[0.5], 
         Opacity[1.], 
         GrayLevel[0.83]},
       RoundingRadius->2,
       StripOnInput->False],
      TagBox[
       GridBox[{{
          RowBox[{
            PanelBox[
             TagBox[
              
              GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]], "\[Rule]", 
            PanelBox[
             TagBox[
              
              GridBox[{{"\"f1\"", "\"NumericalVector\""}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]]}]}, {
          TagBox[
           GridBox[{{
              RowBox[{"\"Invertibility\"", "\[Rule]", 
                TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Missing\"", "\[Rule]", 
                TagBox["\"Allowed\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Mean\"", "\[Rule]", 
                TagBox[
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"-", "0.00011694978920109752`"}], ",", 
                    "0.00007700457070020814`"}], "}"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"Version\"", "\[Rule]", 
                TagBox[
                 RowBox[{"{", 
                   RowBox[{"12.`", ",", "0"}], "}"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"ID\"", "\[Rule]", 
                TagBox["5267004855378899174", Short[#, 5]& ]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
     Annotation[#, 
      Column[{Panel[
          Grid[{{"f1", "NumericalVector"}}]] -> Panel[
          Grid[{{"f1", "NumericalVector"}}]], 
        Column[{
         "Invertibility" -> Short["Perfect", 5], "Missing" -> 
          Short["Allowed", 5], "Mean" -> 
          Short[{-0.00011694978920109752`, 0.00007700457070020814}, 5], 
          "Version" -> Short[{12., 0}, 5], "ID" -> 
          Short[5267004855378899174, 5]}]}], "Tooltip"]& ]}], ",", 
   RowBox[{"\<\"PostProcessor\"\>", "\[Rule]", 
    TagBox[
     TooltipBox[
      FrameBox[
       StyleBox["\<\"FirstValues\"\>",
        StripOnInput->False,
        FontFamily->"Helvetica Neue",
        FontWeight->"Light",
        FontColor->GrayLevel[0.]],
       Background->Opacity[1., 
         RGBColor[{0.98, 0.98, 0.9702}]],
       FrameMargins->{{3, 3}, {0.5, 0.5}},
       FrameStyle->{
         Thickness[0.5], 
         Opacity[1.], 
         GrayLevel[0.83]},
       RoundingRadius->2,
       StripOnInput->False],
      TagBox[
       GridBox[{{""}, {
          TagBox[
           GridBox[{{
              RowBox[{"\"Info\"", "\[Rule]", 
                TagBox[
                 RowBox[{"\[LeftAssociation]", 
                   RowBox[{
                    RowBox[{"\"Type\"", "\[Rule]", "\"NumericalVector\""}], 
                    ",", 
                    RowBox[{"\"Weight\"", "\[Rule]", "1"}]}], 
                   "\[RightAssociation]"}], Short[#, 5]& ]}]}, {
              RowBox[{"\"Key\"", "\[Rule]", 
                TagBox["\"f1\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Invertibility\"", "\[Rule]", 
                TagBox["\"Perfect\"", Short[#, 5]& ]}]}, {
              RowBox[{"\"Missing\"", "\[Rule]", 
                TagBox["\"Allowed\"", Short[#, 5]& ]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
     Annotation[#, 
      Column[{Null, 
        Column[{"Info" -> Short[
            Association["Type" -> "NumericalVector", "Weight" -> 1], 5], 
          "Key" -> Short["f1", 5], "Invertibility" -> Short["Perfect", 5], 
          "Missing" -> Short["Allowed", 5]}]}], "Tooltip"]& ]}], ",", 
   RowBox[{"\<\"ProbabilityNet\"\>", "\[Rule]", 
    TagBox[
     TemplateBox[{RowBox[{
         StyleBox[
          TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
         StyleBox["[", "NonInterpretableSummary"], 
         DynamicModuleBox[{Typeset`open = False}, 
          PanelBox[
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["3", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["2", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["14", "SummaryItem"]}}, 
                  BaselinePosition -> {2, 1}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 3}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, 
                  ImageSize -> {Automatic, 24}], 
                 GraphicsBox[{
                   Thickness[0.0149], {
                    RGBColor[0.729, 0.729, 0.729], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[
                    0.8270000000000001, 0.41200000000000003`, 0.133]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.647, 0.259, 0.08600000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 GridBox[{{
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-13., 7.960204194457795*^-16}, {-12., 
                    5.000000000000001}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFaB7pFGYX/rT1jc8W47OOv55oHcrTPdPKxrrDX
DWKbl3dW84DEq2t/NnjstOeI3sAavUHzwHq7l5PtXh62T/Ir0TgwQfPA0fQ3
j76eP23voAPSoHlAo2KXqb3OJfv5XzyBSPOASs5BsZyD1+wbl0d/PqykeeA2
f/eUxuW37Z+5tDPx/NQ4sHRj93X7/Af2Z8BA44CVMQg8tl/Udvng+gUaB+au
Z7ppJPnM/uZOp8C4co0Dh08eOHJN6qV9bppU9Y0AjQMrG3O/yVm8sY/ribKX
09U4EHidI4+78L39Bm3mefo8GgfiUk+Knkv6aB/nIjKd5536gU9rW6e/kPps
n3OtV2vrJfUDma6WNlcffLG//jA/QnOX+oED2k+Yp2z5Zr8wbZdC5hL1Az8S
2t6pTPth/+RZu1d6gvqBtign5sBv/+zZvi0O3qGofmBneYBITDaTA/MUPpuY
F2oH7vMH6q+VZnW4c+A4c/AWtQMbvi66JN3D7jCp5vyqOa1qBww03f4t38Pp
oHxc1dAyRu1AwiqrTYFruR0mLDg1TcNC7YBNZcM7iTheh1sc+25nSaodODlV
fPPfc3wOkPhSO8AIpgUcAOALz3c=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFaB7pFGYX/rT1jc8W47OOv55oHDqjud62ffMZG
N4htXt5ZzQN/p16pNSs7Y8MRvYE1eoPmAfs0x93KYWdskvxKNA5M0DzQOo31
n5vxGRsHHZAGzQOX1BTdFvCesZn/xROINA+oiE+ZrP/0tE3j8ujPh5U0D9Sk
xz37svO0zTOXdiaenxoHbok32H3oPm1zBgw0Dthp/JytGH3a5uoWr072BRoH
sneuXMU8O8d+eZF8/l6glQFbQPweexs277p3XhoHnpX85zcSX2A/Lf/stllK
Gge4N4Pk19hvW7dM4tBv9QNHJofclYrcZj/r8LXFKdfUD0wFqz9g77IuNqJp
k/qBe29Wnlv37Kj9ljxrM+kJ6gd2bwLpP2N/FuwetQNWxiDw2L5TTei2+QK1
A1xqgmYSYs/s8yxtt9WVqh0oX/zLIofvpX0tq1/cQh+1Aw2r31vry7yx39zl
cnm+qtoBZbsPdon27+1FTiqIVjGoHdik+0+B0eaj/ZwDj5QN7qoemM/YpcT5
+JO9X2HX/4O7VQ/cniW95MSUL/aat8VX6M9RPZDyc9NS+8Bv9jr/umQr61QP
2MgGqOdJ/LA3e6A/K9dJ9UDPH8ZYtZu/7V9OWKBxlEv1QPHHb6Vrg//bOwrc
PVF/XeXAj1rxnYwujA4OcU+r5q5QOfCf96qGyG4mh2dVO+3k6lQOXNQw4eLj
Z3EwSosUYYpQOZB3ziT2vT2rg5rC0d8eZioHrvy7prjDl83hwIo/Xz5JqBxg
2yUVkWHB7gBJPyoHGME0hwMANC0OLw==
                    "]], 
                    LineBox[CompressedData["
1:eJxFkn0s1HEYwI9sqVbTdMJEfnfuxR/kCK1zP1m20x3RuUYpKS83aWZJFilD
ee+uMzrV5CXvpSzVcu37kPeXtGWJKMOO03G5bM5x6m7Mffb57nk+/z1/fO0v
x5+JMiYQCE66p5+bOEIe0ch848UAU9XTF+Y1SwfKXo+jle21qKI6hJPcR4eZ
l428sU8fkJmkrv9VHR0uSiXEQXEn8nz2cUKWSYfdqhIhu+szspUWpVuH0YGV
KhhsSh1GbQqndxxnOnyLwaxzLMaQPSM/7dYGDeYmmAdDLCcRK79xpLqXBkSm
R9bDqGlkufag/YuQBokBhJG/Khniijp6Z+JpECjmE/HROdQaVFFz258GPZl8
bvC9eSRg0sMe02kwjhFSXTW/0amg0FkvExpkX+NXjbstoFghwy9qggpDkfzO
0+6LqGP1Tfr+Fio0mxJ+5W8sotCCSaFPHhWcQ/lL4gIlonFaktThVGCf5a9H
TivR4IAeCqz+06NEy35lOimg3mqb7gSdFFjbat+Tegwd12ahkwKarS5iycUs
ucN2S1v1GHrGs3Das9DQe95e0mnozXvI261t5+SalJPBqp7hUDaqRCcaSNdf
J5MhpbavKDVaiUqygu9/5ZHh0Fp3wKPqRbQR9LMrlkEGbbkjTyVZQMlmbS43
D5DB7qmqPNdbgUza1rvVqyS4q7A7HlE6jyqviHKUUySwFzbbJtXMoWB1WtL5
IRKYZNdze2NkyOJOZyETkYAyvLPz3I9pFKEtFkhukIC7i5Wwz7UHsTJqmlUu
JNCILhhrcvrwerOVOPYyBv6TjaKrjCm86nlWSakUA5ulP8U7KhX4ER8eQ56L
QWK/C5ukUeFcWbiXWzgG3wXGuLX5Cq4WNbxPOYaBNHC+KfqJBnfzda9CVhgc
zpCXmhZr8c3/jIHR5uL9Hx7xncg=
                    "]], 
                    
                    LineBox[{{-13., 3.000000000000001}, {-12., 
                    5.000000000000001}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQFaByBsDodPJ07F2D7XPGBx50oPVzKHw6JlEd4V
pzQPVKXOvSR3jcNBYObK0xtWah44PTvyok0kp4PFgr13n7VoHlCt5+xMecPp
ILdnSqNUjOaBbv61P6f2czkcfKO33Vtf88A/Hxfli07cDopGPXVV/zQO1Jmf
ZxVj43Gw61lzfdlJjQOc530XptzkcZD43X/owgSNAwuED3zds4fXwWfikZNP
8jUO3EgJPepvxuewO3DR8lpfjQNmiaLCUxfyOWTYaMbM1tQ4sIuD4X7PPz4H
r8DI57YsGgfSokU1zX35HbImGHmm3lU/YBYZ+nFyL7/DkZ9bGgW3qh8wYDpg
vng/v0Nk74MJTt3qBwLCQv+kPOZ30PDeWvYjXv3AtFBR+5s/+B2MwUD9ACM4
fAQcJHdX/P3MhuDXRyzhsbmrBucncm9L4N6G4B+4vPZn4kQEf/7G7uv2+Qj+
ryX+QITgXwEpN0Lwtc908rFKIPiQ+ELwATG9oyU=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFaByBsDocrxmUffz3XhPN1g9jm5Z3VPMAM5XNE
b2CN3qB5gAXKT/Ir0TgwAaHeQQekAcGf/8UTiBD8xuXRnw8rIfjPXNqZeH5q
wM0/AwYacPnPIO3zEXyZ44VAhFDvAgYacPdkHxTLOSiGUD/F7uVku5fqcP6e
3SCA4D+x6Hts0Yfgc29LACJ1uPlnwe5Rg8uDvTNfDc09anD1rmD3qMHdkwN2
jxqae1TR3KOK5h5VNPeows03BgOEvOTuir+f2VQPMEL5dRFLeGzuqsDlE8EG
IPgHLq/9mThRBa5+3sbu6/b5CP6vJf5AhOBfASk3QvC1z3TysUogzIOkH4Q8
ADX4mEw=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQDQFaByBsDodPJ07F2D7XPHBKWbv46xx2h0XLIrwr
Tmke6JyVpPtQk91BYObK0xtWah6wTlmmd3gZm4PFgr13n7VoHnjQ8K1stjCb
g9yeKY1SMZoHKj4EsWUVsDocfKO33Vtf8wDr5t139PayOCga9dRV/dM40HbC
4NfLn8wOdj1rri87qXHgt8GmuNlqzA4Sv/sPXZigcSD5jT2XszOTg8/EIyef
5Gsc0Jm9ymrDSUaH3YGLltf6ahw4P+/Vm6w4RocMG82Y2ZoaB7y+/1coZmR0
8AqMfG7LonFg/pJX105sYnDImmDkmXpX/cCZZav4cooYHI783NIouFX9wJW/
9idiHBgcInsfTHDqVj+wZeUq5tkyDA4a3lvLfsSrH8hf9eqAGjuDw9kzIKAG
DR8Ghy+e84EIwZc5XghECL6rCwgg+DkHxYAIwZ9i93Ky3UtVOH/PbhBA8J9Y
9D226EPwubclABGCD3GPygFGFPcg+LJg9yD4EPcg+BD3IPgQ9yjD+RD3IPgQ
9yD4PGD3IPjGYIDgS+6u+PuZDcGvj1jCY3NXCc5PBHsIwT9wee3PxIkI/ryN
3dft8xH8X0v8gQjBvwJSboTga5/p5GOVQPAhFIIPAO7v9j0=
                    "]], 
                    
                    LineBox[{{-13., 5.000000000000001}, {-12., 
                    5.000000000000001}}], 
                    
                    LineBox[{{-12., 5.000000000000001}, {-11., 
                    4.000000000000001}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQDQEaBxjBtIjDFeOyj7+eqx9ggPJ1g9jm5Z1VP8AE
5bNFb2CN3qAOV5/oV6JxYAKC76AD0oDgL/jiOf+LJ0J/0/Loz4eVEPLPXdqZ
eH6qwflnz4AAgg/WPl8N7h6Z44VApAY3z9UFBBDqcw6KARGCP8Xu5WS7l6pw
/p7dIKAK1//Eou+xRR9CnntbAhCporlHBc09KnD3yILdo4LmHhU096iguUcZ
zT3KaO5ByPOA3YPgg51zRgnOX9x2+eD6BUoHjs6xUKz6LexwY6dTYFy50gGJ
4kctL94KO+SmSVXfCFA68Lnpr5b3dWGH+J4oezldpQNRZzqFF20XdlivzTxP
n0fpgI9/u93bPmGHOBeR6TzvFA+c4v62WidW2CH7Wq/W1kuKBy4xXotOUBJ2
uPYwP0Jzl+KBVEN1v457Qg4L0nYpZC5RPNA862XTkolCDk+ftXulJygemDpb
Xmtuo6AD27fFwTsUFQ9I3uj3e9gm4MAyhc8m5oXCAZkFJQ8eOvE73DlwnDl4
i8KBx2x2cjMW8TpMqjm/ak6rwoGeJ9VhT3V4HJSOqxpaxigckLDU6zz5kMth
woJT0zQsFA60sIRucznI6XCLY9/tLEmFA5fdPtwNO83hAIkXBWj4cDgAAKUC
87U=
                    "]], 
                    
                    LineBox[{{-11., 4.000000000000001}, {-10., 
                    3.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQFqBxjBtIDDFeOyj7+eq8L5OkFs8/LOIvjs0RtY
ozcg+El+JRoHJiD49mANCP6CL57zv3gi+E3Loz8fVkLwn7u0M/H8VIHzz54B
AQQfrH0+gi97vFDmeCGC7+oCAgh+zkExIELwp9i9nGz3UhnO37MbBBD8JxZ9
jy36EHyebQnc2xIQfLBzzijB+de2eHWyL1A6MDVU1P7mD36HZUXy+XtLlA4E
hIX+SXnM72DD5l33zkvpgAHTAfPF+/kdpuWf3TZLSemAeWTox8m9/A5b1y2T
OPRb8UBqtKimuS+/w6zD1xanXFM8sIuD4X7PPz4Hl3WxEU2bFA+YJYoKT13I
57Alz9pMeoLigZspoUf9zfgcXrAU2OrnKx5YKHzg6549vA6HioM1Is0UD3Cc
912YcpPH4f7Z4sZWRsUDtebnWcXYeBwchC96bLmgcOCfj4vyRSduh0fO2XVP
Fysc6OJf+3NqP5fDiXgnJclqhQPK9ZydKW84HT6lhZn4hykcODk78qJNJKdD
XOTyLe2mCgeqUudekrvG4cBnbrr4kITCAYs7V3q4kjkcIOlHARo+HA4AGn/G
Lg==
                    "]], 
                    
                    LineBox[{{-10., 3.0000000000000004`}, {-9., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEqBxjBNIfDVeOyj7+eK8P5OkFs8/LOKh9ggvLZ
ojewRm9AyCf6lWgcmIDg24M1IPjzv3gCEYLfuDz682ElBP+ZSzsTz08luPln
wEAJLv8ZpH0+gi9zvBCIEOpdXUAAIZ9zUAyIEPwpdi8n271UhPP37AYBBP+J
Rd9jiz4En2dbAve2BEW4+cZggJCX3F3x9zMbgl8XsYTH5q4CXH0iN8gABbj8
wctrfyZORPDnbey+bp+P4P9a4g9ECP4VkHIjBF/7TCcfqwTCfEh8IeQBi5xw
Mg==
                    "]], 
                    
                    LineBox[{{-9., 2.0000000000000004`}, {-8., 
                    1.0000000000000004`}}], 
                    
                    LineBox[{{-9., 2.0000000000000004`}, {-8., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-9., 2.0000000000000004`}, {-8., 
                    3.0000000000000004`}}], 
                    
                    LineBox[{{-8., 2.0000000000000004`}, {-7., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-7., 2.0000000000000004`}, {-6., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-6., 2.0000000000000004`}, {-5., 
                    2.0000000000000004`}}], 
                    
                    LineBox[{{-5., 2.0000000000000004`}, {-4., 
                    2.0000000000000004`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEKBxjBNIfDivQ3j76el4fzI5bw2NydJX+ACcrn
2ZbAvS0BIX9ozouABkUEvw6sQQ7Ot3852e7lZASf2X/7s3ZXBP9sJx+rxCdZ
uPmzZoKALFz+BUi7HYJv2ffYou+xDFx9VwcIyMDlbzTpAhGCr1F7Sb32kjSc
X1EOAgj+iUKZ44UyCL5EzkGxnINSaO6RhMuDvWOH4FuA3SMBV98Jdo8EXP4m
2D0SaO4RR3MPgn8c7B4EXxzsHjG4+WlgIAaXNyr7+Os5L4L/d4OHZMUuUbh6
sO4cUbh84/Loz4eVEHzbZPH19fdE4PwvnvOBCMEHK09F8MNmCMtyGYjAzYek
H4Q8AJSllRg=
                    "]], 
                    
                    LineBox[{{-5., 3.0000000000000004`}, {-4., 
                    2.0000000000000004`}}], 
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 2.}}], 
                    LineBox[{{-3., 2.}, {-1.9999999999999998`, 2.}}], 
                    
                    LineBox[{{-1.9999999999999998`, 2.}, {-0.9999999999999999,
                     2.}}], 
                    
                    LineBox[{{-0.9999999999999999, 2.}, {
                    1.2246467991473532`*^-16, 2.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.632426463519458`, 
                    1.8378676824027063`}, {-0.25, 0}, 
                    Offset[8], {1., 5.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.235871269246914`, 
                    0.786213352753084}, {-0.25, 0}, 
                    Offset[8], {0.1559393025382665, 0.19127469773826666`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.920182958499248`, 
                    0.12919975755013535`}, {-0.25, 0}, 
                    Offset[8], {0.14306450739988819`, 0.08380524814062784}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    
                    False]], {-11.355555555555554`, -0.9999999999999991}, \
{-0.25, 0}, 
                    Offset[8], {0.08888888888889035, 
                    1.1102230246251565`*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.417705098312485`, 
                    4.164589803375033}, {-0.25, 0}, 
                    Offset[8], {1., 2.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.812820711494876`, 
                    3.9773027452952476`}, {-0.25, 0}, 
                    Offset[8], {0.08165695756016156, 0.017459426695964453`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.355555555555554`, 
                    3.000000000000001}, {-0.25, 0}, 
                    Offset[8], {0.08888888888889035, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.266666666666666`, 
                    2.000000000000001}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888857, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, 
                    5.000000000000001}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-11.4, 
                    4.4}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.355555555555554`, 5.}, {-0.25, 0}, 
                    Offset[8], {
                    0.08888888888889035, -8.881784197001252*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    3.400000000000001}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000004`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.500723193132872, 
                    3.9982540573304046`}, {-0.25, 0}, 
                    Offset[8], {
                    0.37633139151203565`, -0.0034918853391929794`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, 
                    2.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.777777777777779, 
                    3.000000000000001}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    2.6000000000000005`}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-7.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-6.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.355555555555556, 
                    3.0000000000000004`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888946, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-2.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1.0000000000000002`, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999999, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 2.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13., 7.960204194457795*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_b\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_b", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., 5.000000000000001}], 
                    Offset[{12, 12}, {-12., 5.000000000000001}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-12., 5.000000000000001}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., 4.000000000000001}], 
                    Offset[{12, 12}, {-11., 4.000000000000001}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 
                    1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-11., 4.000000000000001}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 3.0000000000000004`}], 
                    Offset[{12, 12}, {-10., 3.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-10., 3.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_3", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 2.0000000000000004`}], 
                    Offset[{12, 12}, {-9., 2.0000000000000004`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-9., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"coupling_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["coupling_4", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[14]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13., 3.000000000000001}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"checker_w\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["checker_w", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13., 5.000000000000001}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 3.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 3.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-8., 3.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Total_loss_jac\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2", ",", "2"}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_loss_jac", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {2, 2, 2, 2}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8., 1.0000000000000004`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Z_out\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Z_out", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-8., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWI01JX/AcCkFpqAB9qGAJyT27Olvsgt4HwxP7PDdQwl4FK7ps1
638ByF3VVefWw9xIDXMZqOA+5LDbsfV/QGHBnvMg9tpV/6MHg/s2bvwfCnIP
yI0g/vIl/xOoGIYUu6+i7PhukFtA7oKJZWasfY8uRiagyH3HDv93gYUdMJ4V
YOKwMISF6UC5r6z0yH5c4USlMCTbfaC8ALIf5A7ksIMBKqVDst0HS3egsgWX
GlgY4lNDAJDlPkT62noXW9ihq6MgDEl2H3p5R0g9rDzs6XnTQQ/3gewB2QfK
G8SoB4UvLAzxhTU13AcyHxSnxIYdDMDqPzLKG5LcB6tfGxtvzSfRHnhe6Wx/
1k+CNqLdR2yewAVOn/7vgBTPgtR038sn/w1IyRO4ACyeSWgjEnQfKKyKC/ed
ITde0QHMn6B8Tan7QH6EpTmQeeTEKzaQlbnuHZFlAE73IbsNlOZAcUwNt8EA
LL8QcCNW94HcVldzaRWsTKC222AAFo540iOG+5DTGy3CDZ8bQf0WNHfC3Qdy
F6hsgqVfaJtOiZZugwFYnQTDNdVnN0yb9r/c17tpCkgO1BaBpQdYGUpBXvAh
Bzs7VOT5+TRu93Av+w/DxkbB/5H5vj4N+0HqyLWDTP9gAFCfBhx+Po0bQXEO
KtupFZcA7/Dzsw==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-8., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"square\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}], "2"], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["square", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[#^2& , {4, 3}], "Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-7., 2.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"S\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., 2.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_z\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_z", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-6., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWIO9uf9f///1+BgTrAh0rmwEFa6or/INzR9ngS0J0CFBpHdfeB
wg/mRhCe2P+5gQLjqO4+GKiuOrce2Z3Ll/xPIMMYmrkPBF4++W+Qm7PlPsyN
ebnbbp8+/d+BBCNo6j4YAIVdZsba9zB39na/6SQybdLFfTAwa9b/AvS0ScCd
dHUfDPT0vOlAdifI3TiUDoj7YAA9Dx07/N8FTcmAug8ENm78H4qch0qLDx5B
Kt8H3H0wgC0PqakFhQ+0u9DBtGn/y2Fu9HAv+w8q76lshQ81sI933XFjo2Cw
G0HY17tpChXMpSqwsspNQU6bIExi+U5rAPYzBeU7rQFKnKCX71RqI1ECsKYZ
9DbSokX/0+jtMCjAm6bRy/cdW/8H0MthUEAwz4HchJyHSooOnKBi+50QILpM
ANVDyHmotfnuTDqkTZLLLFCbiIrtd0KA7DIVFH5EtpEoARSV+aD2e2HBnvMw
N1LLUUiAKnUSLG1Swyw0QPU6EwBfZk3A
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-6., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_half\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "0.5`"}], " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_half", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[(-0.5) #& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHUgP+//+v0Np8d2Za6or/SGZSCzeSq1dNLSjcx6dpmZdn
1WMP97L/nh6VLyn1KxZAVvidPv3fobhw3xlQmIFwY+Ot+S+f/DegtuMYSHQf
KC7rai6tgrkrN2fLfRq5CwaIch/IXZ3tz/qzMte9g7hr693lS/4nAMUFaOg2
otw3a9b/AuS4BLmTxmGGDHC6D+SGwoI952Huqqw4uY2O7oIBDPeB4hKU3hFx
ueU+KC7p7C4YgLsPlJYWLfqfBnIPyF0g902b9r8c5N4BchvcfejlRVnpkf0D
EJcYwNIyKwkUlzB35eVuu71j6/+AgXYXKC4n9n9uAJX5sDS2a/t/vwGOSzAA
xSUsX4Lqpeqqc+sHQ1yCwgbkFuSy38oqN2UwuAtUpsLyJajsB5W50LKf4vYL
JQDkDuQydtKEL/VAdykhKRkQ94HCDNldeMoLuroPVvZnZqx9D0tjGzf+D8VT
j9PNfchxSULZT3P3IZcXsLhES2P4AM3cB4tL5PKCjLKf6u6Dlf2gcgLmLmh5
oUCGcVR3H5H5klhAdffBwoyENIYPUN190HqcWu1+qrsPAJ89jxE=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-5., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"gaussian_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.8378770664093453`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["gaussian_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.8378770664093453` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.0000000000000004`}], 
                    Offset[{10, 10}, {-4., 2.0000000000000004`}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-4., 2.0000000000000004`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {"Real", "Real"}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 3.0000000000000004`}], 
                    Offset[{10, 10}, {-5., 3.0000000000000004`}]]}, 
                    InsetBox[
                    FormBox["\"S\"", TraditionalForm], 
                    Offset[{0, -1}, {-5., 3.0000000000000004`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"summation_jacobian\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SummationLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", "2"}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["summation_jacobian", Bold], 
                    Style[
                    HoldForm[
                    SummationLayer["Input" -> 2]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 2.}], 
                    Offset[{10, 10}, {-3., 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzNlT1IQlEYhi/V0OjaZg3S2JhONaVhEYa0pviT4r35U5oV1UUimqwGIZdA
giKoENIkopaWMAqaopCWKFxqsP10v7ifXPxL7XivLxxBORwezvudx17rrMnR
wTBMoFv4MFlCw36/JTypEr6YuYDLydltBm7O7rT7B62dwo89wuoXVhdDPcb/
HkAIUa9HcrsO+yGhAVSSpvkELtV2tLDGsZknYGM9Z680wcQ0xZfNkqGA7+oO
uGDx/PNe/o0M0IZjGuSDLleWH4+QC+6sApeR4uLr2afVuq1jRj5p0IcK+pEg
MejDH8bRSFSjMU2V7KWdP8+Mx4lX2uXmxnu0RV1WSlU+YPB5Lx+QK7xwm5aR
C1PGBzMG8+52nXzijB3sk2mZuTBFPvBFIkEcwANcwBeLkRDwKsRW5Cv1RXD+
5lqBLssC7xK6RC6OTb9kUmRCaS50v+CJPM7YxTkZV7jL30CX+C7BZUuL96ft
0CXcDbBI3a/TsbZ24AKn4rtkPakcOBc6Zlrj/LoDHFLH7mx9rwpcfZItivDB
nUm5avhCVj50v2vm+AtnLJkkZrHLSpGNT9plA+5vOZ/UF9hlyYzVSsv4sEup
L5pwP3U+dD94ArlEX6ibOI46X53vst5Q58M7a2DGaoU6n/g/Xs0XjYY63w9V
CIu3
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-3., 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"density_coef\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1.3862943611198906`"}], "+", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["density_coef", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[-1.3862943611198906` + #& , {4, 3}], "Input" -> 
                    "Real"]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1.9999999999999998`, 2.}], 
                    Offset[{10, 10}, {-1.9999999999999998`, 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmAWI01JX/G9tvjvz////IPWUAh8qmIECQO6D4Z6eNx0UGkd194FA
Y+Ot+cjuPHb4vwuZRtHEfSAAjF+l3Jytd2FuLCs9sp+MOKeZ+2Bg+ZL/CZkZ
a9/D3Nnb/aaTBO00dx8MgNIicpzPmvW/gAhtdHMfDIDiGebGkqIDJ4BxroBH
Od3dBwLocY6nPBoQ98HAxP7PDchxvmjR/zQ0JQPqPhiorjq3HtmdO7b+D4BK
DQr3gQC2fK6mFhQ+0O5CB6A4hrnRw73sPygNUNkKH2pgH++648ZGwWA3grCX
e30NFcylKrCyyk3JzdlyHxaelRUnt1Gp3UEtAPYzetqkQZyTC1DihMw6iJYA
I82A6hvkOqiwYM95AnUQLQHONE1CHURLQDDPoddBdI5zossEPHUQLQFJZRa2
OojGcU5WmQqKY+SwpGF5RFGZX1dzaRWyO6nlKCRAcZ308sl/A1gdRA0HoQGq
1ZmgtAmiAQJrTNs=
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-1.9999999999999998`, 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"minus_prob\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["minus_prob", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[Minus[#]& , {4, 3}], "Input" -> "Real"]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 2.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 2.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFASiDWAmIWB6sCHGob8//9foaz0yH5qmIUGKHIfyF2NjbfmZ2asfZ+WuuI/
tRyFBMhyH8hdE/s/N+TmbLkPcldW5rp306b9L6e24xjIcN+sWf8LCgv2nAe5
C4RB8Qp0rxIN3AYCRLvv9On/DsjuAoXdyyf/DWjkLhgg6D5QXNbVXFqF7K4D
e/57AsUFaOw2vO4Duauz/Vk/LI3l5W67DYpbkDgd3IXTfaBwQU9jkyZ8qadh
GiPafehpDJT26ZDG8AGw+0BxVly47wxyGjt2+L/LALoLDCwts5KQy1ekNEaP
tI8TwMpXT4/KlyB3gdw3f87/XKC4IBWM96EE+/q0zPL2rL7r4V7239go+L+P
d91xZ4eKPErNZaCwrkRP+yC2lVVuCiVmUgOA4rK66tx6RNrfenf5kv8J0DRG
lfYLue4Cla+wtA/Kk2tX/Y9GS2N0dx8oXEBtCeS47Ol504GjHKOr+7CVrwTK
fbq4DxSXqG2LrXd3bP0fQIRWmroPvf1KRtuCJu5Db1vA2q9ktC2o7j5Q2YAc
l82Nt+dS0LaguvtA4QZyF6g+p0LbgibhB0pjVDJuwMpnIgHV3QcA3U2J6A==

                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999999999999, 2.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"perpixel\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"0.5`", " ", 
                    RowBox[{"Slot", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["perpixel", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[
                    Shallow[0.5 #& , {4, 3}], "Input" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.2246467991473532`*^-16, 2.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Total_Loss\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Total_Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"checker_b\"", TraditionalForm], 
                    Offset[{0, -7}, {-13., 7.960204194457795*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_1\"", TraditionalForm], 
                    Offset[{0, -15}, {-12., 5.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_2\"", TraditionalForm], 
                    Offset[{0, -15}, {-11., 4.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_3\"", TraditionalForm], 
                    Offset[{0, -15}, {-10., 3.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"coupling_4\"", TraditionalForm], 
                    Offset[{0, -15}, {-9., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"checker_w\"", TraditionalForm], 
                    Offset[{0, -7}, {-13., 3.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-13., 5.000000000000001}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Total_los..\"", "\"Total_loss_jac\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Total_loss_jac", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-8., 3.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Z_out\"", TraditionalForm], 
                    Offset[{0, -7}, {-8., 1.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"square\"", TraditionalForm], 
                    Offset[{0, -13}, {-8., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_z\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_z", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-7., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"minus_half\"", TraditionalForm], 
                    Offset[{0, -13}, {-6., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"gaussian_..\"", "\"gaussian_coef\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "gaussian_coef", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-5., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"plus\"", TraditionalForm], 
                    Offset[{0, -13}, {-4., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"summation..\"", "\"summation_jacobian\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "summation_jacobian", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-5., 3.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"density_c..\"", "\"density_coef\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "density_coef", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-3., 2.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"minus_prob\"", TraditionalForm], 
                    Offset[{0, -13}, {-1.9999999999999998`, 2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"perpixel\"", TraditionalForm], 
                    Offset[{0, -13}, {-0.9999999999999999, 2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Total_Loss\"", TraditionalForm], 
                    Offset[{0, -7}, {1.2246467991473532`*^-16, 2.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-5.393193716300061, 
                    1.0786387432600122`}, {-12.632426463519458`, 
                    1.8378676824027063`}], {0., -0.17}, Automatic, {
                    0.19611613513818404`, 0.9805806756909202}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-4.262855384506947, 
                    3.47535091332949}, {-12.235871269246914`, 
                    0.786213352753084}], {0., -0.17}, Automatic, {
                    0.6318819842417255, 0.7750646153648996}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-2.7799720581843137`, 
                    4.7457091520356025`}, {-11.920182958499248`, 
                    0.12919975755013535`}], {0., -0.17}, Automatic, {
                    0.8628562094610186, 0.5054494651244207}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-6.869504964868043*^-15, 
                    5.5}, {-11.355555555555554`, -0.9999999999999991}], {
                    0., -0.17}, Automatic, {1., 1.2490009027032806`*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-4.919349550499537, 
                    2.4596747752497685`}, {-12.417705098312485`, 
                    4.164589803375033}], {0., -0.17}, Automatic, {
                    0.4472135954999579, 0.8944271909999159}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.1499858073915914`, 
                    5.378432173300869}, {-11.812820711494876`, 
                    3.9773027452952476`}], {0., -0.17}, Automatic, {
                    0.9778967587819761, 0.20908832861665297`}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-11.355555555555554`, 
                    3.000000000000001}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-11.266666666666666`, 
                    2.000000000000001}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-12.399999999999999`, 
                    5.000000000000001}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-11.4, 
                    4.4}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{5.4956039718944346`*^-14, 
                    5.5}, {-10.355555555555554`, 5.}], {0., -0.17}, 
                    Automatic, {1., -9.992007221626245*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526012, 3.8890872965260104`}, {-10.4, 
                    3.400000000000001}], {0., -0.17}, Automatic, {
                    0.7071067811865474, -0.7071067811865477}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0.051030934720856874`, 
                    5.4997632534229615`}, {-9.500723193132872, 
                    3.9982540573304046`}], {0., -0.17}, Automatic, {
                    0.9999569551678111, -0.009278351767428522}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-9.399999999999999, 
                    2.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-1.3739009929736363`*^-14, 
                    5.5}, {-8.777777777777779, 3.000000000000001}], {
                    0., -0.17}, Automatic, {1., 2.4980018054066113`*^-15}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-8.4, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-8.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.889087296526011}, {-8.4, 
                    2.6000000000000005`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{0., 5.5}, {-7.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-6.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-5.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-4.4, 2.0000000000000004`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-6.355555555555556, 
                    3.0000000000000004`}], {0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.889087296526011, 3.889087296526011}, {-4.4, 
                    2.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{2.4424906541753444`*^-15, 5.5}, {-3.4, 2.}], {
                    0., -0.17}, Automatic, {1., -4.440892098500626*^-16}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-2.4, 2.}], {0., -0.17}, Automatic, {
                    1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-1.4, 2.}], {0., -0.17}, Automatic, {
                    1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 2.}], {0., -0.17},
                     Automatic, {1., 0.}]}, FontColor -> GrayLevel[0.7], 
                    FontSize -> 8, FontWeight -> "Thin", StripOnInput -> 
                    False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    Part[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQFaB7pFGYX/rT1jA+FrHGAE0yIOEL4alC8A5atA
+RxQvhKUz+AAM48JRV4LzTwFNP0KUPUf7FHlYebJoPEl0PgiaHwBHPIw+zgO
QD3u8B8C9qPy38P57DEixmrLFtrA+AB7vCqY
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 24, 8, 8, 20, 8, 20, 20, 20, 20, 20, 
                    20, 20, 20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {789., 376.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35.49999999999998, 38.49999999999999}, {
                    28., 18.}}, ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_1"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_2"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_3"], 
                    NeuralNetworks`NetPath["Nodes", "coupling_4"], 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Total_loss_jac"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"], 
                    NeuralNetworks`NetPath["Nodes", "square"], 
                    NeuralNetworks`NetPath["Nodes", "summation_z"], 
                    NeuralNetworks`NetPath["Nodes", "minus_half"], 
                    NeuralNetworks`NetPath["Nodes", "gaussian_coef"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Nodes", "summation_jacobian"], 
                    NeuralNetworks`NetPath["Nodes", "density_coef"], 
                    NeuralNetworks`NetPath["Nodes", "minus_prob"], 
                    NeuralNetworks`NetPath["Nodes", "perpixel"], 
                    NeuralNetworks`NetPath["Outputs", "Total_Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "Total_Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], "Z_out" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    Association[
                    "coupling_1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["net_W" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], 
                    "coupling_4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "checker_w" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "checker_b" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "TLoss_jacobian" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Z_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "net_W" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_B" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_WW" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_w" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "net_BB" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "checker_b" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Loss" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Y_out" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["thread_0" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "core_net" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", 
                    "Output"]}, "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "10", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "11", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "12", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "13", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "14", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "15", "Outputs", 
                    "Output"]}], "2" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{4}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{4}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "$Channels" -> 4, 
                    "$SpatialDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Tanh, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "partLayer1" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 2]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "wb_convert_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Subtract, 1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "exp_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_in" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "partLayer2" -> 
                    Association["Type" -> "Part", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[3, -1]]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "thread_3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Times]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "plus_f" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "core_net", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "wb_convert_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "exp_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_in", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "partLayer2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "plus_f", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "thread_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Y_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus_f", "Outputs", "Output"]}], "Total_loss_j" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "checker_w"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_w"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_W", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "checker_b"] -> 
                    NeuralNetworks`NetPath["Inputs", "checker_b"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_B", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_WW", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Z_out"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Y_out"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "net_BB", "Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "TLoss_jacobian"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Total_loss_j", "Outputs", "Output"]}], "square" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], 2.}]]], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "summation_z" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "minus_half" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, -0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "gaussian_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.8378770664093453`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "Total_loss_jac" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "4" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "summation_jacobian" -> 
                    Association[
                    "Type" -> "Summation", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "density_coef" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    Plus, -1.3862943611198906`, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "minus_prob" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "perpixel" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Times, 0.5, 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_b\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Total_Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"checker_w\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Z_out\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}]}}, BaselinePosition -> 
                  Automatic, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridFrameMargins -> {{0, 0}, {0, 0}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
           Baseline, 
           BaseStyle -> {
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
         StyleBox["]", "NonInterpretableSummary"]}]},
      "CopyTag",
      DisplayFunction->(#& ),
      InterpretationFunction->("NetGraph[<>]"& )],
     False,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Method\"\>", "\[Rule]", "\<\"RealNVP\"\>"}], ",", 
   RowBox[{"\<\"Options\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"MaxTrainingRounds", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "500"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"ActivationFunction\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "Ramp"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"NetworkDepth\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "8"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"CouplingLayersNumber\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "4"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"NetworkType\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"FullyConnected\"\>"}], ",", 
         RowBox[{"\<\"Options\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7728159282538395`*^9},
 CellLabel->
  "Out[265]=",ExpressionUUID->"fe4fa28a-dcdc-4939-86df-393e14b4a6ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PDF", "[", "ld", "]"}]], "Input",
 CellChangeTimes->{3.7728159137027445`*^9},
 CellLabel->
  "In[264]:=",ExpressionUUID->"c9f4a6be-4b46-4649-8845-2fc7b8ae4a10"],

Cell[BoxData[
 RowBox[{"PDF", "[", 
  TagBox[
   TemplateBox[{RowBox[{
       StyleBox[
        TagBox["LearnedDistribution", "SummaryHead"], 
        "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          TemplateBox[{
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                    "], {{{
                    EdgeForm[], 
                    GrayLevel[0.9], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.78], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.65], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.5], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                    Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]], 
                    
                    PointBox[{{4.905308194867242, 2.630836391598927}, {
                    0.20100883034436162`, 0.02382136569576569}, {
                    1.0719666600928879`, -1.250632626872198}, {
                    3.0527398070698992`, 
                    0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                    0.3149621009629985, 
                    1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                    2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}}, {{}, {}}}}, {
                   FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                    AxesLabel -> {None, None}, 
                    FrameLabel -> {{None, None}, {None, None}}, 
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    AxesLabel -> {None, None}, DisplayFunction :> Identity, 
                    Frame -> True, FrameLabel -> {{None, None}, {None, None}},
                     FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "GridLinesInFront" -> True}, 
                    PlotRange -> {{-3, 3}, {-3, 3}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RealNVP\"", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1:eJyFXHl4TkfbzxPZitJQa7WK0Iq1qnbm2GlVtEIspWqvV1RpvZZSte8iJHZV
ak2LlmpImGOpfY8QUSJCEmvzJCKLLJ8+9/nNuc593lyff+b6PTNn5t7nnnsm
qg3+6tNh7m5ubl093dz+bemfj462ZtdQv66hHgp/+C/0cyh8a3/wzf3BLyRw
Ldf4ZwrfdvU/UjjRhW9K6zqR0cCx1C+A4+h7hWvQ/ArH0/oKdyH6NOt4D4WN
lmPFJ2/BLzD4BQa/wOAXGPxa5RgZDQx+gcEvMPgFBr/A4Nc63kNjeuPYxhcw
b8EvMPgFBr/A4NdqJ5HRwOAXGPwCg19g8AsMfq3jPTRmlxzb9Mb5AuYt+AUG
v8Dg1+oHkdHA4BcY/AKDX2DwCwx+reM9NOZ3HNvskuuN8wXMW/ALDH6tfh4Z
DQx+gcEvMPgFBr/A4Nc63kNjcYVjm99xu+R643wB8xb8WuNYZDQw+AUGv8Dg
Fxj8AoNf63gPjcVNjm1xhfsdt0uuN84XMG/BLzD4BQa/wOAXGPwCg1/reA+N
7Qsc2+Imjyvc77hdcr1xvoB5a92PIqOt+1FktHU/ioy27keR0db9COM9NOs6
Phzb9gUeN3lc4X7H7ZLrjfMFzFvwCwx+gcEvMPi1jvfQ2L7OsW3f4/sCj5s8
rnC/43bJ9cb5AuYt+AUGv8Dg1zreQ2N5C8e2fZ3ve3xf4HGTxxXud9wuud44
X8C8Bb/A4Nc6zkOzrufDsS1v4fs63/f4vsDjJo8r3O+4XXK9cb6AeQt+reM9
NJZ3cmzLy3jewvd1vu/xfYHHTR5XuN9xu+R643wB8xb8sryaY1veyfMynrfw
fZ3ve3xf4HGTxxXud9wuud44X9bxZmu1Z/s5gufZPA/leRrPY/g+z/dBvk/w
OMrjDPdDbqdcj5xP3rqGd/XS0YJ/9rvG+m3fYRz7Xiuq5fPw7zgdRdCtudjz
89ZZ+//9rlqsw8fx3/n6fB2MZ/06m4evq0W61F0gqXXX6YyerTDZm1Phd1wT
3FMY8uHzWLHZXnTZy1kBXI3mUxjzgQ6sD4z1gQsK//2XJax0F9i+A+Yt6AEG
PVa+C9S6+B2Ytyk0n8KY3yq3AjUO8wHDrhjWMQ/5l1MA/0HzKYzvwAd+B+Yt
5gPGfMCgG+MwPzBvoQ9gzAfM9YZ1+HfAkAcw6MG8oAeYtxTO3DVgzMf5xDis
D4x1+TzAiL/c7vk5GP2Ix8Cg/3/jAnX+4v7B6wvoJ7+OjAZGPAcGfxxDL4gX
wKCX+xH4Ar3o53aN/QL9kB/HGG/ly/Q/fp5GP/gFtp5jnIo/jmFH0CP6gbm/
8vMsjwf8XIt+0AfM/QoYcuN2DszjA/qBsS7sg8cP0AH9cjvjcZDHG+73mK8o
P0Q/6MN8oAd8ww7QD8zlxOMoj1/QO9bneYx133HXrfuOu87thO8D6Iec0Q8+
gbEuMPInHl/xe1F+Cb1b83Mnq3OY+wDH+N6aj5txmp9L8Dv8D9+Df465nNEP
voAhfx7P+XkL84E/vq9xbI3XDo3HfZ53c3rxPegFhlyAQScw6OPxmtcRuF55
nYzHS34O5fGR1yG4XfJzHI9nvE7D/Yif63n84eckHh95HAYGveAT/PF4xuKF
rf7E4wOvP/H4wOtb3N95fYf7O68Pcf/k9Q/uf7yewv2H1xO4fVv1mC8drnHu
+t+ufk8dvx9wffdUrnDJ7bnkv6Pt5vo90bCHdIHWRd7L88Dof+H+HLHMNY+b
hnY5tTpaY7w+lsYb+k9X7T5aT3Si9Qw+8gV+RxtC9Brxx1PDOLQucRU6NH/X
glcV/xmu8VES9GA+8A2+QB++h3zwPejFeugH35wfyBHzkx2mStCJfpJjMQ39
kAPkn+canyJAF+SAfugB/ZAP+iF/8AG+jxFWdAKDfowHv8DQP8bDvkA35PgW
0aPkhH7wiX7Qif4xJA8dfEOPoAtyRj/oRz/0DLmDX8gNdKMfdKAf80OumB9y
wPfQO76HXpEvQV7Yz/Ad4gavsyC+Qb74Hr8jvsDfgSE30InxmB92AbljXmDM
h/Ggk+sJGPRhXvCLeWBv+A7joC/MD4z4C36wDvQJ+wDG/JgH/GA+xEdg0AHM
7QbrAiPeQh74HXRhfmCeZ4FO8I35gSE/zIN4D/nBX7j/8HOK9ZyWrvwH8wGD
D9gd+ClKDhgPPnidxHquc+j83GWtlzh0vu9bz0EOW14PjH28qDpKUfskMPp5
Heh/z5uv9jueZ2G8NW/LV36E9fg+bs07zThTVB2F5z38HId58Ttv0Y/xtK67
Zj2HOTT8zlv0I34j7sK+gGH31n57C/0iniMu4ztgfs6ynisdys8xHnIEhp1D
L6APfoO4Dgz98hb2wvMUfAfM80pgfA96MR70AnM6YYfWukmqaq12maq+Rzzh
dRWsg35gtn/r3D5BN/JMa15p7nvA4AvyRzzhdTrMZ7X7fFu+x/Mc0AX9AUPu
vA4F+4f+uN6BQQfGgw70gw5gfq4Btp67UlV+AH0Bgx/kC8gTgIuqo8IfQR++
A33ARdVN8T3iOMZDjsDgC99b66oODXLAeORFwIiP8GvIGxj2CYz9Bhh2zzH3
V/wO/WIeYMR//A49wd6x30IvHPN3BpAz5In4zPMIyJdjbu/4HnTB/vg5C3kE
sNWezDoM+q33qU61PvqBeV0H/dAnMPQO+4SdW+0rX+W/1nOYWVdBP843wOAH
+ga/HCNfgP8g3iPOAUPuiIvWc3g+yyuzVV4Du4E8gEEf7A/0cAx743GWx2HI
F99Dnhxb6zP5ar+APIG5HVnztFQWF1NtdlSU3XG7BB/wf/CJ+ACM9XneAv8C
/9h/wC8w+vm9APYX+DMw4gDvt+YR6bb6DOwE64Jv0AmMftgr+oGt9zcFaj+G
PfJ7UdSTgHFehr3xOpOVbofKbzC/C3b1Unk3MH83yOMh5AL98Lox+IK+OX38
XIH5+D0m1gfG+rAXYGtdxcz7IC9gyMt6Ds1W5zDQifwE6+J7+Csw7N6al7mr
+iHyVSufBZLrBRhxC/aF9TEf+ObzwY95Xcr6/sZpq1NZ39M4VR6Gfl5Xh39h
fugH46x1qBxVb8f8wIgLxn6q8gJ+jwJ64C/Ubb8XRRzA/sDzJx7feXzm8ZXX
hRD/8B0wrwPBDiEf0F/Uvg57tOb57up+FfZj1Zt5DkM93Frf9lT1FH4Pz+s+
oIPX60A35oe8MT/kxO8xrff15v7N7835fQH6kQfyelJRfgh7QT/8wpr3m/cm
sA9+Puf3wrAnyB96h754XsrrJfBLjIP9We/fC1T84vbJ771BP68rw96gV+iN
vweF/jAedmvdr9xVnRB6wH4A+wA/1jpWtq3OD3/lcRqY5ye8Lor+oup2sBes
g++Bi6oL8zoi5MDlAnuCnXP+8Tv0ba1LpbPztdN2Prfew6UqufB7e/6Ogtcp
+DkLdgsMOsEX4i/0Df8Ghn9A/4jT1ncq6bbzDDD4wvqQO79n4O95sT76sT6v
m1ntJ5/ly+Z9J/QCe4HeeB0S8oG88R3kiu+sebT5Ls3690VOFR+s91L2dzZY
D/EF9gX+ef7BW3wP/nmdiO9rPP5az2/5Nvuwvp/1VPbA7314HRP2YZWbU1jr
XuY5HvyDziNX/jwxqZH5fmnIiW03S+d42t4bLYgoX9p3hZuS45wBD7M+PeKm
8q7YMjWCDo0vVPcJkUszRzVv/VxO8DvXfkFp8/0Q5PDt4827X5uaI7f3HBcQ
quXZ3vv4Bpdvvn1phpL7D5/0qyFvZSi/7Ls5a2zOBqf8pcqxucn5+bb3OoFL
ZzVcvOOeHNEkfX61qDTbex1Hr4WJvzZOVfT679vTouWLg7JhXr9OlcvmqXWL
LXqytXuFNIXvFv954fkNZv1/XPKCjOgZnrb763m7C9OmXtgjhi+rt3WETJL8
fYqxnsqXG2zxHl6vwV1xr29aWMOR5n31z82rtPzN94nt7w+6puz21/omqnz2
9HGf2KXF0kSj7wZlT/wsz/aeP/LYyvc2j3ksrvi955VV7pztPUjsL4tXz5n7
RNG/Kyes9xsiU6TFJt4cOStN7c/go3G/Yd32lMxU+97tlPRNtctnKv4OkP7V
+jWPdv6z8s08Uapzx/oR/S7Z3mvIN8KvJ+ww6zhxQ7tUOjjWfG/+dKVv0w43
zfg4a97zjZWTzPfmS0bVGvxiskML+vnB+olZL6T3/MH+47906FcLkhMqJ2TK
ak8u1HpxxqH3HPRPsex3n8rteR2WD45x6Oe/a7Yi6vEt6fOo9Z1x3zj0vM2t
3H9v5qkvHH00fN7BPOl0q73kfN/HsuHTf6YG+mTK8EtH5i796pZcHrAtQJbJ
lB8emuFV7+kLeYDkKzf+ePdSft0HotyF7Ptf7XoiJ7fbO6jskjz56ECfwFOe
v8vPJ/vXqvWuN/Qv34lIkBPaxgrHb1vPhwelijNv1lnxldse2WVlQJ12oRki
/aP+Fy7FmW1Q/W513q++V15reGb39IVu2tUvJ55dst9svx1aaVX3t4vp7/cP
mtRgWKHUk33yWvm761dba+Epb7npF3Pubwz864rYsSbGMae0m55ZOabCqfAk
senalIa/DiiQaUu+/PtZlpd++Kq2YuOAHFn3/eb1Vm3JEg2plSW3DOhbYkK2
DGw6Y9P6NU45tX/miu09n8uLTRrse3ApXXpv++JEi+tXRKOOAVV3jk6XtX+p
czvBL0lcaO/ccis4TS6IKFnvxslk1ZYKd4ttdeCwrPrzeW1peIqsN6zi84ev
nBUh61PebBVxT9Zu/2lGm3VnRZvRC/0frb8nTy79pZlXRL5s0nPc8EkTr8hp
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                    "], {{{
                    EdgeForm[], 
                    GrayLevel[0.9], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.78], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.65], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                    EdgeForm[], 
                    GrayLevel[0.5], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                    Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]], 
                    
                    PointBox[{{4.905308194867242, 2.630836391598927}, {
                    0.20100883034436162`, 0.02382136569576569}, {
                    1.0719666600928879`, -1.250632626872198}, {
                    3.0527398070698992`, 
                    0.3872158300237583}, {-1.8438997564108928`, \
-1.502672689805559}, {-2.913246104009823, -1.3391199692975575`}, {
                    0.3149621009629985, 
                    1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                    2.9757868411226935`, 1.1755085189629118`}}]}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}, {{
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    PointSize[0.08]]}, {}}}, {{}, {}}}}, {
                   FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                    AxesLabel -> {None, None}, 
                    FrameLabel -> {{None, None}, {None, None}}, 
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    AxesLabel -> {None, None}, DisplayFunction :> Identity, 
                    Frame -> True, FrameLabel -> {{None, None}, {None, None}},
                     FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "GridLinesInFront" -> True}, 
                    PlotRange -> {{-3, 3}, {-3, 3}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RealNVP\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["10000", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
           "SummaryPanel"], 
          ButtonBox[
           DynamicBox[
            ToBoxes[
             If[
              
              Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
               "Local"], 
              Style["This object cannot be used as input.", "SummaryEmbed"], 
              BoxForm`EmbedSummaryLabel[LearnedDistribution, 4371048, 
               Dynamic[Typeset`embedState$$]]], StandardForm]], 
           ButtonFunction :> 
           BoxForm`EmbedSummaryInterpretation[
            LearnedDistribution, 
             8813937620921881760724967665765432050373222368601455234304, 
             EvaluationBox[], 
             Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
           "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
           Dynamic[
             
             And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
              "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
           Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
         "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("LearnedDistribution[\[Ellipsis]]"& )],
   False,
   BoxID -> 8813937620921881760724967665765432050373222368601455234304,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "]"}]], "Output",
 CellChangeTimes->{{3.77281590584874*^9, 3.7728159140697837`*^9}},
 CellLabel->
  "Out[264]=",ExpressionUUID->"9ca9ef6d-7a4a-4047-bd5d-70e1a5d9afea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{"PDF", "[", 
    RowBox[{"ld", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellLabel->
  "In[269]:=",ExpressionUUID->"7c3507ef-4f52-429c-be0c-f85529b99a53"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.7728163186022325`*^9},
 CellLabel->
  "Out[269]=",ExpressionUUID->"7e82f26f-2e59-4ee5-9279-794eb3b49289"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", 
  SqrtBox[
   RowBox[{"2", "\[Pi]"}]], "]"}]], "Input",
 CellChangeTimes->{{3.7729807433448596`*^9, 3.7729807764314113`*^9}, 
   3.7729811901721663`*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"6e64b7b1-be8f-473b-81cf-712b6a94128f"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{"Log", "[", 
   RowBox[{"2", " ", "\[Pi]"}], "]"}]}]], "Output",
 CellChangeTimes->{3.7729811905002546`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"7b234074-55c3-4e5c-a8e8-405ee05322e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"2", " ", "\[Pi]"}], "]"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[27]:=",ExpressionUUID->"d23d9c0d-accf-4747-9750-501c3c8aa9c6"],

Cell[BoxData["0.9189385332046727`"], "Output",
 CellChangeTimes->{3.7729811920281696`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"8043abeb-0cc2-480c-b6f9-a586228651a6"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{786, 988},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
Magnification:>1.25 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 186, 3, 67, "Subsection",ExpressionUUID->"87337af6-f5dc-4bff-8981-81ba89099865"],
Cell[CellGroupData[{
Cell[791, 29, 828, 22, 56, "Input",ExpressionUUID->"82dfa91b-7333-4bfb-8cc5-f642e388cf04"],
Cell[1622, 53, 1827, 37, 149, "Output",ExpressionUUID->"b1b4dff8-3b3f-4c29-95c4-22dc579ec317"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3486, 95, 396, 9, 35, "Input",ExpressionUUID->"80295e3c-af49-42a2-89ee-bb33f8e0861f"],
Cell[3885, 106, 3542, 77, 299, "Output",ExpressionUUID->"cb27ec8e-7cbc-4935-a341-393451e89cab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7464, 188, 563, 12, 56, "Input",ExpressionUUID->"b9830594-90f4-4367-a6ae-0e9eb3bc2115"],
Cell[8030, 202, 383, 8, 46, "Output",ExpressionUUID->"f156bf38-9487-4067-a46f-0b0f518fb4cb"]
}, Open  ]],
Cell[8428, 213, 199, 5, 35, "Input",ExpressionUUID->"6cd38048-a909-42da-8264-0b92ad0ed2ad"],
Cell[8630, 220, 233, 6, 35, "Input",ExpressionUUID->"130c6805-872a-4ed3-90c1-0cbac929fba8"],
Cell[CellGroupData[{
Cell[8888, 230, 496, 12, 49, "Input",ExpressionUUID->"0ec16479-bf26-475d-907d-22272c67b717"],
Cell[9387, 244, 11649, 210, 297, "Output",ExpressionUUID->"565cd58f-21c6-4ba0-8806-7e5cda5aab3b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21073, 459, 454, 11, 49, "Input",ExpressionUUID->"44bdc431-a7bb-47cb-99b8-c5d824b68e3d"],
Cell[21530, 472, 17126, 300, 325, "Output",ExpressionUUID->"e3dd7b3f-9539-45f4-98e6-9790e25935d6"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[38705, 778, 211, 4, 46, "Subsection",ExpressionUUID->"5e309b92-9483-4458-b46a-7a906d394649"],
Cell[CellGroupData[{
Cell[38941, 786, 2505, 62, 296, "Input",ExpressionUUID->"99d2366b-03db-44d4-9dcb-abca59e5308c"],
Cell[41449, 850, 100520, 1667, 427, "Output",ExpressionUUID->"191e5b7b-a68c-4887-bb9e-d4aab5ebe924"]
}, Open  ]],
Cell[141984, 2520, 1455, 43, 201, "Input",ExpressionUUID->"d6ef9274-ddef-4c5d-80f4-c039dbdf6b8a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143476, 2568, 167, 3, 67, "Subsection",ExpressionUUID->"6b2657a6-e234-497a-ac67-6a8995513b9a"],
Cell[CellGroupData[{
Cell[143668, 2575, 301, 6, 41, "Input",ExpressionUUID->"c515ea01-5154-40ef-935e-51cd4ac42277"],
Cell[143972, 2583, 259, 5, 40, "Output",ExpressionUUID->"ba1ba1b4-ef56-4146-95d0-2db48d54d2b3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144268, 2593, 337, 8, 35, "Input",ExpressionUUID->"9dda8c75-08f3-4333-a1e7-97d07853f843"],
Cell[144608, 2603, 278, 5, 40, "Output",ExpressionUUID->"4362b80e-f202-4922-b02b-3c413c450eaa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144923, 2613, 1029, 25, 94, "Input",ExpressionUUID->"51be7a05-f3a5-4198-abb8-12e35b0a5a82"],
Cell[145955, 2640, 14660, 256, 300, "Output",ExpressionUUID->"51a42e41-a11a-4dca-b0c5-8bd54894b931"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[160664, 2902, 181, 3, 67, "Subsection",ExpressionUUID->"02859dcc-83f7-468f-bc02-b8061d7359b6"],
Cell[CellGroupData[{
Cell[160870, 2909, 1192, 22, 108, "Input",ExpressionUUID->"c31d5cb8-3edc-4b5b-8d0a-7575a5198536"],
Cell[162065, 2933, 1351313, 25543, 86, "Output",ExpressionUUID->"66865cd8-df89-4960-b728-8f0d351d30ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1513415, 28481, 349, 7, 35, "Input",ExpressionUUID->"e141c67f-00d0-4e4a-9123-6ea44749aedb"],
Cell[1513767, 28490, 105827, 1755, 402, "Output",ExpressionUUID->"71a05f65-309c-4833-a601-3b4577176481"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1619631, 30250, 788, 22, 60, "Input",ExpressionUUID->"6680d8c5-1215-4e66-a79b-aed9fc20309f"],
Cell[1620422, 30274, 211, 4, 40, "Output",ExpressionUUID->"c08b4f3b-583e-421b-8342-8f2eebe4b0a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1620670, 30283, 261, 6, 35, "Input",ExpressionUUID->"2e867fff-85d9-4503-80e9-b7ff53759bdc"],
Cell[1620934, 30291, 1364955, 23412, 399, "Output",ExpressionUUID->"fe4fa28a-dcdc-4939-86df-393e14b4a6ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2985926, 53708, 184, 4, 35, "Input",ExpressionUUID->"c9f4a6be-4b46-4649-8845-2fc7b8ae4a10"],
Cell[2986113, 53714, 77405, 1376, 110, "Output",ExpressionUUID->"9ca9ef6d-7a4a-4047-bd5d-70e1a5d9afea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3063555, 55095, 500, 15, 35, "Input",ExpressionUUID->"7c3507ef-4f52-429c-be0c-f85529b99a53"],
Cell[3064058, 55112, 162, 3, 40, "Output",ExpressionUUID->"7e82f26f-2e59-4ee5-9279-794eb3b49289"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3064257, 55120, 268, 6, 45, "Input",ExpressionUUID->"6e64b7b1-be8f-473b-81cf-712b6a94128f"],
Cell[3064528, 55128, 252, 6, 57, "Output",ExpressionUUID->"7b234074-55c3-4e5c-a8e8-405ee05322e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3064817, 55139, 259, 7, 52, "Input",ExpressionUUID->"d23d9c0d-accf-4747-9750-501c3c8aa9c6"],
Cell[3065079, 55148, 169, 2, 73, "Output",ExpressionUUID->"8043abeb-0cc2-480c-b6f9-a586228651a6"]
}, Open  ]]
}, Open  ]]
}
]
*)

